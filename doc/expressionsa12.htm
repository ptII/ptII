<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<!-- Generated from latex, don't update this file, update -->
<!-- ptIIdoc/doc/design/src/tex/expression.tex -->

<meta name="LASTUPDATED" content="$Id$">
<link href="default.css" rel="stylesheet" type="text/css">
<title>12 Units</title>
</head>

<body link="#3366CC" vlink="#9999CC" text="#000000" alink="#0000CC" bgcolor="#FFFFFF"


<table width="331" border="0" align="right" cellpadding="0" cellspacing="0">
  <tr>
    <td><a href="expressions.htm"><img src="img/navtoc.gif" width="84" height="23"
    border="0" alt="TOC"> </a></td>
    <td><a href="expressionsa11.htm"><img src="img/navprev.gif" width="81" height="23"
    border="0" alt="PREV"> </a></td>
  <td><a href="expressionsa13.htm"><img src="img/navnext.gif" width="81" height="23" border="0"
 alt="NEXT"> </a></td>

  </tr>
</table>

<blockquote>
<div class="p"><!----></div>
 <h2><a name="tth_sEc12">
12</a>&nbsp;&nbsp;Units</h2>
<a name="sec:units">
</a>

<div class="p"><!----></div>
Ptolemy II supports  units systems, which are
built on top of the expression language. Units systems allow parameter
values to be expressed with units, such as "1.0 * cm", which is
equal to "0.01 * meters". These are expressed this way (with the *
for multiplication) because "cm" and "meters" are actually
variables that become in scope when a units system icon is dragged in
to a model. A few simple units systems are provided (mainly as
examples) in the utilities library.

<div class="p"><!----></div>
A model using one of the simple provided units systems is shown in
figure <a href="#fig:unitSystem">8</a> This unit system is called
 BasicUnits; the units it defines can
be examined by double clicking on its icon, or by invoking Configure,
as shown in figure <a href="#fig:unitSystemConfigure">9</a>. In that figure, we
see that "meters", "meter", and "m" are defined, and are all
synonymous. Moreover, "cm" is defined, and given value
"0.01*meters", and "in", "inch" and "inches" are defined, all
with value "2.54*cm".

<div class="p"><!----></div>

<div class="p"><!----></div>
<a name="tth_fIg8">
</a> <center><img src="img/vol1Figure3-8.png"/>

<center>Figure 8: Example of a model that includes a unit system.</center>
<a name="fig:unitSystem">
</a>
</center>
<div class="p"><!----></div>

<div class="p"><!----></div>
<a name="tth_fIg9">
</a> <center><img src="img/vol1Figure3-9.png"/>

<center>Figure 9: Units defined in a units system can be examined by invoking Configure on its icon.</center>
<a name="fig:unitSystemConfigure">
</a>
</center>
<div class="p"><!----></div>
In the example in figure <a href="#fig:unitSystem">8</a>, a constant with value
"1.0 * meter" is
fed into a Scale actor with scale factor equal to "2.0/ms". This
produces a result with dimensions of length over time. If we feed this
result directly into a Display actor, then it is displayed as "2000.0
meters/seconds", as shown in figure <a href="#fig:unitSystemRun">10</a>, top display. The canonical
units for length are meters, and for time are seconds.

<div class="p"><!----></div>

<div class="p"><!----></div>
<a name="tth_fIg10">
</a> <center><img src="img/vol1Figure3-10.png"/>

<center>Figure 10: Result of running the model in figure <a href="#fig:unitSystem">8</a></center>
<a name="fig:unitSystemRun">
</a>
</center>
<div class="p"><!----></div>
In figure <a href="#fig:unitSystem">8</a>, we also take the result and feed it to
the  InUnitsOf actor, which divides its input by its
argument, and checks to make sure that the result is unitless. This
tells us that 2 meters/ms is equal to about 78,740 inches/second.

<div class="p"><!----></div>
The  InUnitsOf actor can be used to ensure that
numbers are interpreted correctly in a model, which can be effective
in catching certain kinds of critical errors. For example, if in
figure <a href="#fig:unitSystem">8</a>, we had entered "seconds/inch" instead
of "inches/second" in the InUnitsOf actor, we would have gotten the
exception in figure <a href="#fig:unitSystemError">11</a> instead of the execution
in figure <a href="#fig:unitSystemRun">10</a>.

<div class="p"><!----></div>

<div class="p"><!----></div>
<a name="tth_fIg11">
</a> <center><img src="img/vol1Figure3-11.png"/>

<center>Figure 11: Example of an exception resulting from a units mismatch.</center>
<a name="fig:unitSystemError">
</a>
</center>
<div class="p"><!----></div>
Units systems are built entirely on the expression language
infrastructure in Ptolemy II. The units system icons actually
represent instances of scope-extending attributes, which are
attributes whose parameters are in scope as if those parameters were
directly contained by the container of the scopeextending
attribute. That is, scope-extending attributes can define a collection
of variables and constants that can be manipulated as a unit. In
version 2.0 of Ptolemy II, two fairly extensive units systems are
provided, CGSUnitBase and 
ElectronicUnitBase. Nonetheless, these are intended as examples only, and can no doubt be significantly improved and extended.

</blockquote>
<table width="331" border="0" cellpadding="0" cellspacing="0">
<tr>
  <td><a href="expressions.htm"><img src="img/navtoc.gif" width="84" height="23" border="0"
  alt="TOC"> </a></td>
  <td><a href="expressionsa11.htm"><img src="img/navprev.gif" width="81" height="23" border="0"
  alt="PREV"> </a></td>
  <td><a href="expressionsa13.htm"><img src="img/navnext.gif" width="81" height="23" border="0"
 alt="NEXT"> </a></td>


</tr>
</table>

</body>
</html>
