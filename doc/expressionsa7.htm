<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<!-- Generated from latex, don't update this file, update -->
<!-- ptIIdoc/doc/design/src/tex/expression.tex -->

<meta name="LASTUPDATED" content="$Id$">
<link href="default.css" rel="stylesheet" type="text/css">
<title>7 Defining Functions</title>
</head>

<body link="#3366CC" vlink="#9999CC" text="#000000" alink="#0000CC" bgcolor="#FFFFFF"


<table width="331" border="0" align="right" cellpadding="0" cellspacing="0">
  <tr>
    <td><a href="expressions.htm"><img src="img/navtoc.gif" width="84" height="23"
    border="0" alt="TOC"> </a></td>
    <td><a href="expressionsa6.htm"><img src="img/navprev.gif" width="81" height="23"
    border="0" alt="PREV"> </a></td>
    <td><a href="expressionsa8.htm"><img src="img/navnext.gif" width="81" height="23"
    border="0" alt="NEXT"> </a></td>

    
  </tr>
</table>




<blockquote>

<div class="p"><!----></div>
<h2><a name="tth_sEc7"> 
7</a>&nbsp;&nbsp;Defining Functions</h2>
<a name="pgfId-190432">
</a> 
The expression language supports definition of  functions. The syntax is:

<pre> 
function(arg1:Type,&nbsp;arg2:Type...)
&nbsp;&nbsp;&nbsp;function&nbsp;body&nbsp;

</pre> 
where <tt>function</tt>' is the keyword for defining a function. The type of an argument can be left unspecified, in which case the expression language will attempt to infer it. The function body gives an expression that defines the return value of the function. The return type is always inferred based on the argument type and the expression. For example:

<pre> 
function(x:double)&nbsp;x*5.0

</pre> 
defines a function that takes a <em>double</em> argument, multiplies it by 5.0, and returns a double. The return value of the above expression is the function itself. Thus, for example, the expression evaluator yields:

<pre>
&#62;&#62;&nbsp;function(x:double)&nbsp;x*5.0
(function(x:double)&nbsp;(x*5.0))

</pre> 
To apply the function to an argument, simply do

<pre>
&#62;&#62;&nbsp;(function(x:double)&nbsp;x*5.0)&nbsp;(10.0) 
50.0

</pre> 
Alternatively, in the expression evaluator, you can assign the function to a variable, and then use the variable name to apply the function. For example,

<pre>
&#62;&#62;&nbsp;f&nbsp;=&nbsp;function(x:double)&nbsp;x*5.0
(function(x:double)&nbsp;(x*5.0))
&#62;&#62;&nbsp;f(10) 
50.0

</pre>

<div class="p"><!----></div> 
Functions can be passed as arguments to certain  higher-order functions" that have been defined (see 
Table <a href="expressionsa13.htm#tbl:miscellaneous">19</a>) . For example, the
iterate() function takes three arguments, a 
function, an integer, and an initial value to which to apply the 
function. It applies the function first to the initial value, then to 
the result of the application, then to that result, collecting the 
results into an array whose length is given by the second 
argument. For example, to get an array whose values are multiples of 
3, try

<pre>
&#62;&#62;&nbsp;iterate(function(x:int)&nbsp;x+3,&nbsp;5,&nbsp;0)
{0,&nbsp;3,&nbsp;6,&nbsp;9,&nbsp;12}

</pre> 
The function given as an argument simply adds three to its 
argument. The result is the specified initial value (0) followed by 
the result of applying the function once to that initial value, then 
twice, then three times, etc.

<div class="p"><!----></div> 
Another useful higher-order function is the  
map() function. This one takes a function and an array as arguments, and simply applies the function to each element of the array to construct a result array. For example,

<pre>
&#62;&#62;&nbsp;map(function(x:int)&nbsp;x+3,&nbsp;{0,&nbsp;2,&nbsp;3})
{3,&nbsp;5,&nbsp;6}

</pre> 
A typical use of functions in a Ptolemy II model is to define a 
parameter in a model whose value is a function. Suppose that the 
parameter named <tt>f</tt> has value <tt>function(x:double)x*5.0</tt>. 
Then within the scope of that parameter, the expression
<tt>f(10.0)</tt> will yield result 50.0.

<div class="p"><!----></div> 
Functions can also be passed along connections in a Ptolemy II 
model. Consider the model shown in figure <a href="#fig:functionsOnArcs">6</a>. In that 
example, the Const actor defines a function that simply squares the 
argument. Its output, therefore, is a token with type function. That 
token is fed to the "f" input of the Expression actor. The 
expression uses this function by applying it to the token provided on 
the "y" input. That token, in turn, is supplied by the Ramp actor, 
so the result is the curve shown in the plot on the right.

<div class="p"><!----></div>

<div class="p"><!----></div>
<a name="tth_fIg6">
</a> <center> <img src="img/vol1Figure3-6.png"/>

<center>Figure 6: Example of a function being passed from one actor to another</center>
<a name="fig:functionsOnArcs">
</a>
</center>
<div class="p"><!----></div> 
A more elaborate use is shown in figure <a href="#fig:functionsOnArcsHOF">7</a> 
In that example, the Const actor produces a function, which is then 
used by the Expression actor to create new function, which is then 
used by Expression2 to perform a calculation. The calculation 
performed here adds the output of the Ramp to the square of the output 
of the Ramp.

<div class="p"><!----></div>

<div class="p"><!----></div>
<a name="tth_fIg7">
</a> <center> <img src="img/vol1Figure3-7.png"/>

<center>Figure 7: More elaborate example with functions passed between actors</center>
<a name="fig:functionsOnArcsHOF">
</a>
</center>
<div class="p"><!----></div> 
Functions can be recursive, as illustrated by the following (rather arcane) example:
<pre>
&#62;&#62;&nbsp;fact&nbsp;=&nbsp;function(x:int,f:(function(x,f)&nbsp;int))&nbsp;(x&lt;1?1:x*f(x-1,f))
(function(x:int,&nbsp;f:function(a0:general,&nbsp;a1:general)&nbsp;int)&nbsp;(x&lt;1)?1:(x*f((x-1),&nbsp;f)))
&#62;&#62;&nbsp;factorial&nbsp;=&nbsp;function(x:int)&nbsp;fact(x,fact)
(function(x:int)&nbsp;(function(x:int,&nbsp;f:function(a0:general,&nbsp;a1:general)&nbsp;int)
&nbsp;(x&lt;1)?1:(x*f((x-1),&nbsp;f)))(x,&nbsp;(function(x:int,
&nbsp;f:function(a0:general,&nbsp;a1:general)&nbsp;int)&nbsp;(x&lt;1)?1:(x*f((x-1),&nbsp;f)))))
&#62;&#62;&nbsp;map(factorial,&nbsp;[1:1:5].toArray())
{1,&nbsp;2,&nbsp;6,&nbsp;24,&nbsp;120}

</pre>

The first expression defines a function named "fact" that takes a function as an argument, and if the argument is greater than or equal to 1, uses that function recursively. The second expression defines a new function "factorial" using "fact." The final command applies the factorial function to an array to compute factorials.

</blockquote>
<table width="331" border="0" cellpadding="0" cellspacing="0">
 <tr>
   <td><a href="expressions.htm"><img src="img/navtoc.gif" width="84" height="23" border="0"
   alt="TOC"> </a></td>
   <td><a href="expressionsa6.htm"><img src="img/navprev.gif" width="81" height="23" border="0"
   alt="PREV"> </a></td>
   <td><a href="expressionsa8.htm"><img src="img/navnext.gif" width="81" height="23" border="0"
   alt="NEXT"> </a></td>


 </tr>
</table>

</body>
</html>
