<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<!-- Generated from latex, don't update this file, update -->
<!-- ptIIdoc/doc/design/src/tex/expression.tex -->

<meta name="LASTUPDATED" content="$Id$">
<link href="default.css" rel="stylesheet" type="text/css">
<title>3.4 Composite Data Types</title>
</head>

<body link="#3366CC" vlink="#9999CC" text="#000000" alink="#0000CC" bgcolor="#FFFFFF"


<table width="331" border="0" align="right" cellpadding="0" cellspacing="0">
  <tr>
    <td><a href="expressions.htm"><img src="img/navtoc.gif" width="84" height="23"
    border="0" alt="TOC"> </a></td>
    <td><a href="expressionsa4.htm"><img src="img/navprev.gif" width="81" height="23"
    border="0" alt="PREV"> </a></td>
    <td><a href="expressionsa6_5.htm"><img src="img/navnext.gif" width="81" height="23"
    border="0" alt="NEXT"> </a></td>

    
  </tr>
</table>
<blockquote>
<div class="p"><!----></div>
<h2><a name="tth_sEc4">
4</a>&nbsp;&nbsp;Composite Data Types</h2>
<a name="80661">
</a>

    <h3><a name="tth_sEc4.1">
4.1</a>&nbsp;&nbsp;Arrays</h3>
<a name="pgfId-169763">
</a>
Arrays are specified with curly brackets, e.g., "<tt>{1,&nbsp;2,&nbsp;3}</tt>"
is an array of <em>int</em>, while 
<br />"<tt>{"x",&nbsp;"y",&nbsp;"z"}</tt>" is an array of string. The types are denoted "<tt>{int}</tt>" and "<tt>{string}</tt>"
respectively. An array is an ordered list of tokens of any type, with the only constraint being that the elements all have the same type. If an array is given with mixed types, the expression evaluator will attempt to losslessly convert the elements to a common type. Thus, for example, 

<pre>
{1,&nbsp;2.3}

</pre>
has value

<pre>
{1.0,&nbsp;2.3}

</pre>
Its type is <tt>{<em>{double}</em>}</tt>. The common type might be <em>scalar</em>, which is a union type (a type that can contain multiple distinct types). For example,

<pre>
{1,&nbsp;2.3,&nbsp;true}

</pre>
has value

<pre>
{1,&nbsp;2.3,&nbsp;true}

</pre>
The value is unchanged, although the type of the array is now
<em>scalar</em>.

<div class="p"><!----></div>
The elements of the array can be given by expressions, as in the example "<tt>{2*pi,&nbsp;3*pi}</tt>." Arrays can be nested; for example, "<tt>{{1,&nbsp;2},&nbsp;{3,&nbsp;4,&nbsp;5}}</tt>" is an array of arrays of integers. The elements of an array can be accessed as follows:

<pre>
&#62;&#62;&nbsp;{1.0,&nbsp;2.3}(1)
2.3

</pre>
which yields 2.3. Note that indexing begins at 0. Of course, if
<em>name</em> is the name of a variable in scope whose value is an
array, then its elements may be accessed similarly, as shown in this
example:

<pre>
&#62;&#62;&nbsp;x&nbsp;=&nbsp;{1.0,&nbsp;2.3}
{1.0,&nbsp;2.3}
&#62;&#62;&nbsp;x(0)
1.0

</pre>
Arithmetic operations on arrays are carried out element-by-element, as shown by the following examples:

<pre>
&#62;&#62;&nbsp;{1,&nbsp;2}*{2,&nbsp;2}
{2,&nbsp;4}
&#62;&#62;&nbsp;{1,&nbsp;2}+{2,&nbsp;2}
{3,&nbsp;4}
&#62;&#62;&nbsp;{1,&nbsp;2}-{2,&nbsp;2}
{-1,&nbsp;0}
&#62;&#62;&nbsp;{1,&nbsp;2}\^2
{1,&nbsp;4}
&#62;&#62;&nbsp;{1,&nbsp;2}\%{2,&nbsp;2}
{1,&nbsp;0}

</pre>
Addition, subtraction, multiplication, division, and modulo of arrays by scalars is also supported, as in the following examples:

<pre>
&#62;&#62;&nbsp;{1.0,&nbsp;2.0}&nbsp;/&nbsp;2.0
{0.5,&nbsp;1.0}
&#62;&#62;&nbsp;1.0&nbsp;/&nbsp;{2.0,&nbsp;4.0}
{0.5,&nbsp;0.25}
&#62;&#62;&nbsp;3&nbsp;*{2,&nbsp;3}
{6,&nbsp;9}
&#62;&#62;&nbsp;12&nbsp;/&nbsp;{3,&nbsp;4}
{4,&nbsp;3}

</pre>
Arrays of length 1 are equivalent to scalars, as illustrated below:

<pre>
&#62;&#62;&nbsp;{1.0,&nbsp;2.0}&nbsp;/&nbsp;{2.0}
{0.5,&nbsp;1.0}
&#62;&#62;&nbsp;{1.0}&nbsp;/&nbsp;{2.0,&nbsp;4.0}
{0.5,&nbsp;0.25}
&#62;&#62;&nbsp;{3}&nbsp;*&nbsp;{2,&nbsp;3}
{6,&nbsp;9}
&#62;&#62;&nbsp;{12}&nbsp;/&nbsp;{3,&nbsp;4}
{4,&nbsp;3}

</pre>
A significant subtlety arises when using nested arrays. Note the following example

<pre>
&#62;&#62;&nbsp;{{1.0,&nbsp;2.0},&nbsp;{3.0,&nbsp;1.0}}&nbsp;/&nbsp;{0.5,&nbsp;2.0}
{{2.0,&nbsp;4.0},&nbsp;{1.5,&nbsp;0.5}}

</pre>
In this example, the left argument of the divide is an array with two elements, and the right argument is also an array with two elements. The divide is thus elementwise. However, each division is the division of an array by a scalar.
An array can be checked for equality with another array as follows:

<pre>
&#62;&#62;&nbsp;{1,&nbsp;2}=={2,&nbsp;2}
false
&#62;&#62;&nbsp;{1,&nbsp;2}!={2,&nbsp;2}
true

</pre>
For other comparisons of arrays, use the 
compare() function (see Table <a href="expressionsa13.htm#tbl:matrix">10</a>). As with scalars, testing for equality using the 
<tt>==</tt> or <tt>!=</tt> operators tests the values, independent of type. For example,

<pre>
&#62;&#62;&nbsp;{1,&nbsp;2}=={1.0,&nbsp;2.0}
true

</pre>
You can extract a subarray by invoking the 
subarray() method as follows:

<pre>
&#62;&#62;&nbsp;{1,&nbsp;2,&nbsp;3,&nbsp;4}.subarray(2,&nbsp;2)
{3,&nbsp;4}

</pre>
The first argument is the starting index of the subarray, and the second argument is the length.

<div class="p"><!----></div>
You can also extract non-contiguous elements from an array using the

extract() method. This method has two forms. The first form takes a <em>boolean</em> array of the same length as the original array which indicates which elements to extract, as in the following example:

<pre>
&#62;&#62;&nbsp;{``red'',``green'',``blue''}.extract({true,false,true})
{``red'',&nbsp;``blue''}

</pre>
The second form takes an array of integers giving the indices to extract, as in the following example:

<pre>
&#62;&#62;&nbsp;{``red'',``green'',``blue''}.extract({2,0,1,1})
{``blue'',&nbsp;``red'',&nbsp;``green'',&nbsp;``green''}

</pre>
You can create an empty array with a specific element type using the

emptyArray() function. For example, to create an empty array of integers, use:

<pre>
&#62;&#62;&nbsp;emptyArray(int)
{}

</pre>

<div class="p"><!----></div>
You can combine arrays into a single array using the

concatenate() function. For example, 

<pre>
&#62;&#62;&nbsp;concatenate({1,&nbsp;2},&nbsp;{3})
{1,&nbsp;2,&nbsp;3}

</pre>

<div class="p"><!----></div>
    <h3><a name="tth_sEc4.2">
4.2</a>&nbsp;&nbsp;Matrices</h3>
<a name="pgfId-198884">
</a>

<div class="p"><!----></div>
In Ptolemy II, arrays are ordered sets of tokens. Ptolemy II also
supports  matrices, which are more specialized than
arrays. They contain only certain primitive types, currently
<em>boolean</em>, <em>complex</em>, <em>double</em>, <em>fixedpoint</em>,
<em>int</em>, and <em>long</em>. Currently <em>float</em>, <em>short</em> and
<em>unsignedByte</em> matrices are not supported. Matrices cannot
contain arbitrary tokens, so they cannot, for example, contain
matrices. They are intended for data intensive computations.  Matrices
are specified with square brackets, using commas to separate row
elements and semicolons to separate rows. E.g., "[1, 2, 3; 4, 5,
5+1]" gives a two by three integer matrix (2 rows and 3
columns). Note that an array or matrix element can be given by an
expression. A row vector can be given as "[1, 2, 3]" and a column
vector as "[1; 2; 3]". Some MATLAB-style array constructors are
supported. For example, "[1:2:9]" gives an array of odd numbers from
1 to 9, and is equivalent to "[1, 3, 5, 7, 9]." Similarly, "[1:2:9;
2:2:10]" is equivalent to "[1, 3, 5, 7, 9; 2, 4, 6, 8, 10]." In the
syntax "[p:q:r]", <em>p</em> is the first element, <em>q</em> is the step between
elements, and <em>r</em> is an upper bound on the last element. That is, the
matrix will not contain an element larger than <em>r</em>. If a matrix with
mixed types is specified, then the elements will be converted to a
common type, if possible. Thus, for example, "[1.0, 1]" is
equivalent to "[1.0, 1.0]," but "[1.0, 1L]" is illegal (because
there is no common type to which both elements can be converted
losslessly).

<div class="p"><!----></div>
Reference to elements of matrices have the form
"<em>matrix</em>(<em>n</em>, <em> m</em>)" or "<em>name</em>(<em>n</em>,
<em>m</em>)" where <em>name</em> is the name of a matrix variable in
scope, <em>n</em> is the row index, and <em>m</em> is the column
index. Index numbers start with zero, as in Java, not 1, as in
MATLAB. For example,

<pre>
&#62;&#62;&nbsp;[1,&nbsp;2;&nbsp;3,&nbsp;4](0,0)
1
&#62;&#62;&nbsp;a&nbsp;=&nbsp;[1,&nbsp;2;&nbsp;3,&nbsp;4]
[1,&nbsp;2;&nbsp;3,&nbsp;4]
&#62;&#62;&nbsp;a(1,1)
4

</pre>
Matrix multiplication works as expected. For example, as seen in the expression evaluator (see figure <a href="expressionsa2.htm#fig:expressionEvaluator">1</a>),

<pre>
&#62;&#62;&nbsp;[1,&nbsp;2;&nbsp;3,&nbsp;4]*[2,&nbsp;2;&nbsp;2,&nbsp;2]
[6,&nbsp;6;&nbsp;14,&nbsp;14]

</pre>

<div class="p"><!----></div>
Of course, if the dimensions of the matrix don't match, then you will
get an error message. To do element wise multiplication, use the
multipyElements() function (see
 Table <a href="expressionsa13.htm#tbl:matrix">10</a>). Matrix addition and subtraction are element
 wise, as expected, but the division operator is not
 supported. Element wise division can be accomplished with the
  divideElements() function, and
 multiplication by a matrix inverse can be accomplished using the
  inverse() function (see Table
 <a href="expressionsa13.htm#tbl:matrix">10</a>). A matrix can be raised to an <em>int</em>,
 <em>short</em> or <em>unsignedByte</em> power, which is equivalent to
 multiplying it by itself some number of times. For instance,

<pre>
&#62;&#62;&nbsp;[3,&nbsp;0;&nbsp;0,&nbsp;3]\^3
[27,&nbsp;0;&nbsp;0,&nbsp;27]

</pre>
A matrix can also be multiplied or divided by a scalar, as follows:

<pre>
&#62;&#62;&nbsp;[3,&nbsp;0;&nbsp;0,&nbsp;3]*3
[9,&nbsp;0;&nbsp;0,&nbsp;9]

</pre>
A matrix can be added to a scalar. It can also be subtracted from a scalar, or have a scalar subtracted from it. For instance,

<pre>
&#62;&#62;&nbsp;1-[3,&nbsp;0;&nbsp;0,&nbsp;3]
[-2,&nbsp;1;&nbsp;1,&nbsp;-2]

</pre>
A matrix can be checked for equality with another matrix as follows:

<pre>
&#62;&#62;&nbsp;[3,&nbsp;0;&nbsp;0,&nbsp;3]!=[3,&nbsp;0;&nbsp;0,&nbsp;6]
true
&#62;&#62;&nbsp;[3,&nbsp;0;&nbsp;0,&nbsp;3]==[3,&nbsp;0;&nbsp;0,&nbsp;3]
true

</pre>

<div class="p"><!----></div>
For other comparisons of matrices, use the 
compare() function (see Table <a href="expressionsa13.htm#tbl:matrix">10</a>). As with scalars,
testing for equality using the <tt>==</tt> or <tt>!=</tt>
operators tests the values, independent of type. For example,

<pre>
&#62;&#62;&nbsp;[1,&nbsp;2]==[1.0,&nbsp;2.0]
true

</pre>
To get type-specific equality tests, use the equals() method, as in the following examples:

<pre>
&#62;&#62;&nbsp;[1,&nbsp;2].equals([1.0,&nbsp;2.0])
false
&#62;&#62;&nbsp;[1.0,&nbsp;2.0].equals([1.0,&nbsp;2.0])
true

</pre>

<div class="p"><!----></div>
    <h3><a name="tth_sEc4.3">
4.3</a>&nbsp;&nbsp;Records</h3>
<a name="75586">
</a>

<div class="p"><!----></div>
A  record token is a composite
type containing named fields, where each field has a value. The value
of each field can have a distinct type. Records are delimited by curly
braces, with each field given a name. For example,
"<tt>{a=1,&nbsp;b=''foo''}</tt>" is a record with two fields, named "a"
and "b", with values 1 (an integer) and "foo" (a string),
respectively. The value of a field can be an arbitrary expression, and
records can be nested (a field of a record token may be a record
token).

<div class="p"><!----></div>
Ordered records behave similarly to normal
records except that they preserve the original ordering of the labels
rather than alphabetizing them. Ordered records are delimited using
square brackets rather than curly braces. For example,
<tt>[b="foo",&nbsp;a=1]</tt> is an ordered record token in which 'b' will
remain the first label.

<div class="p"><!----></div>
Fields may be accessed using the period operator. For example,

<pre>
{a=1,b=2}.a

</pre>
yields 1. You can optionally write this as if it
were a method call:

<pre>
{a=1,b=2}.a()

</pre>

<div class="p"><!----></div>
The arithmetic operators +, -, *, /, and % can be applied to
records. If the records do not have identical fields, then the
operator is applied only to the fields that match, and the result
contains only the fields that match. Thus, for example,

<pre>
{foodCost=40,&nbsp;hotelCost=100}&nbsp;+&nbsp;{foodCost=20,&nbsp;taxiCost=20}

</pre>
yields the result

<pre>
{foodCost=60}

</pre>
You can think of an operation as a set intersection, where the operation specifies how to merge the values of the intersecting fields. You can also form an intersection without applying an operation. In this case, using the 
intersect() function, you form a record that has only the common fields of two specified records, with the values taken from the first record. For example,

<pre>
&#62;&#62;&nbsp;intersect({a=1,&nbsp;c=2},&nbsp;{a=3,&nbsp;b=4})
{a=1}

</pre>

<div class="p"><!----></div>
Records can be joined (think of a set union) without any operation
being applied by using the  merge()
function. This function takes two arguments, both of which are record
tokens. If the two record tokens have common fields, then the field
value from the first record is used. For example,

<pre>
merge({a=1,&nbsp;b=2},&nbsp;{a=3,&nbsp;c=3})

</pre>
yields the result 
<tt>{a=1,&nbsp;b=2,&nbsp;c=3}</tt>.

<div class="p"><!----></div>
Records can be compared, as in the following examples:

<pre>
&#62;&#62;&nbsp;{a=1,&nbsp;b=2}!={a=1,&nbsp;b=2}
false
&#62;&#62;&nbsp;{a=1,&nbsp;b=2}!={a=1,&nbsp;c=2}
true

</pre>

<div class="p"><!----></div>
Note that two records are equal only if they have the same field labels and the values match. As with scalars, the values match irrespective of type. For example:

<pre>
&#62;&#62;&nbsp;{a=1,&nbsp;b=2}=={a=1.0,&nbsp;b=2.0+0.0i}
true

</pre>
The order of the fields is irrelevant for normal (unordered) records. Hence

<pre>
&#62;&#62;&nbsp;{a=1,&nbsp;b=2}=={b=2,&nbsp;a=1}
true

</pre>
Moreover, normal record fields are reported in alphabetical order, irrespective of the order in which they are defined. For example,

<pre>
&#62;&#62;&nbsp;{b=2,&nbsp;a=1}
{a=1,&nbsp;b=2}

</pre>
Equality comparisons for ordered records respect the original order of the fields. For example,

<pre>
&#62;&#62;&nbsp;[a=1,&nbsp;b=2]==[b=2,&nbsp;a=1]
false

</pre>
Additionally, ordered record fields are always reported in the order in which they are defined. For example,

<pre>
&#62;&#62;&nbsp;[b=2,&nbsp;a=1]
[b=2,&nbsp;a=1]

</pre>
To get type-specific equality tests, use the equals() method, as in the following examples:

<pre>
&#62;&#62;&nbsp;{a=1,&nbsp;b=2}.equals({a=1.0,&nbsp;b=2.0+0.0i})
false
&#62;&#62;&nbsp;{a=1,&nbsp;b=2}.equals({b=2,&nbsp;a=1})
true

</pre>
Finally, You can create an empty record using the 
emptyRecord() function:

<pre>
&#62;&#62;&nbsp;emptyRecord()
{}

</pre>

</blockquote>

<table width="331" border="0" cellpadding="0" cellspacing="0">
 <tr>
   <td><a href="expressions.htm"><img src="img/navtoc.gif" width="84" height="23" border="0"
   alt="TOC"> </a></td>
   <td><a href="expressionsa4.htm"><img src="img/navprev.gif" width="81" height="23" border="0"
   alt="PREV"> </a></td>
   <td><a href="expressionsa6_5.htm"><img src="img/navnext.gif" width="81" height="23" border="0"
   alt="NEXT"> </a></td>


 </tr>
</table>

</body>
</html>
