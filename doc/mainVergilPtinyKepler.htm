<!-- DO NOT EDIT this file, it is created by running make.
     The file to edit is $PTII/doc/ptIIx.x.release.htm
     where x.x is the release number, then run 'make update'
     to update the derived files and check them in to cvs. -->
<!-- DO NOT EDIT this file, it is created by running make.
     The file to edit is $PTII/doc/ptIIx.x.release.htm
     where x.x is the release number, then run 'make update'
     to update the derived files and check them in to cvs. -->
<!-- $Id$ -->
<html>
<head>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<title>Ptolemy II</title>
<link href="default.css" rel="stylesheet" type="text/css">
</head>
<body>
<!--ptinyKeplerDocs-->
<!--NOTE:  If this file is called 'mainVergil.htm' then do not edit it
     because mainVergil.htm is derived from main.htm.
     If you would like to have vergil specific text appear in mainVergil.htm,
     then adjust the makefile rule accordingly. -->

<img vspace="6" align="left" src="img/PtolemyIISmall.gif" align="left"
  alt="Claudius Ptolemy">

Ptolemy II <a href="#1">[1]</a> is an open-source software framework supporting
experimentation with actor-oriented design. Actors are software
components that execute concurrently and communicate through messages
sent via interconnected ports. A model is a hierarchical
interconnection of actors. In Ptolemy II, the semantics of a model is
not determined by the framework, but rather by a software component in
the model called a director, which implements a model of
computation. The Ptolemy Project has developed directors supporting
<a href="../ptolemy/domains/pn/doc/main.htm">process networks (PN)</a>,
<a href="../ptolemy/domains/de/doc/main.htm">discrete-events (DE)</a>,
<a href="../ptolemy/domains/sdf/doc/main.htm">dataflow (SDF)</a>,
<a href="../ptolemy/domains/sr/doc/main.htm">synchronous/reactive(SR)</a>,
<a href="../ptolemy/domains/gr/doc/main.htm">3-D visualization</a>,
and
<a href="../ptolemy/domains/continuous/doc/main.htm">continuous-time</a>
models.
Each level of the hierarchy in a model can
have its own director, and distinct directors can be composed
hierarchically. A major emphasis of the project has been on
understanding the heterogeneous combinations of models of computation
realized by these directors. Directors can be combined hierarchically
with state machines to make
<a href="../ptolemy/domains/modal/doc/main.htm">modal models</a>
<a href="#2">[2]</a>. A hierarchical
combination of continuous-time models with state machines yields
hybrid systems <a href="#3">[3]</a>; a combination of synchronous/reactive with state
machines yields StateCharts <a href="#4">[4]</a> (the Ptolemy II variant is close to
SyncCharts).

<p>Ptolemy II has been under development since 1996; it is a successor
to
<a href="http://ptolemy.eecs.berkeley.edu/ptolemyClassic/#in_browser">Ptolemy Classic</a>,
which was developed since 1990. The core of
Ptolemy II is a collection of Java classes and packages, layered to
provide increasingly specific capabilities. The kernel supports an
abstract syntax, a hierarchical structure of entities with ports and
interconnections. A graphical editor called Vergil supports visual
editing of this abstract syntax. An XML concrete syntax called MoML
provides a persistent file format for the models. Various specialized
tools have been created from this framework, including
<a href="http://ptolemy.eecs.berkeley.edu/hyvisual/#in_browser">HyVisual</a>
(for hybrid systems modeling),
<a href="http://www.kepler-project.org/#in_browser">Kepler</a>
(for scientific workflows), 
<a href="http://ptolemy.eecs.berkeley.edu/visualsense/#in_browser">VisualSense</a>
(for modeling and simulation of wireless networks),
<a href="http://ptolemy.eecs.berkeley.edu/viptos/#in_browser">Viptos</a>
(for sensor network design), and some commercial products.  Key parts
of the infrastructure include an actor abstract semantics, which
enables the interoperability of distinct models of computation with a
well-defined semantics; a model of time (specifically, super-dense
time, which enables interaction of continuous dynamics and imperative
logic); and a sophisticated type system supporting type checking, type
inference, and polymorphism. The type system has recently been
extended to support user-defined ontologies <a href="#5">[5]</a>.  Various experiments
with synthesis of implementation code and abstractions for
verification are included in the project.

References

<p><a name="1">[1]</a>
Johan Eker, Jorn Janneck, Edward A. Lee, Jie Liu, Xiaojun
Liu, Jozsef Ludvig, Sonia Sachs, Yuhong Xiong. "<a href="http://chess.eecs.berkeley.edu/pubs/488.html#in_browser">Taming heterogeneity - the Ptolemy approach</a>,"
<i>Proceedings of the IEEE</i>, 91(1):127-144,
January 2003. 
<br>(<i>Key citation for the Ptolemy project</i>)
</p>

<p><a name="2">[2]</a>
Edward A. Lee. "<a href="http://www.eecs.berkeley.edu/Pubs/TechRpts/2009/EECS-2009-151.html#in_browser">Finite State Machines and Modal Models in Ptolemy II</a>," Technical report,  EECS Department,
University of California, Berkeley, UCB/EECS-2009-151,
December, 2009.
</p>

<p><a name="3">[3]</a>
 	E. A. Lee and H. Zheng, "<a href="http://ptolemy.eecs.berkeley.edu/publications/papers/05/OperationalSemantics/#in_browser">Operational Semantics of Hybrid Systems</a>," Invited paper in Proceedings of Hybrid Systems: Computation and Control (HSCC) LNCS 3414, Zurich, Switzerland, March 9-11, 2005, pp.25-53.
</p>

<p><a name="4">[4]</a>
E. A. Lee, H. Zheng, "<a href="http://ptolemy.eecs.berkeley.edu/publications/papers/07/unifying/index.htm#in_browser">Leveraging Synchronous Language Principles for Heterogeneous Modeling and Design of Embedded Systems</a>," EMSOFT '07, September 30 - October 3, 2007, Salzburg, Austria.
</p>

<p><a name="5">[5]</a>
	M.-K. Leung, T. Mandl, E. A. Lee, E. Latronico,
C. Shelton, S. Tripakis, and B. Lickly, "<a href="http://chess.eecs.berkeley.edu/pubs/611.html#in_browser">Scalable Semantic Annotation using Lattice-based Ontologies,</a>" ACM/IEEE 12th International Conference
on Model Driven Engineering Languages and Systems (MODELS), Denver,
CO, USA, 4-9 October, 2009.
</p>

<h3>Resources</h3>
<p>
The <a href="http://ptolemy.eecs.berkeley.edu/index.html#in_browser">Ptolemy Project web page</a>
contains much more information about the
project. The work is conducted in the
<a href="http://www.eecs.berkeley.edu/#in_browser">Department of Electrical Engineering and Computer Sciences</a>
of the
<a href="http://www.berkeley.edu/#in_browser">University of California at Berkeley</a>.
The project is directed by
<a href="http://ptolemy.eecs.berkeley.edu/~eal/index.html#in_browser">Prof. Edward Lee</a>.
The project is named after
<a href="http://ptolemy.eecs.berkeley.edu/people/ptolemy.htm#in_browser">Claudius Ptolemaeus</a>,
the second century Greek astronomer, mathematician, and geographer.
</p>

<p>
Ptolemy II includes a growing suite of <i>domains</i>, each of which
realizes a model of computation.  It also includes a component library,
in which most components are <i>domain polymorphic</i>, in that they
can operate in several of the domains.  Most are also <i>data polymorphic</i>,
in that they operate on several data types.
The domains that have been implemented are listed below.
Domains that are reasonably mature:
<ul>
<li> <a href="../ptolemy/domains/continuous/doc/main.htm">Continuous</a>:
	continuous-time modeling (redesign of the CT domain)
    (<a href="../ptolemy/configs/doc/completeDemosPtinyKepler.htm#continuous">demos</a>)
<li> <a href="../ptolemy/domains/ddf/doc/main.htm">DDF</a>:
	dynamic dataflow
     (<a href="../ptolemy/configs/doc/completeDemosPtinyKepler.htm#ddf">demos</a>)
<li> <a href="../ptolemy/domains/de/doc/main.htm">DE</a>:
	discrete-event modeling
     (<a href="../ptolemy/configs/doc/completeDemosPtinyKepler.htm#de">demos</a>)
<li> <a href="../ptolemy/domains/modal/doc/main.htm">Modal</a>:
	 finite state machines and modal model (redesign of the FSM domain)
    (<a href="../ptolemy/configs/doc/completeDemosPtinyKepler.htm#fsm">demos</a>)
<li> <a href="../ptolemy/domains/pn/doc/main.htm">PN</a>:
	process networks with asynchronous message passing
     (<a href="../ptolemy/configs/doc/completeDemosPtinyKepler.htm#pn">demos</a>)
<li> <a href="../ptolemy/domains/sdf/doc/main.htm">SDF</a>:
	synchronous dataflow
     (<a href="../ptolemy/configs/doc/completeDemosPtinyKepler.htm#sdf">demos</a>)
<li> <a href="../ptolemy/domains/sr/doc/main.htm">SR</a>:
	synchronous reactive
     (<a href="../ptolemy/configs/doc/completeDemosPtinyKepler.htm#sr">demos</a>)
<!--vergilDocs-->
</ul>
Domains that are still experimental:
<ul>
<!--vergilDocs-->
<li> <a href="../ptolemy/domains/hdf/doc/main.htm">HDF</a>:
	heterochronous dataflow
     (<a href="../ptolemy/configs/doc/completeDemosPtinyKepler.htm#hdf">demos</a>)
<!--vergilDocs-->
<!--ptinyKeplerDocs-->
</ul>
Domains that have been redesigned
<ul>
<li> <a href="../ptolemy/domains/ct/doc/main.htm">CT</a>:
	continuous-time modeling (replaced by the Continuous domain)
 (<a href="../ptolemy/configs/doc/completeDemosPtinyKepler.htm#ct">demos</a>)
<li> <a href="../ptolemy/domains/fsm/doc/main.htm">FSM</a>:
	 finite state machines and modal model (replaced by the Modal domain)
    (<a href="../ptolemy/configs/doc/completeDemosPtinyKepler.htm#fsm">demos</a>)
</ul>
<p></p>
</body>
</html>
</body>
</html>
</body>
</html>
