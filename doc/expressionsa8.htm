<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<!-- Generated from latex, don't update this file, update -->
<!-- ptIIdoc/doc/design/src/tex/expression.tex -->

<meta name="LASTUPDATED" content="$Id$">
<link href="default.css" rel="stylesheet" type="text/css">
<title>3.7 Built-In Functions</title>
</head>

<body link="#3366CC" vlink="#9999CC" text="#000000" alink="#0000CC" bgcolor="#FFFFFF"


<table width="331" border="0" align="right" cellpadding="0" cellspacing="0">
  <tr>
    <td><a href="expressions.htm"><img src="img/navtoc.gif" width="84" height="23"
    border="0" alt="TOC"> </a></td>
    <td><a href="expressionsa7.htm"><img src="img/navprev.gif" width="81" height="23"
    border="0" alt="PREV"> </a></td>
    <td><a href="expressionsa9.htm"><img src="img/navnext.gif" width="81" height="23"
    border="0" alt="NEXT"> </a></td>

    
  </tr>
</table>




<blockquote>
<div class="p"><!----></div>
<h2><a name="tth_sEc8"> 
8</a>&nbsp;&nbsp;Built-In Functions</h2>
<a name="sec:built-in">
</a> 
The expression language includes a set of  functions, such as sin(), cos(), etc. The functions that 
are built in include all static methods of the classes shown in 
Table <a href="expressionsa13.htm#tbl:staticMethods">2</a>, which together provide a rich set
. The functions currently available 
are shown in the tables in the appendix, which also show the argument 
types and return types.

<div class="p"><!----></div>

<div class="p"><!----></div>
<a name="tth_tAb2">
</a> <center>Table 2: The classes whose static methods are available as functions
in the expression langauge</center>
<a name="expressionsa13.htm#tbl:staticMethods">
</a>

<table border="1">
<tr><td width="237">java.lang.Math </td><td width="237">ptolemy.math.IntegerMatrixMath </td></tr>
<tr><td width="237">java.lang.Double </td><td width="237">ptolemy.math.DoubleMatrixMath </td></tr>
<tr><td width="237">java.lang.Integer </td><td width="237">ptolemy.math.ComplexMatrixMath </td></tr>
<tr><td width="237">java.lang.Long </td><td width="237">ptolemy.math.LongMatrixMath </td></tr>
<tr><td width="237">java.lang.String </td><td width="237">ptolemy.math.IntegerArrayMath </td></tr>
<tr><td width="237">ptolemy.data.MatrixToken. </td><td width="237">ptolemy.math.DoubleArrayStat </td></tr>
<tr><td width="237">ptolemy.data.RecordToken. </td><td width="237">ptolemy.math.ComplexArrayMath </td></tr>
<tr><td width="237">ptolemy.data.expr.UtilityFunctions </td><td width="237">ptolemy.math.LongArrayMath </td></tr>
<tr><td width="237">ptolemy.data.expr.FixPointFunctions </td><td width="237">ptolemy.math.SignalProcessing </td></tr>
<tr><td width="237">ptolemy.math.Complex </td><td width="237">ptolemy.math.FixPoint </td></tr>
<tr><td width="237">ptolemy.math.ExtendedMath </td><td width="237">ptolemy.data.ObjectToken </td></tr></table>


<div class="p"><!----></div> 
In most cases, a function that operates on scalar arguments can also operate on arrays and matrices. Thus, for example, you can fill a row vector with a sine wave using an expression like

<pre> 
sin([0.0:PI/100:1.0])

</pre> 
Or you can construct an array as follows,

<pre> 
sin({0.0,&nbsp;0.1,&nbsp;0.2,&nbsp;0.3})

</pre> 
Functions that operate on type <em>double</em> will also generally 
operate on <em>int</em>, <em> short</em>, or <em>unsignedByte</em>, because 
these can be losslessly converted to <em>double</em>, but not generally 
on long or complex.  Tables of available functions are shown in the 
appendix. For example, Table <a href="expressionsa13.htm#tbl:trigonometric">4</a> shows 
trigonometric functions. Note that these operate on <em>double</em> or
<em>complex</em>, and hence on <em>int</em>, <em>short</em> and
<em>unsignedByte</em>, which can be losslessly converted to double. The 
result will always be double. For example,

<pre>
&#62;&#62;&nbsp;cos(0) 
1.0

</pre>

<div class="p"><!----></div> 
These functions will also operate on matrices and arrays, in addition 
to the scalar types shown in the table, as illustrated above. The 
result will be a matrix or array of the same size as the argument, but 
always containing elements of type double

<div class="p"><!----></div> 
Table <a href="expressionsa13.htm#tbl:matrix">10</a> shows other arithmetic functions beyond the 
trigonometric functions. As with the trigonometric functions, those 
that indicate that they operate on <em>double</em> will also work on
<em>int</em>, <em>short</em> and <em>unsignedByte</em>, and unless they 
indicate otherwise, they will return whatever they return when the 
argument is double. Those functions in the table that take scalar 
arguments will also operate on matrices and arrays. For example, since 
the table indicates that the max() function can take <em>int</em>,
<em>int</em> as arguments, then by implication, it can also take <em>int</em>,
<em>int</em>. For example,

<pre>
&#62;&#62;&nbsp;max({1,&nbsp;2},&nbsp;{2,&nbsp;1})
{2,&nbsp;2}

</pre> 
Notice that the table also indicates that max() can take <em>int</em> as an argument. E.g.

<pre>
&#62;&#62;&nbsp;max({1,&nbsp;2,&nbsp;3}) 
3

</pre> 
In the former case, the function is applied pointwise to the two 
arguments. In the latter case, the returned value is the maximum over 
all the contents of the single argument. 

<div class="p"><!----></div> 
Table <a href="expressionsa13.htm#tbl:matrix">10</a> shows functions that only work with matrices, arrays, or records (that is, there is no corresponding 
scalar operation). Recall that most functions that operate on scalars will also operate on 
arrays and matrices. Table <a href="expressionsa13.htm#tbl:eval">11</a> shows utility functions for evaluating expressions given as strings or representing 
numbers as strings. Of these, the eval() function is the most flexible.

<div class="p"><!----></div> 
A few of the functions have sufficiently subtle properties that they require further explanation. That explanation is here.

<div class="p"><!----></div>
    <h4><a name="tth_sEc8.0.1"> 
8.0.1</a>&nbsp;&nbsp;eval() and traceEvaluation()</h4>
<a name="eval">
</a> 
The built-in function  
eval() will evaluate a string as an expression in the expression language. For example,

<pre> 
eval("[1.0,&nbsp;2.0;&nbsp;3.0,&nbsp;4.0]")

</pre> 
will return a matrix of doubles. The following combination can be used 
to  
read parameters from a file:


<pre> 
eval(readFile("filename"))

</pre>

<div class="p"><!----></div> 
where the filename can be relative to the current working directory
(where Ptolemy II was started, as reported by the property 
user.dir), 
the user's home directory (as reported by the property
user.home), or the classpath, which includes the 
directory tree in which Ptolemy II is installed.  Note that if eval() 
is used in an Expression actor, then it will be impossible for the 
type system to infer any more specific output type than general. If 
you need the output type to be more specific, then you will need to 
cast the result of eval(). For example, to force it to type double:

<pre>
&#62;&#62;&nbsp;cast(double,&nbsp;eval("pi/2")) 
1.5707963267949

</pre>
<a name="traceEvaluation">
</a> 
The traceEvaluation() function 
evaluates an expression given as a string, much like eval(), but 
instead of reporting the result, reports exactly how the expression 
was evaluated. This can be used to debug expressions, particularly 
when the expression language is extended by users.

<div class="p"><!----></div>
    <h4><a name="tth_sEc8.0.2"> 
8.0.2</a>&nbsp;&nbsp;random(), gaussian()</h4>
<a name="random">
</a>
random() and  
gaussian() shown in Table <a href="expressionsa13.htm#tbl:matrix">10</a> return one or more random 
numbers. With the minimum number of arguments (zero or two, 
respectively), they return a single number. With one additional 
argument, they return an array of the specified length. With a second 
additional argument, they return a matrix with the specified number of 
rows and columns.

<div class="p"><!----></div> 
There is a key subtlety when using these functions in Ptolemy II. In 
particular, they are evaluated only when the expression within which 
they appear is evaluated. The result of the expression may be used 
repeatedly without re-evaluating the expression. Thus, for example, if 
the value parameter of the Const actor is set to
<tt>random()</tt>, then its output will be a random constant, i.e., it 
will not change on each firing. The output will change, however, on 
successive runs of the model. In contrast, if this is used in an 
Expression actor, then each firing triggers an evaluation of the 
expression, and consequently will result in a new random number.

<div class="p"><!----></div>
     <h4><a name="tth_sEc8.0.3">
8.0.3</a>&nbsp;&nbsp;property()</h4>

<div class="p"><!----></div>
The property() function accesses
system properties by name. Some possibly useful system properties are:

<ul>
<li> ptolemy.ptII.dir: The directory in which Ptolemy II is installed.
<div class="p"><!----></div>
</li>

<li> ptolemy.ptII.dirAsURL: The directory in which Ptolemy II is
 installed, but represented as a URL.
<div class="p"><!----></div>
</li>

<li> user.dir: The current working directory, which is usually the
 directory in which the current executable was started.
<div class="p"><!----></div>

</blockquote>
<table width="331" border="0" cellpadding="0" cellspacing="0">
 <tr>
   <td><a href="expressions.htm"><img src="img/navtoc.gif" width="84" height="23" border="0"
   alt="TOC"> </a></td>
   <td><a href="expressionsa7.htm"><img src="img/navprev.gif" width="81" height="23" border="0"
   alt="PREV"> </a></td>
   <td><a href="expressionsa9.htm"><img src="img/navnext.gif" width="81" height="23" border="0"
   alt="NEXT"> </a></td>


 </tr>
</table>

</body>
</html>
