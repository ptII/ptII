<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<meta name="GENERATOR" content="Quadralay WebWorks Publisher Standard Edition 6.0.6">
<meta name="TEMPLATEBASE" content="Portable HTML Standard Edition">
<meta name="LASTUPDATED" content="03/31/08 14:03:47">
<link href="../../default.css" rel="stylesheet" type="text/css">
<title>2.3 Tokens and Data Types</title>
</head>

<body link="#3366CC" vlink="#9999CC" text="#000000" alink="#0000CC" bgcolor="#FFFFFF"


<table width="331" border="0" align="right" cellpadding="0" cellspacing="0">
  <tr>
    <td><a href="index.htm"><img src="images/navtoc.gif" width="84" height="23"
    border="0" alt="TOC"> </a></td>
    <td><a href="usingVergila3.htm"><img src="images/navprev.gif" width="81" height="23"
    border="0" alt="PREV"> </a></td>
    <td><a href="usingVergila5.htm"><img src="images/navnext.gif" width="81" height="23"
    border="0" alt="NEXT"> </a></td>

    
  </tr>
</table>




<blockquote>
<h2>
  <a name="167800"> </a>2.3   Tokens and Data Types
</h2>


<p>
  <a name="167804"> </a>In the example of figure <a href="usingVergila3.htm#165895">2.10</a>, the <i>Const</i> actor creates a sequence of values on its output port. The values are encapsulated as <i>tokens</i>, and sent to the <i>Display</i> actor, which consumes them and displays them in the run window.
</p>


<p>
  <a name="167859"> </a>The tokens produced by the <i>Const</i> actor can have any value that can be expressed in the Ptolemy II <i>expression language</i>. We will say more about the expression language in chapter 3, "Expressions", but for now, try giving the value 1 (the integer with value one), or 1.0 (the floating-point number with value one), or {1.0} (an array containing a one), or {value=1, name="one"} (a record with two elements: an integer named "value" and a string named "name"), or even [1,0;0,1] (the two-by-two identity matrix). These are all expressions.
</p>


<p>
  <a name="168187"> </a>The <i>Const</i> actor is able to produce data with different <i>types</i>, and the <i>Display</i> actor is able to display data with different types. Most actors in the actor library are <i>polymorphic</i>, meaning that they can operate on or produce data with multiple types. The behavior may even be different for different types. Multiplying matrices, for example, is not the same as multiplying integers, but both are accomplished by the <i>MultiplyDivide </i>actor in the <i>math library</i>. Ptolemy II includes a sophisticated type system that allows this to be done efficiently and safely.
</p>


<p>
  <a name="168209"> </a>To explore data types a bit further, try creating the model in figure<img src="images/usingVergil15.gif" height="241" width="600" align="center" border="0" hspace="0" vspace="0">
 <a href="usingVergila4.htm#168209">2.16</a>. The <i>Ramp</i> actor is listed under <i>Sources</i>, <i>SequenceSources</i>, and the <i>AddSubtract</i> actor is listed under <i>Math</i>. Set the <i>value</i> parameter of the constant to be 0 and the <i>iterations</i> parameter of the director to 5. Running the model should result in 5 numbers between 0 and 4, as shown in the figure. These are the values produced by the <i>Ramp</i>, which are having the value of the <i>Const</i> actor subtracted from them. Experiment with changing the value of the <i>Const</i> actor and see how it changes the 5 numbers at the output.
</p>


<p>
  <a name="168231"> </a>Now for the real test: change the value of the <i>Const</i> actor back to "Hello World". When you execute the model, you should see an exception window, as shown in figure <img src="images/usingVergil74.gif" height="415" width="937" align="center" border="0" hspace="0" vspace="0">
<a href="usingVergila4.htm#168231">2.17</a>. Do not worry; exceptions are a normal part of constructing (and debugging) models. In this case, the exception window is telling you that you have tried to subtract a string value from an integer value, which doesn't make much sense at all (following Java, adding strings <i>is</i> allowed). This is an example of a type error.
</p>


<p>
  <a name="168136"> </a>Exceptions can be a very useful debugging tool, particularly if you are developing your own components in Java. To illustrate how to use them, click on the Display Stack Trace button in the exception window of figure <a href="usingVergila4.htm#168231">2.17</a>. You should see the stack trace shown in figure <img src="images/usingVergil23.gif" usemap="#usingVergil23_gif" height="533" width="937" align="center" border="0" hspace="0" vspace="0">
<map name="usingVergil23_gif">

<area href="usingVergila4.htm#168231" shape=rect coords="5,482,933,523">
</map>
<a href="usingVergila4.htm#168136">2.18</a>. This window displays the execution sequence that resulted in the exception. For example, the line
</p>

<pre>
<a name="168266"> </a>
at ptolemy.data.IntToken.subtract(IntToken.java:547)<a name="168270"> </a>
<a name="168275"> </a>
</pre>

<a name="168276"> </a>indicates that the exception occurred within the subtract() method of the class ptolemy.data.IntToken, at line 547 of the source file IntToken.java. Since Ptolemy II is distributed with source code (most installation mechanisms at least offer the option of installing the source), this can be very useful information. For type errors, you probably do not need to see the stack trace, but if you have extended the system with your own Java code, or you encounter a subtle error that you do not understand, then looking at the stack trace can be very illuminating.<br>


<p>
  <a name="168405"> </a>To find the file IntToken.java referred to above, find the Ptolemy II installation directory. If that directory is $PTII, then the location of this file is given by the full class name, but with the periods replaced by slashes; in this case, it is at $PTII/ptolemy/data/IntToken.java (the slashes might be backslashes under Windows).
</p>


<p>
  <a name="168116"> </a>Let's try a small change to the model to get something that does not trigger an exception. Disconnect the <i>Const</i> from the lower port of the <i>AddSubtract</i> actor and connect it instead to the upper port, as shown in figure <img src="images/usingVergil31.gif" height="245" width="600" align="center" border="0" hspace="0" vspace="0">
<a href="usingVergila4.htm#168116">2.19</a>. You can do this by selecting the connection and deleting it (using the delete key), then adding a new connection, or by selecting it and dragging one of its endpoints to the new location. Notice that the upper port is an unfilled triangle; this indicates that it is a <i>multiport</i>, meaning that you can make more than one connection to it. Now when you run the model you should see strings like "0HelloWorld", as shown in the figure.
</p>


<p>
  <a name="166645"> </a>There are two interesting things going on here. The first is that, as in Java, strings are added by concatenating them. The second is that the integers from the <i>Ramp</i> are converted to strings and concatenated with the string "Hello World". All the connections to a multiport must have the same type. In this case, the multiport has a sequence of integers coming in (from the <i>Ramp</i>) and a sequence of strings (from the <i>Const</i>).
</p>


<p>
  <a name="168385"> </a>Ptolemy II automatically converts the integers to strings when integers are provided to an actor that requires strings. But in this case, why does the <i>AddSubtract</i> actor require strings? Because it would not work to require integers; the string "Hello World" would have to be converted to an integer. As a rough guideline, Ptolemy II will perform automatic type conversions when there is no loss of information. An integer can be converted to a string, but not vice versa. An integer can be converted to a double, but not vice versa. An integer can be converted to a long, but not vice versa. The details are explained in the Data chapter of Volume 2, but many users will not need to understand the full sophistication of the system. You should find that most of the time it will just do what you expect.
</p>


<p>
  <a name="168409"> </a>To further explore data types, try modifying the <i>Ramp</i> so that its parameters have different types. For example, try making <i>init</i> and <i>step</i> strings.
</p>
</blockquote>



<table align="right" border="0" cellspacing="0" cellpadding="0">
  <tr>
    <td align="right"><font size="1">
    





    </td>
  </tr>
</table>

<table width="331" border="0" cellpadding="0" cellspacing="0">
  <tr>
    <td><a href="index.htm"><img src="images/navtoc.gif" width="84" height="23" border="0"
    alt="TOC"> </a></td>
    <td><a href="usingVergila3.htm"><img src="images/navprev.gif" width="81" height="23" border="0"
    alt="PREV"> </a></td>
    <td><a href="usingVergila5.htm"><img src="images/navnext.gif" width="81" height="23" border="0"
    alt="NEXT"> </a></td>


  </tr>
</table>

</body>
</html>
