<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<!-- Generated from latex, don't update this file, update -->
<!-- ptIIdoc/doc/design/src/tex/expression.tex -->

<meta name="LASTUPDATED" content="$Id$">
<link href="default.css" rel="stylesheet" type="text/css">
<title>3.9 Folding</title>
</head>

<body link="#3366CC" vlink="#9999CC" text="#000000" alink="#0000CC" bgcolor="#FFFFFF"


<table width="331" border="0" align="right" cellpadding="0" cellspacing="0">
  <tr>
    <td><a href="expressions.htm"><img src="img/navtoc.gif" width="84" height="23"
    border="0" alt="TOC"> </a></td>
    <td><a href="expressionsa8.htm"><img src="img/navprev.gif" width="81" height="23"
    border="0" alt="PREV"> </a></td>
    <td><a href="expressionsa10.htm"><img src="img/navnext.gif" width="81" height="23"
    border="0" alt="NEXT"> </a></td>

    
  </tr>
</table>




<blockquote>
 <h2><a name="tth_sEc9">
9</a>&nbsp;&nbsp;Folding</h2>
Ptolemy II supports a fold function, which can be used to program a loop in an expression.

<div class="p"><!----></div>
The fold function is invoked in the form of <tt>fold(f, x,
l)</tt>, where <tt>f</tt> is a function itself, <tt>x</tt> is the starting value, and
<tt>l</tt> is a collection of values.

<ul>
<li> <tt>f</tt> must take two arguments. <tt>x</tt> must be valid as the first
  argument, and any element in collection <tt>l</tt> must be valid as the second
  argument. Moreover, the return value of <tt>f</tt> must also be valid as the
  first argument.
<div class="p"><!----></div>
</li>

<li> <tt>x</tt> is the starting value used to invoke <tt>f</tt> the first time
  by the fold function. It can be in any type supported by Ptolemy II.
<div class="p"><!----></div>
</li>

<li> <tt>l</tt> must be either an array in the form of "{1, 2, 3, ...}," or
  a Java collection obtained from a Java method call such as
  "C.output.connectedPortList()" (assuming C is a Const actor here).
<div class="p"><!----></div>
</li>
</ul>

<div class="p"><!----></div>
The pseudocode for computing the result of the fold function <tt>fold(f, x, l)</tt>
is as follows:

<ol type="1">
<li> let <tt>y</tt> = <tt>x</tt>
<div class="p"><!----></div>
</li>

<li> for each element <tt>e</tt> in <tt>l</tt>
<div class="p"><!----></div>
</li>

<li> &nbsp;&nbsp;&nbsp; let <tt>y</tt> = <tt>f(y, e)</tt>
<div class="p"><!----></div>
</li>

<li> return <tt>y</tt>
<div class="p"><!----></div>
</li>
</ol>

<div class="p"><!----></div>
Examples:

<ul>
<li> <tt>fold( <br />
      &nbsp;&nbsp;&nbsp; function(x : int, e : int) x + 1, <br />
      &nbsp;&nbsp;&nbsp; 0, {1, 2, 3} <br />
      )</tt>

<div class="p"><!----></div>
      This computes the length of array {1, 2, 3}. The result is 3, which is
      equal to {1, 2, 3}.length(). Function <tt>f</tt> here is defined with
      anonymous function <tt>function(x : int, e : int) x + 1</tt>. Given
      <tt>x</tt> and arbitrary element <tt>e</tt>, it returns <tt>x + 1</tt>.
      It is invoked the number of times equal to the number of elements in
      array {1, 2, 3}. Therefore, <tt>x</tt> is increased 3 times from the
      starting value 0.
<div class="p"><!----></div>
</li>

<li> <tt>fold( <br />
      &nbsp;&nbsp;&nbsp; function(x : int, e : int) x + e, <br />
      &nbsp;&nbsp;&nbsp; 0, {1, 2, 3} <br />
      )</tt>

<div class="p"><!----></div>
      This computes the sum of all elements in array {1, 2, 3}.
<div class="p"><!----></div>
</li>

<li> <tt>fold( <br />
      &nbsp;&nbsp;&nbsp; function(x : arrayType(int), e : int) <br />
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; e % 2 == 0 ? x : x.append({e}), <br />
      &nbsp;&nbsp;&nbsp; {}, {1, 2, 3, 4, 5} <br />
      )</tt>

<div class="p"><!----></div>
      This computes a subarray of array {1, 2, 3, 4, 5} that contains only odd
      numbers. The result is {1, 3, 5}.
<div class="p"><!----></div>
</li>

<li> Let <tt>C</tt> be an actor.

<div class="p"><!----></div>
      <tt>fold( <br />
      &nbsp;&nbsp;&nbsp; function(list : arrayType(string), <br />
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; port : object("ptolemy.kernel.Port")) <br />
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; port.connectedPortList().isEmpty() ? <br />
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; list.append({port}) :
      list, <br />
      &nbsp;&nbsp;&nbsp; {}, C.portList() <br />
      )</tt>

<div class="p"><!----></div>
      This returns a list of <tt>C</tt>'s ports that are not connected to any
      other port (with <tt>connectedPortList()</tt> being empty). Each port in
      the returned list is encapsulated in an ObjectToken.
<div class="p"><!----></div>
</li>
</ul>

</blockquote>
<table width="331" border="0" cellpadding="0" cellspacing="0">
 <tr>
   <td><a href="expressions.htm"><img src="img/navtoc.gif" width="84" height="23" border="0"
   alt="TOC"> </a></td>
   <td><a href="expressionsa8.htm"><img src="img/navprev.gif" width="81" height="23" border="0"
   alt="PREV"> </a></td>
   <td><a href="expressionsa10.htm"><img src="img/navnext.gif" width="81" height="23" border="0"
   alt="NEXT"> </a></td>


 </tr>
</table>

</body>
</html>
