<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
   "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!-- $Id$ -->
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1" />
<title>Ptolemy II FAQ</title>
<link href="default.css" rel="stylesheet" type="text/css">
<!--#include virtual="/ssi/toppremenu.htm" -->
<!--#include virtual="/ptolemyII/toc.htm" -->
<!--#include virtual="/ssi/toppostmenu.htm" -->
</head>
<body>
 <!--  Note that if you include hyperlink, be sure to 
       include URL in the text so that we can have a text only version.

       By default, this file is found on the web at
       http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIfaq.htm	
       This file appears in each Ptolemy II release as $PTII/doc/ptIIfaq.htm

       Rather than editing ptweb/ptolemyII/ptIIfaq.htm directly, instead
       edit ptII/doc/ptIIfaq.htm and then copy into the ptweb cvs repository:
	# Edit ptII/doc/ptIIfaq.htm
	cp ptII/doc/ptIIfaq.htm ptweb/ptolemyII/ptIIfaq.htm
	cd ptweb/ptolemyII
	cvs commit -m "Updated faq in ptII Tree" ptIIfaq.htm
       Then update the Public website, see:
        http://chess.eecs.berkeley.edu/ptolemy/group/public.htm
 -->

<h1>Ptolemy II Frequently Asked Questions</h1>
This FAQ can be found at:
<a href="http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIfaq.htm" target="_top"><code>http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIfaq.htm</code></a>
 <br>The version of this FAQ is: $Id$

<menu>
<li> <a href="#Translations"><b>0. Translations</b></a>
<li> <a href="#General Questions"><b>1. General</b></a>
	<menu>
	<li> <a href="#ptolemy II description"><b>1.1 What is Ptolemy II?</b></a>
	<li> <a href="#ptolemy II copyright"><b>1.2 What is the copyright and license?</b></a>
	<li> <a href="#mailing list"><b>1.3 Is there a mailing list?</b></a>
	<li> <a href="#bug list"><b>1.4 Is there a bug list?</b></a>
	</menu>

<li> <a href="#Relationship with other packages"><b>2. Relationship with other packages</b></a>
	<menu>
	<li> <a href="#ptolemy classic"><b>2.1 What about compatibility with Ptolemy Classic (Ptolemy 0.7.x)?</b></a>

	<li> <a href="#simulink"><b>2.2 How are Ptolemy II and Matlab/Simulink different?</b></a>

	<li> <a href="#metropolis"><b>2.3 What is the relationship between Ptolemy and Metropolis?</b></a>
	<li> <a href="#kepler"><b>2.4 What is the relationship between Ptolemy and Kepler?</b></a>
	</menu>

<li> <a href="#ptolemy II faq: installation"><b>3. Installation questions</b></a>
	<menu>
	<li> <a href="#downloading Ptolemy II"><b>3.1 How do I download
	Ptolemy II?</b></a>

	<li> <a href="#platforms that Ptolemy II runs under"><b>3.2 What
	platforms does Ptolemy II run under?</b></a>

	<li> <a href="#ptolemy II installation, what do I need"><b>3.3 What do I need to Install Ptolemy II?</b></a>
	<li> <a href="#Subversion Access"><b>3.4 How do I get Subversion access to PtolemyII</b></a>
	</menu> 

<li> <a href="#ptolemy II faq: using Ptolemy II"><b>4. Using Ptolemy II</b></a>
	<menu>
	<li> <a href="#invoking Ptolemy II?"><b>4.1 How do I invoke Ptolemy II?</b></a>
	<li> <a href="#stacktrace"><b>4.2 Ptolemy II is hanging, how do I get a stack trace?</b></a>
	<li> <a href="#reading data from files?"><b>4.3 How do I read data from a file?</b></a>
	<li> <a href="#loops"><b>4.4 How do I do loops in Ptolemy II?</b></a>
	<li> <a href="#multiportComposites"><b>4.5 I have a Composite with a Multiport, but it only sees one channel?</b></a>
	<li> <a href="#powerpoint"><b>4.6 How do I put a model into a PowerPoint Deck?</b></a>
  	<li> <a href="#pdf"><b>4.7 How do I create a PDF of a model?</b></a>
  	<li> <a href="#img"><b>4.8 How do I create an image (GIF or PNG) of a model?</b></a>
  	<li> <a href="#multicore"><b>4.9 What about multicore?</b></a>
	</menu>

<li> <a href="#ptolemy II faq: extending"><b>5. Extending Ptolemy II</b></a>
	<menu>
	<li> <a href="#Adding actors"><b>5.1 How do I add an actor?</b></a>
	<li> <a href="#AddingAConfiguration"><b>5.2 How do I add a configuration?</b></a>

	<li> <a href="#AddAType"><b>5.3 How do I add a type?</b></a>
	<li> <a href="#PolymorphicActors"><b>5.4 What makes an actor domain polymorphic?</b></a>

	<li> <a href="#Interfacing to C/C++"><b>5.5 How do I interface to C/C++</b></a>

	<li> <a href="#Customizing the GUI"><b>5.6 How do I customize the GUI?</b></a>
	<li> <a href="#MoML"><b>5.7 What file format are the models stored in?</b></a>
	<li> <a href="#Scripting"><b>5.8 Is there a scripting interface to Ptolemy II?</b></a>
	<li> <a href="#CodeGen"><b>5.9 What about Code Generation?</b></a>
	<li> <a href="#Contributions"><b>5.10 Does the Ptolemy project take software contributions?</b></a>
	</menu>

</menu>
<h2><a name="Translations"><b>0. General</b></a></h2>
<ul>
  <li><a
  href="http://www.movavi.com/opensource/ptIIfaq-be">Belorussian
  translation</a></li>
</ul>  

<h2><a name="General Questions"><b>1. General</b></a></h2>
<dl>

<dt> <a name="ptolemy II description"><b>1.1 What is Ptolemy II?</b></a>
<dd> 
<p>
<p>Ptolemy II <a href="#1">[1]</a><a href="#6">[6]</a> is an open-source software framework supporting
experimentation with actor-oriented design. Actors are software
components that execute concurrently and communicate through messages
sent via interconnected ports. A model is a hierarchical
interconnection of actors. In Ptolemy II, the semantics of a model is
not determined by the framework, but rather by a software component in
the model called a director, which implements a model of
computation. The Ptolemy Project has developed directors supporting
<a href="http://ptolemy.eecs.berkeley.edu/ptIIlatest/ptII/ptolemy/domains/pn/doc/index.htm">process networks (PN)</a>,
<a href="http://ptolemy.eecs.berkeley.edu/ptIIlatest/ptII/ptolemy/domains/de/doc/index.htm">discrete-events (DE)</a>,
<a href="http://ptolemy.eecs.berkeley.edu/ptIIlatest/ptII/ptolemy/domains/sdf/doc/index.htm">dataflow (SDF)</a>,
<a href="http://ptolemy.eecs.berkeley.edu/ptIIlatest/ptII/ptolemy/domains/sr/doc/index.htm">synchronous/reactive(SR)</a>,
<a href="http://ptolemy.eecs.berkeley.edu/ptIIlatest/ptII/ptolemy/domains/rendezvous/doc/index.htm">rendezvous-based models</a>,
<a href="http://ptolemy.eecs.berkeley.edu/ptIIlatest/ptII/ptolemy/domains/gr/doc/index.htm">3-D visualization</a>,
and
<a href="http://ptolemy.eecs.berkeley.edu/ptIIlatest/ptII/ptolemy/domains/continuous/doc/index.htm">continuous-time</a>
models.
Each level of the hierarchy in a model can
have its own director, and distinct directors can be composed
hierarchically. A major emphasis of the project has been on
understanding the heterogeneous combinations of models of computation
realized by these directors. Directors can be combined hierarchically
with state machines to make
<a href="http://ptolemy.eecs.berkeley.edu/ptIIlatest/ptII/ptolemy/domains/modal/doc/index.htm">modal models</a>
<a href="#2">[2]</a>. A hierarchical
combination of continuous-time models with state machines yields
hybrid systems <a href="#3">[3]</a>; a combination of synchronous/reactive with state
machines yields StateCharts <a href="#4">[4]</a> (the Ptolemy II variant is close to
SyncCharts).</p>

<p>Ptolemy II has been under development since 1996; it is a successor
to
<a href="http://ptolemy.eecs.berkeley.edu/ptolemyClassic">Ptolemy Classic</a>,
which was developed since 1990. The core of
Ptolemy II is a collection of Java classes and packages, layered to
provide increasingly specific capabilities. The kernel supports an
abstract syntax, a hierarchical structure of entities with ports and
interconnections. A graphical editor called Vergil supports visual
editing of this abstract syntax. An XML concrete syntax called MoML
provides a persistent file format for the models. Various specialized
tools have been created from this framework, including
<a href="http://ptolemy.eecs.berkeley.edu/hyvisual">HyVisual</a>
(for hybrid systems modeling),
<a href="http://www.kepler-project.org">Kepler</a>
(for scientific workflows), 
<a href="http://ptolemy.eecs.berkeley.edu/visualsense">VisualSense</a>
(for modeling and simulation of wireless networks),
<a href="http://ptolemy.eecs.berkeley.edu/viptos">Viptos</a>
(for sensor network design), and some commercial products.  Key parts
of the infrastructure include an actor abstract semantics, which
enables the interoperability of distinct models of computation with a
well-defined semantics; a model of time (specifically, super-dense
time, which enables interaction of continuous dynamics and imperative
logic); and a sophisticated type system supporting type checking, type
inference, and polymorphism. The type system has recently been
extended to support user-defined ontologies <a href="#5">[5]</a>.  Various experiments
with synthesis of implementation code and abstractions for
verification are included in the project.</p>

<h3>References</h3>

<p><a name="1">[1]</a>
Johan Eker, Jorn Janneck, Edward A. Lee, Jie Liu, Xiaojun
Liu, Jozsef Ludvig, Sonia Sachs, Yuhong Xiong. <a
href="http://chess.eecs.berkeley.edu/pubs/488.html">
Taming heterogeneity - the Ptolemy approach</a>,
<i>Proceedings of the IEEE</i>, 91(1):127-144,
January 2003. 
<br>(<i>Key citation for the Ptolemy project</i>)
</p>

<p><a name="2">[2]</a>
Edward A. Lee. <a
href="http://www.eecs.berkeley.edu/Pubs/TechRpts/2009/EECS-2009-151.html"><i>Finite
State Machines and Modal Models in Ptolemy
II</i></a>, Technical report,  EECS Department,
University of California, Berkeley, UCB/EECS-2009-151,
December, 2009.
</p>

<p><a name="3">[3]</a>
	E. A. Lee and H. Zheng, "<a href="http://ptolemy.eecs.berkeley.edu/publications/papers/05/OperationalSemantics/">Operational Semantics of Hybrid Systems</a>," Invited paper in Proceedings of Hybrid Systems: Computation and Control (HSCC) LNCS 3414, Zurich, Switzerland, March 9-11, 2005, pp.25-53.
</p>

<p><a name="4">[4]</a>
	E. A. Lee, H. Zheng, "<a
	href="http://ptolemy.eecs.berkeley.edu/publications/papers/07/unifying/index.htm">Leveraging
	Synchronous Language Principles for Heterogeneous Modeling and
	Design of Embedded Systems</a>," EMSOFT '07, September 30 - October 3, 2007, Salzburg, Austria.
</p>

<p><a name="5">[5]</a>
	M.-K. Leung, T. Mandl, E. A. Lee, E. Latronico,
C. Shelton, S. Tripakis, and B. Lickly, "<a
	href="http://chess.eecs.berkeley.edu/pubs/611.html">Scalable
	Semantic Annotation using Lattice-based Ontologies</a>," ACM/IEEE 12th International Conference
on Model Driven Engineering Languages and Systems (MODELS), Denver,
CO, USA, 4-9 October, 2009.
</p>

<p><a name="6">[6]</a>Christopher Brooks, Edward A. Lee. <a
href="http://chess.eecs.berkeley.edu/pubs/655.html"><i>Ptolemy
II - Heterogeneous Concurrent Modeling and Design in
Java</i></a>, 11 February, 2010; Poster presented at the 2010 <a
href="http://www.eecs.berkeley.edu/BEARS">Berkeley
EECS Annual Research Symposium (BEARS)</a>.</p>


<p>
The <a href="http://ptolemy.eecs.berkeley.edu/index.html">Ptolemy Project web page</a>
contains much more information about the
project. The work is conducted in the
<a href="http://www.eecs.berkeley.edu/">Department of Electrical Engineering and Computer Sciences</a>
of the
<a href="http://www.berkeley.edu/">University of California at Berkeley</a>.
The project is directed by
<a href="http://ptolemy.eecs.berkeley.edu/~eal/index.html">Prof. Edward Lee</a>.
The project is named after
<a href="http://ptolemy.eecs.berkeley.edu/people/ptolemy.htm">Claudius Ptolemaeus</a>,
the second century Greek astronomer, mathematician, and geographer.</p>

</p>

<dt> <a name="ptolemy II copyright"><b>1.2 What is the copyright and license?</b></a>
<DD> Ptolemy II is released under the fairly liberal UC Berkeley copyright,
see 
<a href="http://ptolemy.eecs.berkeley.edu/ptIIcopyright.htm" target="_top"><code>http://ptolemy.eecs.berkeley.edu/ptIIcopyright.htm</code></a>
Most files have the copyright at the top.

<p>Ptolemy II is free for academic and commercial use.  You an incorporate it
into products, but you need to include follow the instructions in the
copyright notice.</p>

<p>This copyright is based on the Tcl copyright that was used when
Prof. Ousterhout was developing Tcl here at UC Berkeley.  This
copyright was also used in Ptolemy Classic, which has been used in
commercial products, see
<a href="http://ptolemy.eecs.berkeley.edu/archive/links.htm" target="_top"><code>http://ptolemy.eecs.berkeley.edu/archive/links.htm</code></a>

<p> This style of copyright is often referred to the community as a
"BSD" copyright because it was used for the "Berkeley Standard
Distribution" of Unix. It is much more liberal that the commonly used
"GPL" or "GNU Public License," which encumbers the software and
derivative works with the requirement that they carry the source code
and the same copyright agreement. The BSD copyright requires that the
software and derivative work carry the identity of the copyright
owner, as embodied in the lines:
<pre>
Copyright (c) 1999-2011 The Regents of the University of California.
All rights reserved.
</pre></p>

<p>The copyright also requires that copies and derivative works include
the disclaimer of liability in BOLD. It specifically does not require
that copies of the software or derivative works carry the middle
paragraph, so such copies and derivative works need not grant
similarly liberal rights to users of the software.</p>

<p>The intent of the BSD copyright is to maximize the potential impact of
the software by enabling uses of the software that are inconsistent
with disclosing the source code or granting free redistribution
rights. For example, a commercial enterprise can extend the software,
adding value, and sell the original software embodied with the
extensions. Economic principles indicate that granting free
redistribution rights may render the enterprise business model
untenable, so many business enterprises avoid software with GPL
licenses. Economic principles also indicate that, in theory, fair
pricing of derivative works must be based on the value of the
extensions, the packaging, or the associated services provided by the
enterprise. The pricing cannot reflect the value of the free software,
since an informed consumer will, in theory, obtain that free software
from another source.</p>

<p>Software with a BSD license can also be more easily included in
defense or national-security related applications, where free
redistribution of source code and licenses may be inconsistent with
the mission of the software.  Ptolemy II can include other software
with copyrights that are different from the BSD copyright. In general,
we do not include software with the GNU General Public License (GPL)
license, because provisions of the GPL license require that software
with which GLP'd code is integrated also be encumbered by the GPL
license. In the past, we have made an exception for GPL'd code that is
aggregated with Ptolemy II but not directly combined with Ptolemy
II. For example cvs2cl.pl was shipped with Ptolemy II.  This file is a
GPL'd Perl script that access the CVS database and generates a
ChangeLog file. This script is not directly called by Ptolemy II, and
we include it as a ``mere aggregation'' and thus Ptolemy II does not
fall under the GPL. Note that we do not include GPL'd Java files that
are compiled and then called from Ptolemy II because this would
combine Ptolemy II with the GPL'd code and thus encumber Ptolemy II
with the GPL.</p>

<p>Another GNU license is the GNU Library General Public License now
known as the GNU Lesser General Public License (LGPL). We try to avoid
packages that have this license, but we on occasion we have included
them with Ptolemy II. The LGPL license is less strict than the GPL -
the LGPL permits linking with other packages without encumbering the
other package.  In general, it is best if you avoid GNU code. If you
are considering using code with the GPL or LGPL, we encourage you to
carefully read the license and to also consult the GNU GPL FAQ at
<a href="http://www.gnu.org/licenses/gpl-faq.html" target="_top"><code>http://www.gnu.org/licenses/gpl-faq.html</code></a>.</p>

<p>We also avoid including software with proprietary copyrights that do
not permit redistribution of the software.</p>

<dt> <a name="mailing list"><b>1.3 Is there a mailing list?</b></a>

  <p>The Ptolemy mailing lists are run by
<a href="http://lists.eecs.berkeley.edu">http://lists.eecs.berkeley.edu</a>.

<h2>Ptolemy Interest Mailing list</h2>

<p>This moderated mailing list is for Ptolemy announcements only.
You cannot post to this group.  The amount of mail here is kept very
light (a few messages a year).
To subscribe to the ptolemy-interest mailing list,
go to
<a href="https://lists.eecs.berkeley.edu/sympa/subscribe/ptolemy-interest">https://lists.eecs.berkeley.edu/sympa/subscribe/ptolemy-interest</a>. All mail to ptolemy-interest also goes to ptolemy-hackers, so if
you subscribe to ptolemy-hackers, there is no need to subscribe to
ptolemy-interest too.</p>

<h2>Ptolemy Hackers Mailing list <a href="http://ptolemy.eecs.berkeley.edu/search/wais.htm" target="_top">(search)</a></h2>
<p>This is a discussion list for Ptolemy questions, bug reports, and to
share Ptolemy additions and applications.  Since this is a discussion
group, mail volume can sometimes be heavy.

To subscribe to the ptolemy-hackers mailing list,
go to <a href="https://lists.eecs.berkeley.edu/sympa/subscribe/ptolemy-hackers">https://lists.eecs.berkeley.edu/sympa/subscribe/ptolemy-hackers</a>.
your message.  You can
<a href="http://ptolemy.eecs.berkeley.edu/search/wais.htm" target="_top">search this mailing list</a>
for previously posted messages on any topic.</p>

<h2>Newsgroup: comp.soft-sys.ptolemy</h2>
<p>Just like the ptolemy-hackers mailing list, the
<a href="news:comp.soft-sys.ptolemy">comp.soft-sys.ptolemy</a> newsgroup
is a forum of the discussion of Ptolemy questions, bug reports,
additions, and applications.  It is best to post to the ptolemy-hackers 
mailing list
instead of the comp.soft-sys.ptolemy newsgroup as ptolemy-hackers
goes directly to the mailboxes of the Ptolemy developers.  We make every
effort to keep up with the compo.soft-sys.ptolemy newsgroup and
repost questions from the newsgroup to the mailing list.

<p>The easiest way to read comp.soft-sys.ptolemy is via <a
href="http://groups.google.com/group/comp.soft-sys.ptolemy/topics">Google Groups</a>.</p>

 <p> The Ptolemy Mailing lists and search engine can be found at
<a href="http://ptolemy.eecs.berkeley.edu/search/" target="_top"><code>http://ptolemy.eecs.berkeley.edu/search/</code></a>

</dl>

<dt> <a name="bug list"><b>1.4 Is there a bug list?</b></a>
<DD> Current bugs are listed in
<a href="http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIlatest/limitations.htm" target="_top"><code>http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIlatest/limitations.htm</code></a> and in <code>$PTII/doc/limitations.htm</code>

 <p>If you find a bug, please report it using
<a href="#mailing list">Ptolemy-hackers mailing list</a>.

 <p>A good bug report includes:
<menu>
<li> The version of Ptolemy you are running (6.0? 7.0? The devel tree?)

<li> Whether you built it from Subversion sources or from the sources 
shipped with the Windows installer or are running from the Windows installer.

<li> Your platform (Windows? Linux?) and version, along with the
the version of Java you are running

<li> <B>Important</B>: a small test model, or else really detailed
instructions on how to replicate the bug, what happened for you and
what you expected to happen.
</menu>

 <p>There is also a 
<a href="http://chess.eecs.berkeley.edu/bugzilla" target="_top">Bugzilla bug handler</a>.
To use bugzilla, you will need an account on the Chess, Embedded
or Trust websites.  If you do not have an account, request
a  <code>ptexternal</code> workgroup on the Chess website:
 <br><a href="http://chess.eecs.berkeley.edu/login/?subpage=Request" target="_top">Chess website account request</a>
 <br>For more information, see the
<a href="https://chess.eecs.berkeley.edu/bugzilla/help.html" target="_top">Chess Bugzilla Help Page</a>.

<h2><a name="Relationship with other packages"><b>2. Relationship with other packages</b></a></h2>
<dl>
<dt> <a name="ptolemy classic"><b>2.1 What about compatibility with Ptolemy Classic (Ptolemy 0.7.x)?</b></a>
<dd>
 <p>
This FAQ covers Ptolemy II.
The Ptolemy Classic FAQ can be found at  
<a href="http://ptolemy.eecs.berkeley.edu/ptolemyclassic/ptolemy.faq"><code>http://ptolemy.eecs.berkeley.edu/ptolemyclassic/ptolemy.faq</code></a>
</p>

 <p>Ptolemy 0.x is fairly mature software in that the design is stable and
mostly unchanging. The Ptolemy II software system is under active development.

<menu>
<li> They are written in different languages (Java vs. C++)

<li> They have different file formats. Ptolemy 0.x uses Octtools,
Ptolemy II uses a system based on XML

<li> They have different user interfaces.  The Ptolemy II UI
is much easier to use than the Ptolemy Classic UI.
<li> Ptolemy Classic works best under Unix.  There is a 
Windows port of Ptolemy Classic, but it does not work well.
<br>Ptolemy II works under both Unix and Windows.
<li> Ptolemy Classic can generate code for various DSP primarily
using SDF semantics.
<br> Ptolemy II can generate code for non-hierarchical SDF models
and for hierarchical Giotto models.

</menu>
 <p>For more information about the current status of code generation in
Ptolemy II, see
<a href="#CodeGen"><b>5.9 What about Code Generation?</b></a>
 </p>

<p>Various people have made efforts to use a different front end with
Ptolemy Classic.  See the
<a href="http://ptolemy.eecs.berkeley.edu/archive/"
target="_top">Ptolemy Website Links Page</a> for possible solutions,
including: 
<menu>

<li> <a href="http://www.mldesigner.com/news.html" target="_top">MLDesigner 2.1</a>
is a commercial product that was released in January 2002 and it
includes a conversion utility from Ptolemy Classic models.

<li> The 
<a href="http://peace.snu.ac.kr/research/peace/" target="_top">PeaCE</a> (Ptolemy extension as Codesign Environment)
might offer some ideas and does have some software available.

<li>The <a href="http://ptolemy.eecs.berkeley.edu/conferences/01/" target="_top">2001
Ptolemy Miniconference</a> had the following talk:


<p>
"An Approach to Executing Ptolemy Classic Models under Ptolemy II"
Ned Stoffel, Dwight Richards, Neil Smyth*, and Matt Goodman, Telcordia
Technologies, Inc. (* Smyth is now with Altio).

<p>The slides for this talk can be found at
<a href="http://ptolemy.eecs.berkeley.edu/conferences/01/src/miniconf/Telcordia.pdf" target="_top">http://ptolemy.eecs.berkeley.edu/conferences/01/src/miniconf/Telcordia.pdf</a>
<br>We are not sure if Telcordia has any software available for release.

</menu>

<dt> <a name="simulink"><b>2.2 How are Ptolemy II and Matlab/Simulink different?</b></a>
 <dd> 

     Ptolemy II has very little in common with Matlab, which is
     a textual, imperative, interactive, scientific programming
     language.  Ptolemy II works with Matlab, thanks to an interface
     developed by Zoltan Kemenczy and others at Research In Motion,
     Ltd.  See

<a href="http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIlatest/ptII/ptolemy/matlab/matlab.htm" target="_top"><code>http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIlatest/ptII/ptolemy/matlab/matlab.htm</code></a>


 <p>    Ptolemy II has much more in common with Simulink, which is
     a graphical block-diagram language, originally developed for
     control system design.  Simulink has a rich and expressive
     model of computation with continuous-time semantics and support
     for periodic discrete-time signals.  Some of its principles have
     been incorporated in the CT (continuous-time) domain of Ptolemy II,
     but not all.  The CT domain, for example, does not have the
     notion of "sample time" (which in Simulink provides the periodic
     discrete-time support) nor the support for algebraic loops.
     There is also currently no code generation support in CT
     (in Simulink, this is provided through the associated product
     Real-Time Workshop).  Also, the CT domain has implemented
     fewer ODE solvers than those provided by Simulink and has a
     smaller actor library.


 <p>     Ptolemy II and Simulink both support extension of the actor
     library through well-defined interfaces (in Simulink, this is
     called the S-function interface).  However, Ptolemy II is a more
     open architecture in that its infrastructure is open source,
     and the interfaces to the core mechanisms in the software
     are published and documented.  The persistent file format
     (MoML) is XML in Ptolemy II, which makes it both more verbose
     and more portable than the Simulink syntax (MDL files).
     Simulink supports one model of computation, whereas Ptolemy II
     supports several, and can be extended with new models of
     computation.  Simulink can also be extended, as for example
     it has been with the associated product Stateflow, which
     supports state-machine modeling. But in Simulink, the extension
     is done by defining new blocks using the S-function interface.
     As such, additional models of computation added this way are
     second class. For example, they cannot define the model of
     computation at the top level of the hierarchy, and cannot
     contain Simulink models within their own components.
 <dd> 


<dt> <a name="metropolis"><b>2.3 What is the relationship between Ptolemy and Metropolis?</b></a>
 <dd> 

Ptolemy (<a href="http://ptolemy.eecs.berkeley.edu" target="_top"><code>http://ptolemy.eecs.berkeley.edu</code></a>)
and Metropolis (<a href="http://embedded.eecs.berkeley.edu/metropolis/" target="_top"><code>http://embedded.eecs.berkeley.edu/metropolis/</code></a>) 
are separate research projects at Berkeley,
albeit ones with considerable cross-influences. Ptolemy is headed by
<a href="http://ptolemy.eecs.berkeley.edu/~eal" target="_top">Edward Lee</a>,
while Metropolis is headed by 
<a href="http://www-cad.eecs.berkeley.edu/~alberto" target="_top">Alberto Sangiovanni-Vincentelli</a>.

 <br>A key principle in Metropolis is its "meta model," which in the
terminology of the Ptolemy project we would call its "abstract
semantics." In Metropolis, models consist of processes, with their own
thread of control, that communicate through ports and "media." The
media are roughly equivalent to Ptolemy Receivers; they define the
communication semantics between components. The abstract semantics of
Metropolis, is an abstraction of the model of computation that appears
in the Ptolemy PN and CSP domains. It is an abstraction because in
Metropolis, the communication semantics is not defined, whereas in PN
and CSP, it is (in two different ways). Metropolis model builders
construct the media that processes use to communicate. One could build,
for example, media in Metropolis to implement either PN or CSP.
Moreover, Metropolis model builders construct much of what would be the
director in a Ptolemy model.

 <p>In Ptolemy, two parts of the abstract semantics are separated, control
and communication. The abstract semantics of control is based on the
Executable interface. The abstract semantics of communication is based
on the IOPort/Receiver interface. The Metropolis metamodel is more
fixed about control semantics (i.e. components are process based), but
allows a richer interface to communications media (since a media can
expose arbitrary interfaces to components). This design choice makes
communication refinement easier (since the interface to a media can
change) but makes it more difficult to build domain-polymorphic
components since media often have different interfaces. It also
emphasizes process-oriented concurrency that often exists at the
top-level of a system, and de-emphasizes the construction of
hierarchical models.

 <p>The abstract semantics that binds most Ptolemy domains (with the
exception of PN and CSP) is significantly different. Instead of
processes, components are actors with three-phase firings. The
objective of this abstract semantics is to be able to define "domain
polymorphic" actors, which are actors that operate in several models of
computation. This enables hierarchically composing distinct models of
computation, since an aggregation of actors in one domain becomes an
actor in another. No such composition is possible (by any method we
know of) with processes. Indeed, both PN and CSP do not compose well
with other domains. There is no useful way to embed PN or CSP models
within other, firing-based models of computation.

 <p>A key reason for the choice of abstract semantics in Metropolis is the
desire to model several aspects of a system, including particularly its
performance when mapped to hardware resources. The separate threads of
control model parallel hardware systems well, and mesh well with trends
in hardware design.

 <p>Processes in Metropolis are defined in a Java-like syntax, and use a
model of computation in which components are processes with global
synchronization points. Constraints are an explicit, declarative manner
to specify requirements on performance (e.g. power or timing) and
sharing of computation and communication resources. For example, timing
constraints are expressed in linear temporal logic and timed logic. A
variety of back-ends have been built or are under construction, to
perform simulation, formal verification and synthesis, including ones
that target Java, SystemC, and C.

 <p>By contrast, in Ptolemy, actors are defined in ordinary Java. More
easily retargetted actor-definition languages are under development,
including Cal 
(<a href="http://embedded.eecs.berkeley.edu/caltrop" target="_top"><code>http://embedded.eecs.berkeley.edu/caltrop</code></a>).
and Actif
(<a href="http://embedded.eecs.berkeley.edu/compose" target="_top"><code>http://embedded.eecs.berkeley.edu/compose</code></a>).

 <p>One of the key innovations in Metropolis is the notion of "quantity
managers." Quantity managers contain code that is invoked when a
request is made to annotate a process transition with a quantity, such
as time, energy, or memory. Such requests are made, for example, on the
execution of a statement, or on a communication action over a medium. A
special case of quantity manager is the global time manager, which is
used to implement a discrete event semantics, where events are
processed in chronological order. Constraints in terms of quantities
are expressed formally in the Logic Of Constraints, a logic
particularly suitable for specifying constraints at the abstract system
level, where coordination of executions, not the low level interaction,
is of concern. LOC is a formalism designed to reason about simulation
traces. It consists of all the terms and operators allowed in
sentential logic, with additions that make it possible to specify
system level quantitative constraints.

 <p>In Ptolemy, quantity managers would be associated with the director,
although no director has been developed (to our knowledge) with such a
broadly applicable mechanism.

<dt> <a name="kepler"><b>2.4 What is the relationship between Ptolemy and Kepler?</b></a>
 <dd> 

Ptolemy (<a href="http://ptolemy.eecs.berkeley.edu" target="_top"><code>http://ptolemy.eecs.berkeley.edu</code></a>)
and The Kepler Project (<a href="http://www.kepler-project.org" target="_top"><code>http://www.kepler-project.org/</code></a>) 
are two separate projects.  The 
<a
href="http://kepler-project.org/Wiki.jsp?page=FAQOnKeplerCollaboration"
target="_top">Kepler Project FAQ</a> says
<BLOCKQUOTE>
<B>What is the difference between Kepler and Ptolemy? </B>
 <br>Roughly speaking, Ptolemy aims at modeling concurrent systems, studying
system models, various models of computation, etc. as explained
above. In constrast, Kepler aims at execution of scientific workflows
(by end users and/or workflow engineers), inheriting modeling and
design capabilities including the Vergil GUI and workflow scheduling
and execution capabilities from Ptolemy.
 <p><B>How does Kepler extend Ptolemy?</B>
 <br>Kepler extensions to Ptolemy include an ever increasing number of
 components (called actors in Ptolemy terminology) aimed particularly
 at scientific applications, e.g., for remote data and metadata
 access, data transformations, data analysis, interfacing with legacy
 applications, web service invocation and deployment, provenance
 tracking, etc. Target application areas include bioinformatics,
 cheminformatics, ecoinformatics, and geoinformatics workflows among
 others.
 <p>Kepler also inherits from Ptolemy the actor-oriented modeling paradigm
 that separates workflow components from the overall workflow
 orchestration (via so-called directors), making components more
 easily reusable. Through actor-oriented and hierarchical modeling
 features built into Ptolemy, Kepler scientific workflows can operate
 at very different level of granularity, from low-level "plumbing
 workflows" that explictely move data around, start and monitor remote
 jobs, etc. to high-level "conceptual workflows" that interlink
 complex, domain specific data analysis steps.
</BLOCKQUOTE>

Concerning using Ptolemy actors within Kepler, Norbert Podhorszki writes:
<BLOCKQUOTE>
If you find a Ptolemy actor useful, just remember its class name (e.g. 
ptolemy.actor.lib.Ramp). In Kepler, "Tools/Instantiate Component" menu 
allows you to type in the class name, which will put an actor instance on 
your canvas just as dragging one from the actor tree.

 <p>The ptolemy jar is stored in the kepler.jar, so you have access to any 
Ptolemy actors and directors.

 <p>If you want to use a director not in Kepler tree, you have to use the
"Tools/Instantiate Attribute" menu. I use it to get a DDF director 
frequently (class ptolemy.domains.ddf.kernel.DDFDirector).

 <p>I suppose, you can create a kar file for any ptolemy actor just as for 
kepler actors, if you want to add some of them into the Kepler actor tree.
</BLOCKQUOTE>

</dl>


<h2><a name="ptolemy II faq: installation"><b>3. Installation questions</b></a></h2>
<dl>
<dt> <a name="downloading Ptolemy II"><b>3.1 How do I download	Ptolemy II?</b></a>
<dd> Ptolemy II is available in several formats including applets, source code, a Windows installer and Web Start. 
For details, see
<a href="http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIlatest/" target="_top"><code>http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIlatest/</code></a>
<a href="http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIlatest/"><code></code></a>

<dt> <a name="platforms that Ptolemy II runs under"><b>3.2 What platforms does Ptolemy II run under?</b></a>
<dd> Ptolemy II is written in Java, so it should run on any platform
that supports a recent Java Virtual machine.  Locally, we use
Windows XP with the Cygwin toolkit for development.
The nightly builds run under Solaris 8.  Some people in the group use Linux.

<dt> <a name="ptolemy II installation, what do I need"><b>3.3 What do I need to Install Ptolemy II?</b></a>
<dd> At the minimum, you need the Java Runtime Environment.
For details, see the installation pages at
<a href="http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIlatest/" target="_top"><code>http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIlatest/</code></a>
<a href="http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIlatest/"><code></code></a>

<dt><a name="Subversion Access"><b>3.4 How do I get Subversion access to PtolemyII</b></a>
<dd>Subversion access to the Ptolemy II development tree is available.
Instructions can be found at
<a href="http://chess.eecs.berkeley.edu/ptexternal" target="_top">http://chess.eecs.berkeley.edu/ptexternal</a>
</dl>


<h2><a name="ptolemy II faq: using Ptolemy II"><b>4. Using Ptolemy II</b></a></h2>

<dl>
<dt> <a name="invoking Ptolemy II?"><b>4.1 How do I invoke Ptolemy II?</b></a>
<dd> 
If you install Ptolemy II using the Windows installer, then
menu choices should be added to <code>Start</code> -&gt; 
<code>Programs</code> -&gt; <code>Ptolemy</code>.

 <p>
Ptolemy II models can be run from the command line, this is what we do
for the nightly test suite.
  <dl>

  <dt> <code>$PTII/bin/vergil foo.xml</code>
  <dd> will bring up a visual editor for the model defined in foo.xml.
  The visual editor allows you to change the model and run it.

  <dt> <code>$PTII/bin/ptolemy foo.xml</code>
  <dd> will bring up a run control panel for that model and allow you to run
  it

  <dt> <code>$PTII/bin/ptexecute foo.xml</code>
  <dd> will run the model.  The model need not be graphical.

  <dt> <code>java -classpath $PTII ptolemy.actor.gui.MoMLSimpleApplication foo.xml</code>
  <dd> will run the model without requiring a connection to a display.
  Use this method for running models as part of cron jobs etc.
  </dl>

 <p>MoMLApplication supports setting top level parameters using
command line arguments.

 <p>The ConfigurationApplication docs say:

<BLOCKQUOTE>
   If a Ptolemy model is instantiated on the command line, either
   by giving a MoML file or a -class argument, then parameters of that
   model can be set on the command line.  The syntax is:
   <pre>
   $PTII/bin/ptolemy <i>modelFile.xml</i> -<i>parameterName</i> <i>value</i>
   </pre>
   where <i>parameterName</i> is the name of a parameter relative to
   the top level of a model or the director of a model.  For instance,
   if foo.xml defines a toplevel entity named <code>x</code> and
   <code>x</code> contains an entity named <code>y</code> and a
   parameter named <code>a</code>, and <code>y</code> contains a
   parameter named <code>b</code>, then:
   <pre>
   $PTII/bin/ptolemy foo.xml -a 5 -y.b 10
   </pre>
   would set the values of the two parameters.

   <p>Note that strings need to have double quotes converted to
   <code>&amp;quot;</code> so to set a parameter named <code>c</code>
   to the string <code>"bar"</code> it might be necessary to do
   something like:
   <pre>
   $PTII/bin/ptolemy foo.xml -a 5 -y.b 10 -c "\&amp;quot\;bar\&amp;quot\;"
   </pre>
   The <code>&amp;quot;</code> is necessary to convert the double quote
   to something safe to in an XML file.  The backslashes are necessary
   to protect the <code>&amp</code> and <code>;</code> from the shell
   in the shell script.

   <p>Note that the ptolemy.actor.parameters.ParameterSet attribute is
   a better way to set parameters at run time.  ParameterSet is
   an attribute that reads multiple values from a file and sets
   corresponding parameters in the container.</p>

</BLOCKQUOTE>
Toplevel parameters can be set by calling vergil with a similar syntax:
<pre>
$PTII/bin/vergil foo.xml -a 5 -y.b 10
</pre>
or
<pre>
$PTII/bin/ptexecute foo.xml -a 5 -y.b 10
</pre>
Note that MoMLSimpleApplication does not do this type of command line parsing,
but <code>$PTII/ptolemy/moml/MoMLCommandLineApplication.java</code>
  extends MoMLSimpleApplication and handles command line arguments
  in a similar manner as above.

 <p>If you want to start Vergil by hand, the answer depends on which
version of Ptolemy II you are using.

 <p>If you downloaded the source files and compiled them, then the
only jar file that might need to be included is diva.jar.  Releases 
<B>after</B> Ptolemy II 3.0.2 include the diva source files,
so in theory,
<pre>
java -classpath "$PTII" ptolemy.vergil.VergilApplication
</pre>
should work.
 <p>Under Windows with Cygwin with Ptolemy II 3.0.2 and earlier, try:
<pre>
java -classpath "$PTII;$PTII/lib/diva.jar" ptolemy.vergil.VergilApplication
</pre>

 <p>If you have chose the Windows Installer, then the individual
<code>.class</code> files have been placed in jar files

<p>There are several different Ptolemy configurations that differ
in the number of Ptolemy actors or models of computation that are
available.  The Ptiny configuration includes common domains and is
sometimes easier to work with than the full version.


<p>The Ptiny configuration of Vergil uses the following jar files
	<ul>
	<li> <code>./ptolemy/ptsupport.jar</code>
	<li> <code>./ptolemy/vergil/vergil.jar</code>
	<li> <code>./ptolemy/lib/diva.jar</code>
	<li> <code>./ptolemy/domains/domains.jar</code>
        </ul>
<p>The full configuration of Vergil uses all the jar files
	of the Ptiny version and the following jar files:
	<ul>
	<li><code>ptolemy/actor/gt/gt.jar</code></li>
	<li><code>ptolemy/domains/ptera/erg.jar</code></li>
	<li><code>ptolemy/vergil/gt/gt.jar</code></li>
	<li><code>ptolemy/vergil/ptera/erg.jar</code></li>
	<li><code>ptolemy/vergil/fsm/fmv/fmv.jar</code></li>
	</ul>

The directory where Ptolemy II is installed should also be in the classpath.

 <p><a name="invokebyhand">To start Vergil by hand</a> when the
Ptolemy II was installed from the Windows installer, try starting up by
cd'ing to where the release is installed and typing in the following
(all on one line)

<p>Under Windows, to start the Ptiny version, first change to the
	Ptolemy directory, then run:
 <!-- Split this into multiple lines so that the display does not
have a horizontal scroll bar because of the length of the line. -->
<pre>
java -classpath ".;./ptolemy/ptsupport.jar;\
./ptolemy/vergil/vergil.jar;./lib/diva.jar;\
./ptolemy/domains/domains.jar" \
 ptolemy.vergil.VergilApplication -ptiny
</pre>

<p>To run the full version:
<pre>
java -classpath ".;ptolemy/ptsupport.jar;\
ptolemy/vergil/vergil.jar;lib/diva.jar;\
ptolemy/domains/domains.jar;\
ptolemy/actor/gt/gt.jar;\
ptolemy/domains/erg/erg.jar;\
ptolemy/vergil/gt/gt.jar;\
ptolemy/vergil/erg/erg.jar;\
ptolemy/vergil/fsm/fmv/fmv.jar" \
 ptolemy.vergil.VergilApplication
</pre>

See also <a href="#AddingAConfiguration"><b>5.2 How do I add a configuration?</b></a>

<dt>
<a name="stacktrace"><b>4.2 Ptolemy II is hanging, how do I get a stack trace?</b></a>
<pdd>
If Ptolemy II is hanging, try generating a stack trace using
one of the following methods:
  

 <p>Under Windows, when you have built from source, try using
"Control-Backslash", that is holding the Control key down and hitting
the backslash key.  Note that the Window that started the java process
should have the focus when you hit Control-Backslash.  Sometimes
Function-Break or Control-Break will also work.

 <p>Under Unix, try using <code>kill -3</code> on the Java 
process id.  To get the Java process id, use the <code>ps</code>
command.  For example:
<pre>
$PTII/bin/vergil
ps | grep java
<I>Note the process id (pid) of the java process</I>
kill -3 <I>pid</I>
</pre>


 <p>If you are running Ptolemy II using the Windows installer,
then standard out and standard error will be hidden.  To
work around this:
<ol>
<li> Go to the directory where Ptolemy II is
located and open the corresponding <code>.lax</code>
file.  
 <br>For example, Ptolemy II 5.0 is usually installed
in <code>c:/Ptolemy/ptII5.0</code> and there
is <code>vergil-full.lax</code> file that is read when
<code>vergil-full.exe</code> is run.  So, 
<code>vergil-full.lax</code> is the file to edit.

<li>In the <code>.lax</code> file, change
<pre>
lax.stderr.redirect=
</pre>
to
<pre>
lax.stderr.redirect=console
</pre>

and

<pre>
lax.stdout.redirect=
</pre>
to
<pre>
lax.stdout.redirect=console
</pre>


<li> Start up vergil-full and two windows will appear, one is the regular
vergil splash screen, the other is a window titled
<code>vergil-full.exe</code> that contains the console output.

<li> Click on the <code>vergil-full.exe</code> window and hit
Control-Backslash.  If that does not work, try Control-Break and 
Function-Break.

<li> The stacktrace should appear in window.
If it does not, try <a href="#invokingbyhand">invoking Ptolemy II by hand</a>

<li> To copy the stack trace from the <code>vergil-full.exe</code>
window, click on the small Mr. Ptolemy Icon on the upper left
side of the Window title bar, select Properties -&gt; Options -&gt;
Quick Edit Mode. Then click OK twice to close the dialog.
 <br>In the <code>vergil-full.exe</code> window, drag the mouse
over the text and hit return.  Then paste the text into a file.


</ol>




<dt> <a name="reading data from files?"><b>4.3 How do I read data from a file?</b></a>
<dd> 

 <p>Actors that read and write data are visible in Vergil under 
<code>Actors</code> -&gt; <code>IO</code>.

<p>When an actor takes a URL as an argument, use
<code>file:./<I>filename</I></code>.  For details, see the Ptolemy II 2.0.1
DoubleReader actor at
<a href="http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIlatest/ptII/doc/codeDoc/ptolemy/actor/lib/DoubleReader.html" target="_top"><code>http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIlatest/ptII/doc/codeDoc/ptolemy/actor/lib/DoubleReader.html</code></a>

 <p>Ptolemy II 3.0.2 and later includes
<a href="http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIlatest/ptII/doc/codeDoc/ptolemy/actor/lib/LineReader.html" target="_top"><code>http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIlatest/ptII/doc/codeDoc/ptolemy/actor/lib/LineReader.html</code></a> 
- Reads a file or URL, one line at a time, and outputs each line as a String.

 <p>Ptolemy II 3.0.2 and later also includes
<a href="http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIlatest/ptII/doc/codeDoc/ptolemy/actor/lib/ExpressionReader.html" target="_top"><code>http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIlatest/ptII/doc/codeDoc/ptolemy/actor/lib/ExpressionReader.html</code></a>
- Reads a file or URL, one line at a time, evaluates each line as an expression and outputs the tokens resulting from the evaluation.

 <p> These actors use a
 <p><a href="http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIlatest/ptII/doc/codeDoc/ptolemy/data/expr/FileParameter.html" target="_top">FileParameter</a>
to specifies a file or URL.
 <p>Actors that have Parameters may 
read data using the <code>readFile</code>, <code>findFile</code> and
<code>readMatrix</code> expression operators, see
<a
href="http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIlatest/ptII/doc/expressions.htm" target="_top"><code>http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIlatest/ptII/doc/expressions.htm</code></a>
and
<a href="http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIlatest/ptII/doc/codeDoc/ptolemy/data/expr/UtilityFunctions.html" target="_top"><code>http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIlatest/ptII/doc/codeDoc/ptolemy/data/expr/UtilityFunctions.html</code></a>

 <p>The way to use readFile is as an expression:
<pre>
eval(readFile("foo.txt"))
</pre>
where foo.txt contains a single line that gets parsed as a Ptolemy
expression.  For example, if foo.txt contained
<pre>
{1.0, 2.0}
</pre>
Then the expression would resolve to an array of two elements, 1.0 and
2.0.

 <p>
ptII/ptolemy/data/expr/Constants.java defines PTII and HOME
as variables like PI and true.  PTII can be used in an expression
to refer to a file relative to the Ptolemy II installation directory.

 <p><code>PTII</code> is the value of the ptolemy.ptII.dir Java property,
which is set when vergil is invoked.

 <p><code>HOME</code> is the value of the user.dir property.  
Unsigned applets can read user.dir

 <p>The expression language includes the <code>property()</code>
 method that will read Java properties from the local environment.

 <p><code>property("ptolemy.ptII.dir")</code>
 is set to the value of $PTII when
vergil etc. are invoked. 

 <p>For example:
<pre>
property("ptolemy.ptII.dir") + "/ptolemy/actor/lib/test/auto/FileWriter1Output.txt"
</pre>

<dt> <a name="loops"><b>4.4 How do I do loops in Ptolemy II?</b></a>
<dd> Norbert Podhorszki wrote some 
<a href="http://wwwcsif.cs.ucdavis.edu/~pnorbert/howto/dev/howto-dev-loop.html#in_browser" target="_top">documentation about how to do loops in PN and DDF</a>.
<dt> <a name="multiportComposites"><b>4.5 I have a Composite with a Multiport, but it only sees one channel?</b></a>

<dd> The workaround is to right click on the inside relation and set
the width to 0, which means "Infer the width from the connections".

 <p>For example, if you have two Consts going to a multiport input on
a composite.  By default, the width of the inner relation inside the
composite is set to 1 Currently, in the Ptolemy II semantics, when a
multiport has width 2 on the outside and width 1 on the inside, the
second channel is dropped.

 <p>Arguably, the default width should always be 0, but we would need
a proof of soundness. I.e., that the inferred width is always unique.
We've looked into this in the past, but have not come up with a formal
proof.

<dt> <a name="powerpoint"><b>4.6 How do I put a model into a PowerPoint Deck?</b></a>
<dd>Screen grabs of an model work ok for PowerPoint, but use GIF or PNG, not JPEG.
Also, the image should not be scaled up after placing the image in PowerPoint;
instead enlarge the image in Vergil and then do the capture.

<dt> <a name="pdf"><b>4.7 How do I create a PDF of a model?</b></a>
<dd>To include an image of a model in a LaTeX file, print the Ptolemy
  models to PDF.
  There are at least two ways to create a PDF of a model: PDF print
  drivers or using Export -> Export PDF

  <h3>PDF Print Drivers</h3>
This requires that PDF printer drivers be installed on your machine.

<p>The size of the window matters since the print utility tries to fit
the result into the 8.5x11 page, and the result doesn't scale well
(line thickness don't scale proportionally).  Try to make all my
windows standard width before printing.  Also, reset the zoom before
printing.

<p> In Ptolemy II 8.0 and later, to print from the command line, run:
<pre>
       $PTII/bin/vergil -printPDF model.xml
</pre>
This method requires that you have PDF printer drivers installed on
  your machine.
  
  <h3>Export PDF</h3>
  The Ptolemy II development tree after Ptolemy II 8.0, can be
  configured to use a GPL'd PDF utility.  To enable this utility
  requires build Ptolemy II from source.
  <ul>
    <li> Download and build Ptolemy II.  See
  <a href="http://chess.eecs.berkeley.edu/ptexternal" target="_top">http://chess.eecs.berkeley.edu/ptexternal</a></li>
    <li> Download <code>iText.jar</code> from
    <a href="http://itextpdf.com" target="_top">http://itextpdf.com</a>
    and place <code>iText.jar</code> as
    <code>$PTII/ptolemy/vergil/misc/itext/iText.jar</code></li>
    <li>Rerun <code>configure</code> or add <code>iText.jar</code> to
  your classpath.</li>
    <li>Edit
  <code>ptII/ptolemy/vergil/basic/BasicGraphFrame.java</code>,
    search for "Export PDF" and uncomment the block of text that
    enables the interface to iText.</li>
    <li>Build and run.  The File -&gt; Export -&gt; menu should now
    have a Export PDF menu choice</li>
 </ul>

  <h3>Tweaking the PDF</h3>
  If need be, edit the results in Adobe Illustrator, including combining figures
    and putting borders on the grey boxes.

<p>Remove white space using Adobe Acrobat Pro by using
    Tools -&gt; Advanced Editing -&gt; Crop Tool,
    then double clicking in the interior of the crop region to
    bring up the Crop Pages dialog and hit OK.</p>

</dd>
<dt> <a name="img"><b>4.8 How do I create an image (GIF or PNG) of a model?</b></a></dt>
<dd> In the Ptolemy II development tree after Ptolemy II 8.0.1,
ptolemy/vergil/basic/ExportImage.java will create an image:

 <p> To save a gif:</p>
 <pre>
 java -classpath $PTII ptolemy.vergil.basic.ExportImage model.xml
 </pre>
 <p>or, to save a png:</p>
 <pre>
 java -classpath $PTII ptolemy.vergil.basic.ExportImage png model.xml
 </pre>
 <p>or, to run the model and then save a png:</p>
 <pre>
 java -classpath $PTII ptolemy.vergil.basic.ExportImage -run png model.xml
 </pre>

</dd>

<dt> <a name="multicore"><b>4.9 What about multicore?</b></a></dt>
<dd> If you use the Kahn Process Network (PN) model of computation, then each actor
  is a thread and, in principle, each thread will run on a separate
  core.

  <p>An alternative is to use the ThreadedComposite actor, see
  Edward A. Lee, "<a href="http://www.eecs.berkeley.edu/Pubs/TechRpts/2008/EECS-2008-151.html">ThreadedComposite: A Mechanism for Building
  Concurrent and Parallel Ptolemy II Models,</a>" EECS Department,
  University of California, Berkeley, Technical Report
  No. UCB/EECS-2008-151, December 7, 2008.</p>

  <p>See the Higher Order Component demos in
  <code>$PTII/ptolemy/actor/lib/hoc/demo</code> or
  <a
  href="http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIlatest/ptII8.0.beta/ptolemy/actor/lib/hoc/doc/"><code>http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIlatest/ptII8.0.beta/ptolemy/actor/lib/hoc/doc/</code></a>.
  See especially the Parallel Execution demo.
  
  
  See also <a href="#CodeGen"><b>5.9 What about Code Generation?</b></a>.

</dl>

<h2><a name="ptolemy II faq: extending"><b>5. Extending Ptolemy II</b></a></h2>
<dl>
<dt> <a name="Adding actors"><b>5.1 How do I add an actor?</b></a>
<dd> See the <code>Add Actor</code> link in
<a href="http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIlatest/ptII/doc/coding/index.htm" target="_top"><code>http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIlatest/ptII/doc/coding/</code></a>


<dt> <a name="AddingAConfiguration"><b>5.2 How do I add a configuration?</b></a>
<dd> When the <code>$PTII/bin/vergil</code> command is invoked, it reads
the Ptolemy II onfiguration from
<code>$PTII/ptolemy/configs/full/configuration.xml</code>.  Other configurations
may be read by passing command line options to <code>vergil</code>. For example,
<code>$PTII/bin/vergil -ptiny</code> invokes the "Ptiny" version of Ptolemy II,
which is a subset of the full set of actors and directors.  To see a complete
set of configurations, run <code>$PTII/bin/vergil -help</code>.
 <p>To add a configuration, start with a configuration that is close 
to what you want, copy the files from that configuration and modify them.
 <p>For example, we create "mypt" from the full configuration:
<ol>
<li> Copy the full configuration
<pre>
cd $PTII/ptolemy/configs
cp -r full mypt
</pre>

<li> Edit the <code>doc</code> attribute in
<code>mypt/configuration.xml</code>
and <code>mypt/intro.htm</code> and <code>mypt/welcomeWindow.htm</code>
to describe the configuration

<li> Update the <code>mypt/makefile</code>


<li> Run your configuration with
<code>vergil -mypt</code>


<li> <code>full/configuration.xml</code> and <code>mypt/configuration.xml</code>
merely read in <code>$PTII/ptolemy/configs/defaultConfiguration.xml</code>
See the other configurations for ways to build smaller configurations.
</ol>

 <p>See also <a href="#invoking Ptolemy II?"><b>4.1 How do I invoke Ptolemy II?</b>


<dt> <a name="AddAType"><b>5.3 How do I add a type?</b></a>
<dd> The Ptolemy Type system is covered in a chapter in "Volume 2:
Ptolemy II Software Architecture," which can be found via
<a href="http://ptolemy.eecs.berkeley.edu/ptolemyII/designdoc.htm" target="_top"><code>http://ptolemy.eecs.berkeley.edu/ptolemyII/designdoc.htm</code></a>

 <p>The Ptolemy Type system has a type lattice that is implemented
in classes in ptolemy.data.type.  A common misconception is 
that to add a type, one needs to add the new type to the type
lattice by editing ptolemy.data.type.BaseType.
However, you need only add a type to the type lattice if you want
to automatically convert your type to preexisting types (other
than UNKNOWN and GENERAL).  If you have a type class, then the type
system will check types for you.  For examples, see
<code>$PTII/ptolemy/data/type/test/TestToken.java</code> and
<code>$PTII/ptolemy/actor/lib/Security/KeyToken.java</code>.

	
<dt> <a name="PolymorphicActors"><b>5.4 What makes an actor domain polymorphic?</b></a>
<dd>
As for making actors domain polymorphic, the general rule we follow is:

<menu>
<li> return false in prefire() if there is insufficient input data to fire
<li> consume a token at each input if one is present in fire()
<li> produce outputs in fire()
<li> update the state of the actor in postfire(), not fire
</menu>


If more than one output token is produced on an output port or
consumed on an input port in fire(), then the input port should have a
tokenConsumptionRate parameter or the output port tokenProductionRate
Parameter indicating how many tokens are produced.  (To see sample
values, in the FIR actor, right click on the input or output port and
select configure).


 <p>If these rules are followed, then the actor will work in at least:

   DE, SDF, CT, PN, SR, CI

 <br>The most difficult of the rules to follow is updating the state only
in postfire(). This rule only matters in CT because CT may 
have to backtrack time

<dt> <a name="Interfacing to C/C++"><b>5.5 How do I interface to C/C++</b></a>
<dd>
Ptolemy II is written in Java, and Java has the Java Native Interface
(JNI), see
<a
  href="http://download.oracle.com/javase/6/docs/technotes/guides/jni/index.html"
  target="_top">Oracle's JNI page at <code>http://download.oracle.com/javase/6/docs/technotes/guides/jni/index.html</code></a>.

 <p>Vincent Arnould and others at Thales have implemented a prototype
of an interface between Ptolemy II actors and C code using the
Java Native Interface (JNI), see
<a
href="http://ptolemy.eecs.berkeley.edu/ptolemyII/ptII4.0/ptII/doc/codeDoc/jni/package-summary.html" target="_top"><code>http://ptolemy.eecs.berkeley.edu/ptolemyII/ptII4.0/ptII/doc/codeDoc/jni/package-summary.html</code></a>.
(This interface shipped in Ptolemy II 4.0, but not in Ptolemy II 5.0).

 <p>Zoltan Kemenczy and others at Research In Motion, Ltd. developed an
interface to Matlab that uses JNI, see
<a href="http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIlatest/ptII/ptolemy/matlab/matlab.htm" target="_top"><code>http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIlatest/ptII/ptolemy/matlab/matlab.htm</code></a>

 <p>Using JNI to interface to a C/C++ package on one platform is
fairly straightforward, but it can be difficult to configure the paths
that JNI in truly platform independent manner so that the same
code will work on multiple platforms.


<dt> <a name="Customizing the GUI"><b>5.6 How do I customize the GUI?</b></a>
<dd> 
Ptolemy II uses Diva to display block diagram editors.
 <br>Information about Diva can be found at
<a href="http://embedded.eecs.berkeley.edu/diva" target="_top"><code>http://embedded.eecs.berkeley.edu/diva</code></a>
Ptolemy II uses the notion of Tableaus to manage state for tools.
<a href="http://ptolemy.eecs.berkeley.edu/ptolemyII/designdoc.htm" target="_top">The Ptolemy II design document</a> has a chapter that discusses the UI
API.

 <p>The code that brings up the JVM Properties window is a simple example,
the code is at
<a href="http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIlatest/ptII/ptolemy/actor/gui/JVMTableau.java"><code>http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIlatest/ptII/ptolemy/actor/gui/JVMTableau.java</code></a>
 <p>

 <!-- We can't reliably display .xml in a browser -->
<code>$PTII/ptolemy/configs/vergilConfiguration.xml</code>
adds this feature with this line:
<pre>
       &lt;property name="JVM Properties" 
                  class="ptolemy.actor.gui.JVMTableau$Factory"/&gt;
</pre>

<p>The easiest way to add a button is to add an attribute that can be
  dragged in that has an action associated with it, see
  <a href="http://www.mail-archive.com/ptolemy-hackers@eecs.berkeley.edu/msg01134.html" target="_top"><code>http://www.mail-archive.com/ptolemy-hackers@eecs.berkeley.edu/msg01134.html</code></a>.</p>

<p>  In Ptolemy II 8.0 and later, the GUI has been extended so that
  buttons can be added to the toolbar, see the documentation for
  <a href="http://ptolemy.berkeley.edu/ptolemyII/ptIIlatest/ptII/doc/codeDoc/ptolemy/actor/gui/properties/package-summary.html" target="_top">ptolemy.actor.gui.properties</a>.</p>
  

<dt> <a name="MoML"><b>5.7 What file format are the models stored in?</b></a>
<dd> Ptolemy II stores models in an XML format called MoML.
The <a href="http://ptolemy.eecs.berkeley.edu/ptolemyII/designdoc.htm" target="_top">design doc</a> covers MoML in detail.
 <p>The beauty of using a human readable (though verbose) file
format is that we can use standard tools like XSLT and sed to 
transform models.

<p>The MoML dtd may be found at
  <a href="http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd" target="_top"><code>http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd</code></a></p>

<p> MoML files can have &lt;configure&gt ... &lt;configure&gt; tags in
 them that are not part of the dtd and thus a validating parser may
 fail.  One workaround is to remove the configure tags with a script
 before validating, see <code>$PTII/ptolemy/moml/test/removeconfigure</code>.

<p>To remove location information from a model, see <a href="http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIlatest/ptII/doc/codeDoc/ptolemy/moml/filter/RemoveGraphicalClasses.html" target="_top"><code>ptolemy/moml/filter/RemoveGraphicalClasses.java</code></a>.</p>

<p>MoML files do not contain information about port direction and
  such.  This is intentional because the actors are defined elsewhere in Java
  or in other MoML files.  These definitions may be overridden
  The easiest way to get all the information from a model is to parse
  the xml file and then traverse the model in Java and write out
  information of interest.  For example, see the
  <a href="http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIlatest/ptII/doc/codeDoc/ptolemy/kernel/CompositeEntity.html#deepEntityList()" target="_top"><code>ptolemy.kernel.CompositeEntity.deepEntityList()</code></a>
  and
    <a
  href="http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIlatest/ptII/doc/codeDoc/ptolemy/kernel/CompositeEntity.html#exportMoML(java.io.Writer, int, java.lang.String)" target="_top"><code>ptolemy.kernel.CompositeEntity.exportMoML()</code></a> methods.
  There may be some code at
 <a href="https://code.kepler-project.org/code/kepler/trunk/modules/moml2graphviz/" target="_top">https://code.kepler-project.org/code/kepler/trunk/modules/moml2graphviz/</a>
  that is of interest.</p>

  <p>In addition, MoML is registered as a MIME type, see
<a href="http://www.iana.org/assignments/media-types/model/vnd.moml+xml"><code>http://www.iana.org/assignments/media-types/model/vnd.moml+xml</code></a></p>

<dt> <a name="Scripting"><b>5.8 Is there a scripting interface to Ptolemy II ?</b></a>

<dd> The PythonScript actor includes and interface to
<a href="http://www.jython.org/#in_browser" target="_top">Jython</a>,
a Java implementation of Python.  The PythonScript actor allows
the user to define an actor on the fly by defining the <code>fire()</code>
and other methods in Python.  Using an interpreted language in this context instead of defining actors in Java means that we need not recompile and restart
Ptolemy II to make a change to an actor.  The tradeoff is that 
a PythonScript actor will run more slowly than a similar actor implemented in 
Java.
 <br>For details, see
<a href="http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIlatest/ptII/doc/codeDoc/ptolemy/actor/lib/python/PythonScript.html" target="_top"><code>http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIlatest/ptII/doc/codeDoc/ptolemy/actor/lib/python/PythonScript.html</code></a>

 <p>The Ptolemy II test suite uses Jacl, a Java implementation of Tcl
as a scripting language.  With Jacl, we can build and run models
using an interpreted scripting environment without compilation
and avoiding the usual edit/compile/run loop.

 <br>For details, see the Testing link in 
<a href="http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIlatest/ptII/doc/coding/index.htm" target="_top"><code>http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIlatest/ptII/doc/coding/</code></a>
	



<dt> <a name="CodeGen"><b>5.9 What about Code Generation?</b></a>

<dd> Certain versions of Ptolemy II before Ptolemy 8.0 included the Copernicus
  code generator, which is described below.  Portions of the Copernicus code generator
  was removed between Ptolemy II 7.0.1 and Ptolemy II 8.0.beta because
  it stopped passing its tests and extending it to support use of Java Generics
  in the Ptolemy kernel was seen as being a large task.  The Copernicus
  code generator is no longer being developed, its features are
  described below.

 <p><b>Copernicus</b>
  <br>The Copernicus Ptolemy II code generator developed by Stephen Neuendorffer
read non-hierarchical SDF models and generated Java .class files.
We call this the <I>deep</I> Copernicus code generator.
The code that is produced by deep codegen uses very little of the
Ptolemy infrastructure.  The ptolemy.math package is used sometimes.
The Copernicus deep code generator was removed between Ptolemy II 7.0.1
    and Ptolemy II 8.0.beta.

 <p>In addition, Copernicus can read in models from other domains
and generate a .class file that uses much more of the Ptolemy infrastructure.
We call this the <I>shallow</I> Copernicus code generator.   The
shallow Copernicus code generator is present in Ptolemy II 8.0 and later.
    
<pre>
    $PTII/bin/copernicus -codeGenerator shallow ~/ptII/ptolemy/actor/lib/test/auto/IIR.xml
</pre>
A class file will be generated as
    <code>ptolemy/copernicus/shallow/cg/IIR/IIR/CGIIR.class</code>
To see the Java code, do:
<pre>
cd $PTII/ptolemy/copernicus/shallow/cg/IIR
make jodeDecompile
</pre>
    
 <p>Copernicus can also read in models and generate applets.
 <br>To generate an applet within the Ptolemy II tree, try
<pre>
cd $PTII
make install >& install.out
cd $PTII/ptolemy/domains/sdf/demo
mkdir ButterflyTest
cp Butterfly/Butterfly.xml ButterflyTest/ButterFlyTest.xml
cd ButterFlyTest
$PTII/bin/copernicus -codeGenerator applet -targetPath ptolemy/domains/sdf/demo/ButterflyTest ButterflyTest.xml
</pre>

 <p>The Copernicus deep and shallow codegenerators can use treeshaking
to run the model, make a list of the classes that are used and
create a jar file that contains only those class files.  We can also
use the Jode obfuscator to reduce jar file size.  We've had limited
success using the deep and shallow code generators with the GNU gcj
compiler to create small standalone binaries.

 <p>Another Copernicus effort is the C code generator,
which was created by Ankush Varma and
Professor Shuvra S. Bhattacharyya of the University of Maryland,
The Copernicus C code generator generates C files for certain SDF
models.  This C code generator is still very experimental and
    was removed between Ptolemy II 7.0.1 and 8.0.beta.

 <p>For more information about the Copernicus code generator, see
<a href="http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIlatest/ptII/doc/codegen.htm" target="_top"><code>http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIlatest/ptII/doc/codegen.htm</code></a>
 <br>and
 <br>Stephen Neuendorffer, <a href="http://ptolemy.eecs.berkeley.edu/publications/papers/04/StevesThesis"><i>Actor-Oriented Metaprogramming</i></a>, PhD Thesis, University of California, Berkeley, December 21, 2004.
 <br>and
 <br>Ankush Varma, <a href="http://ptolemy.eecs.berkeley.edu/publications/papers/03/java-2-C">Retargetable Optimizing Java-to-C Compiler for Embedded Systems</a>, Master's Report, Department of Electrical and Computer Engineering, University of Maryland, College Park, MD, 2003.


 <p><b>codegen</b>
 <br>As of Ptolemy II 4.0, no further development is occuring in 
Copernicus.  However, the Ptolemy group is developing a 
Ptolemy Classic style code generator that uses template files
to build C files.  This code generator first shipped in
Ptolemy II 6.0 in <code>ptolemy/codegen</code> and we refer
to it as the "codegen" code generator.

    <p>The codegen template effort synthesizes C code from certain
    Ptolemy II models (synchronous dataflow and heterochronous dataflow
    are functional, SR, and DE are being planned). In this
    technology, we define "adapter" classes associated with Ptolemy II
    actors that define the C code implementation for the actor.
    The code generator functions (as in Giotto) to coordinate the
    components.  This effort is focused on efficiency. Our objective
    is to generate zero-overhead C code. 
    We have simple demo systems and a limited actor library.</p>

    <p>We've had various efforts in the codegen code generator to
    generate C code for PN models and to generate VHDL code, but
    nothing has been completed.</p>

    <p>For more information about codegen, see
    <br>Chapter 7 of
C. Brooks, E.A. Lee, X. Liu, S. Neuendorffer, Y. Zhao, H. Zheng (eds.),
"<a href="http://www.eecs.berkeley.edu/Pubs/TechRpts/2008/EECS-2008-29.html#in_browser" target="_top">Heterogeneous Concurrent Modeling and Design in Java (Volume 2: Ptolemy II Software Architecture),</a>" 
EECS Department, University of California, Berkeley, UCB/EECS-2008-29, April 1, 2008. 
    (HTML version of Chapter 7: <a href="http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIlatest/ptII/doc/codegen.htm"><code>$PTII/doc/codegen.htm</code></a>)

    <br>Gang Zhou, Man-Kit Leung, Edward A. Lee. <a href="http://chess.eecs.berkeley.edu/pubs/251.html@in_browser" target="_top">A Code Generation Framework for Actor-Oriented Models with Partial Evaluation</a>, Proceedings of International Conference on Embedded Software and Systems 2007, LNCS 4523, Y.-H. Lee et al. (ed.), 786-799, May, 2007.
    <br>Gang Zhou. <a href="http://chess.eecs.berkeley.edu/pubs/774.html#in_browser" target="_top"><i>Partial Evaluation for Optimized Compilation of Actor-Oriented Models</i></a>, PhD thesis,  University of
California, Berkeley, May, 2008.
    <br>Jackie Man-Kit Leung, Terry Filiba, Vinayak Nagpal. <a href="http://chess.eecs.berkeley.edu/pubs/778.html#in_browser" target="_top"><i>VHDL Code Generation in the Ptolemy II Environment</i></a>, Technical report,  EECS Department, University of California, Berkeley, UCB/EECS-2008-140, October, 2010.

<p><b>viptos</b>
 <br> We had a project to produce NesC/TinyOS code from
   Ptolemy II models. We created a tool based on Ptolemy
   called 
<a href="http://ptolemy.eecs.berkeley.edu/viptos" target="_top">VIPTOS</a>
   where designers jointly design code for sensor
   network "motes" and use the Ptolemy II wireless systems modeling
   environment (called 
<a href="http://ptolemy.eecs.berkeley.edu/visualsense" target="_top">VisualSense</a>)
   to create models of the wireless
   networking environment for the motes.

<p><b>cg</b> 
 <br> Our currently active code generation effort may be found in the
    development tree in <code>ptolemy/cg</code>, we call it the "cg"
    code generator.  We took the lessons learned from codegen
    and applied them to cg.  In particular, cg more easily supports
    multiple backends with less code duplication.  The cg code
    generator is under active development, we are working on code
    generation for large systems.   For details about cg, download
    the Ptolemy II development tree (see 
    <a href="http://chess.eecs.berkeley.edu/ptexternal"target="_top"><code>http://chess.eecs.berkeley.edu/ptexternal</code></a>) 
    and then see <code>$PTII/ptolemy/cg/README.html</code>.</p>
 
    <p>The cg code generator works best generating Java code for SDF
    models.</p>

    <p>The Java cg code generator can generate code for models
    that use actors for which we have no code generation templates.
    The way this works is the actor is wrapped in an opaque
    TypedCompositeActor and calls are made to the Ptolemy runtime.
    This is slower than a pure code generation solution, where all
    the actors have code generation templates, but it allows easy
    access to user defined actors.</p>

    <p>The cg code generator also supports models that have actors
    that have method bodies written in C.  See the
    <a href="http://chess.eecs.berkeley.edu/ptexternal/src/ptII/doc/codeDoc/ptolemy/actor/lib/jni/EmbeddedCActor.html#in_browser" target="_top">EmbeddedCodeActor.</p>

    <p>Generating C code is possible as well, it just requires
    porting the templates that we have for Java actors.</p>

    <p>For information about the cg code generator, see
    <br>Stavros Tripakis, Dai Nguyen Bui, Marc Geilen, Bert Rodiers,
Edward A. Lee. <a href="http://chess.eecs.berkeley.edu/pubs/668.html#in_html" target="_top"><i>Compositionality in Synchronous Data Flow: Modular Code Generation from Hierarchical SDF Graphs</i></a>, Technical report,  UC Berkeley, UCB/EECS-2010-52, May, 2010.
    <br>Martin Schoeberl, Christopher Brooks, Edward A. Lee. <a href="http://chess.eecs.berkeley.edu/pubs/671.html#in_browser" target="_top">Code Generation for Embedded Java with Ptolemy</a>,
Proceedings of the 8th IFIP Workshop on Software
Technologies for Future Embedded and Ubiquitous Systems
(SEUS 2010), October, 2010.


<p><b>cal</b> 
<p> In addition, Xilinx research labs has an ongoing effort to synthesize FPGA
    configurations from Ptolemy II models. They use actor libraries
    defined in
    <a href="http://embedded.eecs.berkeley.edu/caltrop/" target="_top">Cal</a>,
    our experimental actor definition language.
    We do not know what (if any) plans they have for releasing
    this capability.

<dt> <a name="Contributions"><b>5.10 Does the Ptolemy project take software contributions?</b></a>
<dd> Yes, the Ptolemy project has a long history of folding in software
contributions from off site developers.

 <p> The most critical issue is that it is easiest if the copyright of
any contributed code uses the same wording as the standard Ptolemy II
copyright.  It is best if the Regents of the University of California
retain the copyright, but it is acceptable if the someone else retains
the copyright.

 <p>The second most critical issue is that the code follow the Ptolemy
coding convention.  Since we consider software releases a form of
publication, we expect code to be readable, which means that comments
have complete sentences, identifiers are complete words with embedded
capitalization and the source code has been spell checked.  For
details see the Ptolemy II coding style guide in
<a href="http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIlatest/ptII/doc/coding/style.htm" target="_top"><code>$PTII/ptolemy/doc/coding/style.htm</code></a>
and in the first few chapters of the
<a href="http://ptolemy.eecs.berkeley.edu/ptolemyII/designdoc.htm" target="_top">Ptolemy II Design Document</a>.

 <p>It is best if contributed code has a few small, concise examples
illustrating its use, and includes models that can be run as part of
the test suite.  These models usually reside in a
<code>test/auto/</code> directory and do not use the an graphical
actors so that they can be run as part of the nightly build.

<p>If you have code that you would like to contribute, please email
ptolemy at eecs berkeley edu
with a description of your code.

</dl>

</menu>

<p><font size="2" color="#cc0000">Last Updated: $Date$</font>
<!--#include virtual="/ssi/bottom.htm" -->
</body>
</html>
