<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<meta name="GENERATOR" content="Quadralay WebWorks Publisher Standard Edition 6.0.6">
<meta name="TEMPLATEBASE" content="Portable HTML Standard Edition">
<meta name="LASTUPDATED" content="03/31/08 13:40:44">
<link href="default.css" rel="stylesheet" type="text/css">
<title>3.11 Folding</title>
</head>

<body link="#3366CC" vlink="#9999CC" text="#000000" alink="#0000CC" bgcolor="#FFFFFF"


<table width="331" border="0" align="right" cellpadding="0" cellspacing="0">
  <tr>
    <td><a href="expressions.htm"><img src="img/navtoc.gif" width="84" height="23"
    border="0" alt="TOC"> </a></td>
    <td><a href="expressionsa9.htm"><img src="img/navprev.gif" width="81" height="23"
    border="0" alt="PREV"> </a></td>
    <td><a href="expressionsa11.htm"><img src="img/navnext.gif" width="81" height="23"
    border="0" alt="NEXT"> </a></td>

    
  </tr>
</table>




<blockquote>
<h2>
  3.11   Folding
</h2>


Ptolemy II supports a fold function, which can be used to program a loop in an expression.<br>

<p>
The fold function is invoked in the form of fold(<i>f</i>, <i>x</i>, <i>l</i>), where <i>f</i> is a function itself, <i>x</i> is the starting value, and <i>l</i> is a collection of values.
<ul>
  <li><p><i>f</i> must take two arguments. <i>x</i> must be valid as the first argument, and any element in collection <i>l</i> must be valid as the second argument. Moreover, the return value of <i>f</i> must also be valid as the first argument.
  <li><p><i>x</i> is the starting value used to invoke <i>f</i> the first time by the fold function. It can be in any type supported by Ptolemy II.
  <li><p><i>l</i> must be either an array in the form of "{1, 2, 3, ...}," or a Java collection obtained from a Java method call such as "C.output.connectedPortList()" (assuming C is a Const actor here).
</ul>

<p>
The pseudocode for computing the result of the fold function fold(<i>f</i>, <i>x</i>, <i>l</i>) is as follows:
<ol>
  <li><p>let <i>y</i> = <i>x</i>
  <li><p>for each element <i>e</i> in <i>l</i>
  <li><p>&nbsp;&nbsp;&nbsp;&nbsp;let <i>y</i> = <i>f</i>(<i>y</i>, <i>e</i>)
  <li><p>return <i>y</i>
</ol>

<p>
Examples:
<ol>
  <li><p><tt>fold(<br>
      &nbsp;&nbsp;&nbsp;&nbsp;function(x : int, e : int) x + 1,<br>
      &nbsp;&nbsp;&nbsp;&nbsp;0, {1, 2, 3}<br>
      )</tt><br>
      This computes the length of array {1, 2, 3}. The result is 3, which is equal to {1, 2, 3}.length(). Function <i>f</i> here is defined with anonymous function <tt>function(x : int, e : int) x + 1</tt>. Given <tt>x</tt> and arbitrary element <tt>e</tt>, it returns <tt>x + 1</tt>. It is invoked the number of times equal to the number of elements in array {1, 2, 3}. Therefore, <tt>x</tt> is increased 3 times from the starting value 0.
  <li><p><tt>fold(<br>
      &nbsp;&nbsp;&nbsp;&nbsp;function(x : int, e : int) x + e,<br>
      &nbsp;&nbsp;&nbsp;&nbsp;0, {1, 2, 3}<br>
      )</tt><br>
      This computes the sum of all elements in array {1, 2, 3}.
  <li><p><tt>fold(<br>
      &nbsp;&nbsp;&nbsp;&nbsp;function(x : arrayType(int), e : int) e % 2 == 0 ? x : x.append({e}),<br>
      &nbsp;&nbsp;&nbsp;&nbsp;{}, {1, 2, 3, 4, 5}<br>
      )</tt><br>
      This computes a subarray of array {1, 2, 3, 4, 5} that contains only odd numbers. The result is {1, 3, 5}.
  <li><p>Let <tt>C</tt> be an actor.<br>
      <tt>fold(<br>
      &nbsp;&nbsp;&nbsp;&nbsp;function(list : arrayType(string), port : object("ptolemy.kernel.Port"))<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;port.connectedPortList().isEmpty() ? list.append({port}) : list,<br>
      &nbsp;&nbsp;&nbsp;&nbsp;{}, C.portList()<br>
      )</tt><br>
      This returns a list of <tt>C</tt>'s ports that are not connected to any other port (with <tt>connectedPortList()</tt> being empty). Each port in the returned list is encapsulated in an ObjectToken.
</ol>

</body>
</html>
