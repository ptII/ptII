<!-- $Id$ -->
<html>
<head>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<title>Ptolemy II 8.0.beta Release Notes</title>
<link href="default.css" rel="stylesheet" type="text/css">
</head>
<body bgcolor="#faf0e6">
<h1>Ptolemy II 8.0.beta Release Notes</h1>

Ptolemy II is a set of Java packages supporting heterogeneous,
concurrent modeling and design.  Its <code>kernel</code> package
supports clustered hierarchical graphs, which are collections of
<I>entities</I> and <I>relations</I> between those entities.  Its
<code>actor</code> package extends the kernel so that entities have
functionality and can communicate via the relations.  Its
<I>domains</I> extend the actor package by imposing <I>models of
computation</I> on the interaction between entities.  Examples of
models of computation include discrete-event systems, dataflow,
process networks, synchronous/reactive systems, and communicating
sequential processes.

 <p>Ptolemy II includes a number of support packages, such as 

 <br><code>data</code>, providing a type system, data encapsulation and an
 expression parser,

 <br><code>plot</code>, providing visual display of data,

 <br><code>math</code>, providing matrix and vector math and signal
processing functions, and

 <br><code>graph</code>, providing graph-theoretic manipulations.


 <p>The three volumes of the Ptolemy II Design Document
describes the Ptolemy II design and
the implementation of the Java classes.
<ul>
 <li><a href="design/ptIIdesign1-intro.pdf">Volume 1: Introduction to Ptolemy II</a> (Local PDF)
 <li><a href="design/ptIIdesign2-software.pdf">Volume 2: Ptolemy II Software Architecture</a> (Local PDF)
 <li><a href="design/ptIIdesign3-domains.pdf">Volume 3: Ptolemy II Domains</a> (Local PDF)
</ul>

 <p>The
"<a href="design/usingVergil/index.htm">Using Vergil</a>"
describes how to use Vergil.


<h2>Complete List of Domains in Ptolemy II</h2>
 <!-- We include this list here since we will be posting the release notes
to the newsgroups etc.  See also main.htm
 -->
<ul>
<li> <a href="../ptolemy/domains/ci/doc/body.htm" target="body">CI</a>:
	 component interaction (experimental),
<li> <a href="../ptolemy/domains/csp/doc/body.htm" target="body">CSP</a>:
	 communicating sequential processes,
<li> <a href="../ptolemy/domains/ct/doc/body.htm" target="body">CT</a>:
	continuous-time modeling,
<li> <a href="../ptolemy/domains/continuous/doc/body.htm" target="body">Continuos</a>:
	continuous-time modeling (experimental),
<li> <a href="../ptolemy/domains/de/doc/body.htm" target="body">DE</a>:
	discrete-event modeling,
<li> <a href="../ptolemy/domains/dde/doc/body.htm" target="body">DDE</a>:
	distributed discrete events (experimental),
<li> <a href="../ptolemy/domains/ddf/doc/body.htm" target="body">DDF</a>:
	dynamic dataflow
<li> <a href="../ptolemy/domains/dt/doc/body.htm" target="body">DT</a>:
	discrete time,
<li> <a href="../ptolemy/domains/fsm/doc/body.htm" target="body">FSM</a>:
	finite state machines,
<li> <a href="../ptolemy/domains/giotto/doc/body.htm" target="body">Giotto</a>:
	periodic time-driven (experimental),
<li> <a href="../ptolemy/domains/gr/doc/body.htm" target="body">GR</a>:
	3-D graphics (experimental),
 <!-- petrinet ??-->
<li> <a href="../ptolemy/domains/hdf/doc/body.htm" target="body">HDF</a>:
	heterochronous dataflow
<li> <a href="../ptolemy/domains/pn/doc/body.htm" target="body">PN</a>:
	process networks,
<li> <a href="../ptolemy/domains/psdf/doc/body.htm" target="body">PSDF</a>:
	parameterized synchronous dataflow (experimental),
<li> <a href="../ptolemy/domains/rendezvous/doc/body.htm" target="body">Rendezvous</a>:
	rendezvous (experimental),
<li> <a href="../ptolemy/domains/sdf/doc/body.htm" target="body">SDF</a>:
	synchronous dataflow,
<li> <a href="../ptolemy/domains/sr/doc/body.htm" target="body">SR</a>:
	synchronous/reactive,
<li> <a href="../ptolemy/domains/tm/doc/body.htm" target="body">TM</a>:
	timed multitasking (experimental), and
<li> <a href="../ptolemy/domains/wireless/doc/body.htm" target="body">Wireless</a>:
	 wireless (experimental).

</ul>

<h2>Platforms</h2>

The core of Ptolemy II 8.0.beta is 100% Java, so it should work on any
platform that has JDK 1.5 or later.

 <p>We developed Ptolemy II 8.0.beta under Solaris 10 and Windows XP
and with JDK1.5.0.0_14

<p>Ptolemy II 5.0 will not compile under Java 1.3 because we use the
java.lang.URI class, which is present only in Java 1.4 and later.
JDK 1.5 or later is required so that these packages can use generics:
backtrack, ptalon and others.


 <p>Ptolemy II has been compiled and run
under IBM JDK 1.6.0.  There are the following limitations
under IBM JDK 1.6.0
<menu>
<li> The Copernicus code generator does not work.
<li> Caltrop does not work.
<li> The IBM JDK seems to return directory contents in a different
order than the Sun JDK.  Thus actor.lib.io.DirectoryListing
might return elements in a different order.
</menu>




<!--whatsnew-->
<p>Contents:
<ul>
<li> <a href="#highlights">Highlights</a>
<li> <a href="#demos">New demonstrations</a>
<li> <a href="#other">Other Key New Capabilities</a>
<li> <a href="#libraries">New and Enhanced Actor Libraries</a>
<li> <a href="#features">Additional features</a>
<li> <a href="#bugs">Bug fixes</a>
</ul>

<h2><a name="highlights">Ptolemy II 7.0.bet Highlights</a></h2>

<h3><a name="sdfCodegen">SDF Code Generation</a></h3>

The SDF Template based C code generator (Codegen) generates code for
hierarchical Synchronous Dataflow (SDF), Finite State Machine (FSM) and
Heterochronous Dataflow Domain (HDF) models.

<p>Codegen has the following new features:
<ul> 
<li><a href="codeDoc/ptolemy/actor/lib/jni/EmbeddedCActor.html">EmbeddedCActor</a> - Allows arbitrary C code to be embedded in a Java model.  The entire Java model can then be converted to C code and the code within the EmbeddedCActor will be used.
<li>Enhanced polymorphic type system
<li>Support for invoking the Java plotter from a C version of a model
<li><i>and many more<i>
</ul>

<p><a href="../../../doc/codegen.htm">Code Generator Documentation</a>

<h4>References</h4>
<ul>
<li> G. Zhou, M.-K. Leung, and E. A. Lee, "<a href="http://ptolemy.eecs.berkeley.edu/publications/papers/07/codegen/">A Code Generation Framework for Actor-Oriented Models with Partial Evaluation</a>," <i>Proceedings of International Conference on Embedded Software and Systems 2007,</i> LNCS Vol. 4523, Daegu, South Korea, May 14-16, 2007, pp. 786-799.
</ul>

<h4>Codegen Demonstrations</h4>
<i>Some of the code generation demos might not work under Web Start because
Web Start uses a JRE, not a JDK.</i>

 <p>Primary Codegen Developers: Gang Zhou, Man-kit Leung.
 <p>Codegen Contributors: Christopher Brooks, Teale Fristoe, Edward A. Lee, Ye Zhou

<!-- a little space -->
<p> &nbsp;

<h3>Ptalon</h3>

<p>Actor-oriented design is a common design strategy in embedded
system design, where actors are concurrent components which
communicate through ports by sending signals to one another. Such
systems are frequently modeled with block diagrams, where the blocks
represent systems and lines or arrows between blocks represent
signals. Examples include Simulink, LabView, and VHDL/Verilog.

<p>A common problem in such environments is managing complexity,
particularly when the designs become large. Most actor-oriented design
environments allow hierarchy, or systems (blocks) which are composed
of other systems (blocks). To take this a step further, we are
developing the Ptalon programming language, which allows users to
parameterize components with other components.

<p>We have developed a preliminary interpreter for the Ptalon language in
the context of Ptolemy II, a general-purpose design environment for
actor-oriented systems. We have also developed a mathematical
framework for such languages, to help aid our understanding . We are
currently investigating the resource management issues inherent in
supporting large block-diagram models.

<h4>References</h4>
<ul>
<li> E. A. Lee, "<a href="http://ptolemy.eecs.berkeley.edu/publications/papers/03/MontereyWorkshopLee/#in_browser" target="_top">Model-driven Development--From Object-Oriented Design to Actor-Oriented Design</a>," <i>Workshop on Software Engineering for Embedded Systems: From Requirements to Implementation (a.k.a. The Monterey Workshop),</i> Chicago, IL, 2003.

<li> A. Cataldo, E. Cheong, T. H. Feng, E. A. Lee, and A. Mihal, "<a href="http://www.eecs.berkeley.edu/Pubs/TechRpts/2006/EECS-2006-48.html#in_browser" target="_top">A Formalism for Higher-Order Composition Languages that Satisfies the Church-Rosser Property</a>," UC Berkeley EECS Technical Report No. UCB/EECS-2006-48, 2006.

<li> J. A. Cataldo, "<a href="http://www.eecs.berkeley.edu/Pubs/TechRpts/2006/EECS-2006-189.html#in_browser" target="_top">The Power of Higher-Order Composition Languages in System Design</a>," EECS Department, UC Berkeley, Technical Report No. UCB/EECS-2006-189, December 18, 2006.

<li> E. Cheong, "<a href="http://www.eecs.berkeley.edu/Pubs/TechRpts/2007/EECS-2007-112.html#in_browser" target="_top">Actor-Oriented Programming for Wireless Sensor Networks</a>," EECS Department, University of California, Berkeley Technical Report No. UCB/EECS-2007-112, August 30, 2007
</ul>

<h4>Ptalon Demonstrations</h4>
  <ul>
  <li> <a href="../ptolemy/actor/ptalon/demo/CruiseControl/CruiseControl.htm">CruiseControl</a>
  <li> <a href="../ptolemy/actor/ptalon/demo/EightChannelFFT/EightChannelFFT.htm">EightChannelFFT</a>
  <li> <a href="../ptolemy/actor/ptalon/demo/GameOfLife/GameOfLife.htm">GameOfLife</a>
  <li> <a href="../ptolemy/actor/ptalon/demo/MapReduce/MapReduce.htm">MapReduce</a>
  <li> <a href="../ptolemy/actor/ptalon/demo/Unicycle/Unicycle.htm">Unicycle</a>
  <li> <a href="../ptolemy/actor/ptalon/demo/SmallWorld/ParameterSweep-SmallWorld-fsm.htm">ParameterSweep-SmallWorld-fsm</a>
  <li> <a href="../ptolemy/actor/ptalon/demo/SmallWorld/ParameterSweep-SmallWorld-sdf.htm">ParameterSweep-SmallWorld-sdf</a>
  <li> <a href="../ptolemy/actor/ptalon/demo/SmallWorld/SmallWorld-MultiInstanceComposite.htm">SmallWorld-MultiInstanceComposite</a>
  <li> <a href="../ptolemy/actor/ptalon/demo/SmallWorld/SmallWorld-PtalonActor.htm">SmallWorld-PtalonActor</a>
  </ul>

<h3>Backtracking</h3>
A bcktracking facility enables the system to restore its old
state. It has many applications in practice, and is especially
important to high-performance distributed computation.
		</p>
<p>In developing this sub-project, we highlight the
following (increasing) list of criteria:
			</p>
<ul>

<li><em>Performance</em>. The highest priority is awarded to the
performance of the resulting system (the Ptolemy II system with
backtracking support built in), as compared to the original
system. Novel approaches are employed mainly to improve performance,
with moderate complexity added.
</li>

<li><em>Automatic transformation</em>. Transformation from the original
system to the backtracking-enabled system must be automated as much as
possible. Due to the size of the existing system, it is not realistic
to require a manual recoding in most of its sources. Moreover, coding
the backtracking sub-system by hand makes it hard to debug and evolve
over time./li>
<li><em>Clean interface to other parts</em>. The
backtracking sub-system must reveal a small but powerful
interface to the other parts in the system. It provides
the users with functions such as creating checkpoints,
undoing multiple language-level operations by backtracking
to a previous checkpoint, and even redoing those
operations to achieve some form of laziness.
</ul>

 <p>Primary Developer: Thomas Huining Feng
<h4>Backtracking Demonstrations</h4>
 <ul>
   <li> <a href="../ptolemy/backtrack/demo/PrimeTest/PrimeTest.htm">Prime Test</a> </li>
   <li> <a href="../ptolemy/backtrack/demo/RampRollback/RampRollback.htm">Ramp Rollback</a> </li>
   <li> <a href="../ptolemy/backtrack/demo/TrialModule/TrialModule.htm">Trial Module</a> </li>
 </ul>



<h3><a name="sdfCodegen">SDF Code Generation</a></h3>

The SDF Template based C code generator (Codegen) generates code for
hierarchical Synchronous Dataflow (SDF), Finite State Machine (FSM) and
Heterochronous Dataflow Domain (HDF) models.

<p>Codegen has the following new features:
<ul> 
<li><a href="codeDoc/ptolemy/actor/lib/jni/EmbeddedCActor.html">EmbeddedCActor</a> - Allows arbitrary C code to be embedded in a Java model.  The entire Java model can then be converted to C code and the code within the EmbeddedCActor will be used.
<li>Enhanced polymorphic type system
<li>Support for invoking the Java plotter from a C version of a model
<li><i>and many more</i>
</ul>

<i>Codegen will not work in applets, it requires gcc and access
to the local file system</i>

<p><a href="codegen.htm">Codegen chapter from the User Guide</a>

 <p>Primary Developers: Gang Zhou, Man-kit Leung.
 <p>Contributors: Christopher Brooks, Teale Fristoe, Edward A. Lee, Ye Zhou


<h3>The
<a href="../ptolemy/domains/continuous/doc/main.htm">Continuous domain</a></h3>

<P>
The Continuous Domain is a redesign of the Continuous Time (CT) domain with
a rigorous semantics documented in the following papers:

<ul>
<li> Edward A. Lee, Haiyang Zheng, "<a href="http://ptolemy.eecs.berkeley.edu/publications/papers/07/unifying/index.htm#in_browse" target="_top">Leveraging Synchronous Language Principles for Heterogeneous Modeling and Design of Embedded Systems</a>," EMSOFT,  September 30 - October 2, 2007, Salzburg, Austria.

<li> Haiyang Zheng, "<a href="http://www.eecs.berkeley.edu/Pubs/TechRpts/2007/EECS-2007-68.html#in_browser" target="_top">Operational Semantics of Hybrid Systems</a>," Ph.D. Dissertation, EECS Department, University of California, Berkeley, Technical Report No. UCB/EECS-2007-68, May 18, 2007.

<li> Edward A. Lee and Haiyang Zheng, "<a href="http://ptolemy.eecs.berkeley.edu/publications/papers/05/OperationalSemantics" target="_top">Operational Semantics of Hybrid Systems</a>," Invited paper in <i>Proceedings of Hybrid Systems:  Computation and Control</i> (HSCC) LNCS 3414, Zurich, Switzerland, March 9-11, 2005, pp.25-53.
</ul>

The continuous domain models systems with continuous dynamics, including
for example analog circuits and mechanical systems, but also
cleanly supports discrete events, modal behaviors, and signals that
mix continuous-time behaviors with discrete events.
Models for continuous dynamics are equivalent to linear or nonlinear
integral equations. A sophisticated numerical solver for these equations
is integrated with the director.
The clean semantics of the Continuous domain enables its integration
in hierarchical heterogeneous models that use the Synchronous/Reactive (SR)
and Discrete Event (DE) domains. Arbitrary hierarchical mixtures of these
domains are supported, although if SR is at the top level, then the
<i>period</i> parameter of the director must be used so that time advances.
Domain interactions are documented in the following paper:

<ul>
<li> A. Goderis, C. Brooks, I. Altintas, E. A. Lee, and C. Goble, "<a href="http://www.eecs.berkeley.edu/Pubs/TechRpts/2007/EECS-2007-139.html#in_browser" target="_top">Heterogeneous Composition of Models of Computation</a>," EECS Department, University of California, Berkeley, Tech. Rep. UCB/EECS-2007-139, Nov. 2007.
</ul>

 <p>Primary Developers: Haiyang Zheng, Edward A. Lee


<!-- a little space -->
<p> &nbsp;
<h3><a name="graphTransformation">Graph Transformation</h3>

<p>The graph transformation facility provides a framework for the
analysis and transformation of actor models using graph transformation
techniques.

<p>The design of large-scale models poses a number of challenges. As
the size of the models increases to thousands of actors or hundreds of
thousands of actors, analysis and consistent modification on the
models become extremely hard. Furthermore, to maximize component
reuse, a systematic approach is needed for the specification and
maintenance of common patterns in the models and the transformation of
those patterns.

<p>The model transformation framework to be developed in this project
aims to support the flexible specification of patterns and
replacements by means of rules in graph grammar. An intuitive
graphical user interface will be built. For novice users, a set of
common transformations will be included in a library to facilitate
their common tasks.

<p>The transformations are models in their own right. They can be
embedded in larger models hierarchically. Heterogeneous models of
computation can be used to control the application of individual
"atomic" transformations. This makes it easy to create sophisticated
transformations by composing simple ones in a manageable and
disciplined way. The sophisticated transformations will also take
advantage of the concurrency inherent in those models of computation.

<p>Model transformation can be applied as an optimization of modal
models. These are hierarchical state machines with refinements in
their states, which are sub-models to be executed when those states
are active. The current implementation includes the complete
description of each refinement in the model description, even though
refinements of the states in a state machine tend to have large
commonality. With the transformation technique, only one refinement
needs to be stored completely. The others are obtained by
transformations performed on the stored refinement. This eliminates
redundancy and eases the job of modifying multiple refinements
consistently.

<p>Other applications of the model transformation technique include
recognizing common design patterns in the models in a static analysis,
replacing exiting design patterns with more efficient ones, and
reusing design patterns by incorporating them into new models.

<h4>References</h4>
<ul>
<li>Thomas Huining Feng, Miriam Zia, and Hans Vangheluwe, "<a href="http://www.berkeley.edu/~tfeng/papers/fzv07scsc.pdf" target="_top">Multi-Formalism Modelling and Model Transformation for the Design of Reactive Systems</a>," In <a href="http://www.sce.carleton.ca/faculty/wainer/SCSC07/">2007 Summer Computer Simulation Conference (SCSC 2007)</a>, San Diego, CA, USA, Jul. 2007.
</ul>

<h4>Graph Transformation Demonstrations</h4>

<i> The Graph Transformation facility requires WebStart or a full installation,
it will not work in an applet</i>

<p>Primary Graph Transformation Developer: Thomas Huining Feng


<h2><a name="demos">New demonstrations</a></h2>

<h3>Continuous Time (CT)</h3>
<ul>
<li> <a href="../ptolemy/domains/ct/demo/Starmac/Starmac.htm">Starmac</a>
</ul>

<h3>Discrete Event (DE)</h3>
<ul>
<li> <a href="../ptolemy/domains/de/demo/RealTimeComposite/RealTimeComposite.htm">Real Time Composite</a> 
</ul>


<h3>Process Network (PN)</h3>
<ul>
<li><a href="../ptolemy/domains/pn/demo/NondeterministicMergeWithFeedback/NondeterministicMergeWithFeedback.htm">Nondeterministic Merge with Feedback</a>
</ul>

<h3>Synchronous Dataflow (SDF)</h3>
<ul>
<li><a href="../ptolemy/domains/sdf/demo/Gravitation/Gravitation.htm">Gravitation</a>
<li><a href="../ptolemy/domains/sdf/demo/ModelDisplay/ModelDisplay.htm">ModelDisplay</a>
</ul>

<h3>Synchronous/Reactive (SR) </h3>
<ul>
<li><a href="../ptolemy/domains/sr/demo/GuardedCount/GuardedCountTimed.htm">GuardedCountTimed</a> 
<li><a href="../ptolemy/domains/sr/demo/TrafficLight/TrafficLight.htm">TrafficLight</a> 
<li><a href="../ptolemy/domains/sr/demo/TrafficLight/WirelessDeployment.htm">WirelessDeployment</a> 
</ul>

<h3>User Interface Demonstrations </h3>
<ul>
<li> <a href="../ptolemy/domains/curriculum/demo/Curriculum/Curriculum.htm">Curriculum</a>
</ul>


<h2><a name="other">Other Key New Capabilities</a></h2>
<ul>
<li><a href="codeDoc/ptolemy/actor/Initializable.html">Initializable</a>
<li><a href="codeDoc/ptolemy/actor/TokenGotEvent.html">TokenGotEvent</a>
<li><a href="codeDoc/ptolemy/actor/TokenGotListener.html">TokenGotListener</a>
</ul>

<h2><a name="libraries">New and Enhanced Actor Libraries</a>

<!-- grep "Only in" /tmp/p.diffs | grep java | sed 's@Only in ptII8.0.beta/@@' |  sed 's@/@.@g' | sed 's@.java@@' | awk -F : '{print "<li><a href="\"codeDoc/"" $1 "." $2 "\">" $2 "</a>"}' | sed 's/\. /./' | sed 's/> />/' -->

<ul>
<li><a href="codeDoc/ptolemy/actor/lib/ArrayElementAsMatrix.html">ArrayElementAsMatrix</a>
<li><a href="codeDoc/ptolemy/actor/lib/ArraySum.html">ArraySum</a>
<li><a href="codeDoc/ptolemy/actor/lib/CodegenActor.html">CodegenActor</a>
<li><a href="codeDoc/ptolemy/actor/lib/LimitedFiringSource.html">LimitedFiringSource</a>
<li><a href="codeDoc/ptolemy/actor/lib/MovingAverage.html">MovingAverage</a>
<li><a href="codeDoc/ptolemy/actor/lib/PublisherNonStrictTest.html">PublisherNonStrictTest</a>
<li><a href="codeDoc/ptolemy/actor/lib/PublisherTest.html">PublisherTest</a>
<li><a href="codeDoc/ptolemy/actor/lib/SingleTokenCommutator.html">SingleTokenCommutator</a>
<li><a href="codeDoc/ptolemy/actor/lib/SubMatrix.html">SubMatrix</a>
<li><a href="codeDoc/ptolemy/actor/lib/gui/ArrayPlotterXY.html">ArrayPlotterXY</a>
<li><a href="codeDoc/ptolemy/actor/lib/gui/LEDMatrix.html">LEDMatrix</a>
<li><a href="codeDoc/ptolemy/actor/lib/gui/ModelDisplay.html">ModelDisplay</a>
<li><a href="codeDoc/ptolemy/actor/lib/hoc/MirrorComposite.html">MirrorComposite</a>
<li><a href="codeDoc/ptolemy/actor/lib/hoc/RealTimeComposite.html">RealTimeComposite</a>
<li><a href="codeDoc/ptolemy/actor/lib/javasound/ClipPlayer.html">ClipPlayer</a>
<li><a href="codeDoc/ptolemy/actor/lib/javasound/SoundActor.html">SoundActor</a>
<li><a href="codeDoc/ptolemy/actor/lib/javasound/SoundPlayer.html">SoundPlayer</a>
</ul>

<li><i>New Continuous Time (CT) actors</i>:
<ul>
<li><a href="codeDoc/ptolemy/domains/ct/lib/DiscreteClock.html">DiscreteClock</a>
</ul>

<li><i>New Synchronous Dataflow (SDF) actors</i>:
<ul>
<li><a href="codeDoc/ptolemy/domains/sdf/lib/MatrixJoin.html">MatrixJoin</a>
<li><a href="codeDoc/ptolemy/domains/sdf/lib/MatrixSplit.html">MatrixSplit</a>
</ul>

</ul>

<h2><a name="features">Additional Features</a></h2>

<ul>
<li> doc/tutorial - Tutorials for creating directors and using the GUI.

<li><a href="codeDoc/ptolemy/actor/ActorFiringListener.html">ActorFiringListener</a>
<li><a href="codeDoc/ptolemy/actor/FiringsRecordable.html">FiringsRecordable</a>
<li><a href="codeDoc/ptolemy/actor/TokenGotEvent.html">TokenGotEvent</a>
<li><a href="codeDoc/ptolemy/actor/TokenGotListener.html">TokenGotListener</a>
<li><a href="codeDoc/ptolemy/actor/TypedCompositeActorWithCoSimulation.html">TypedCompositeActorWithCoSimulation</a>
<li><a href="codeDoc/ptolemy/actor/gui/AbstractPlaceableActor.html">AbstractPlaceableActor</a>
<li><a href="codeDoc/ptolemy/actor/gui/DependencyHighlighter.html">DependencyHighlighter</a>
<li><a href="codeDoc/ptolemy/data/FloatToken.html">FloatToken</a>
<li><a href="codeDoc/ptolemy/data/ShortToken.html">ShortToken</a>
<li><a href="codeDoc/ptolemy/data/UnsizedArrayToken.html">UnsizedArrayToken</a>
<li><a href="codeDoc/ptolemy/data/expr/NameParameter.html">NameParameter</a>
<li><a href="codeDoc/ptolemy/data/expr/UndefinedConstantOrIdentifierException.html">UndefinedConstantOrIdentifierException</a>
<li><a href="codeDoc/ptolemy/moml/MissingClassException.html">MissingClassException</a>
<li><a href="codeDoc/ptolemy/moml/MoMLVariableChecker.html">MoMLVariableChecker</a>
<li><a href="codeDoc/ptolemy/util/StringBufferExec.html">StringBufferExec</a>
<li><a href="codeDoc/ptolemy/vergil/basic/ContextMenuFactoryCreator.html">ContextMenuFactoryCreator</a>
<li><a href="codeDoc/ptolemy/vergil/basic/KeplerDocumentationAttribute.html">KeplerDocumentationAttribute</a>
<li><a href="codeDoc/ptolemy/vergil/basic/OffsetMoMLChangeRequest.html">OffsetMoMLChangeRequest</a>

</ul>

<h3>New Code Generation Actors</h3>
<ul>
<li><a href="codeDoc/ptolemy/codegen/c/actor/lib/ArrayElementAsMatrix.html">ArrayElementAsMatrix</a>
<li><a href="codeDoc/ptolemy/codegen/c/actor/lib/ArrayPeakSearch.html">ArrayPeakSearch</a>
<li><a href="codeDoc/ptolemy/codegen/c/actor/lib/CodegenActor.html">CodegenActor</a>
<li><a href="codeDoc/ptolemy/codegen/c/actor/lib/CurrentTime.html">CurrentTime</a>
<li><a href="codeDoc/ptolemy/codegen/c/actor/lib/Lattice.html">Lattice</a>
<li><a href="codeDoc/ptolemy/codegen/c/actor/lib/MovingAverage.html">MovingAverage</a>
<li><a href="codeDoc/ptolemy/codegen/c/actor/lib/Publisher.html">Publisher</a>
<li><a href="codeDoc/ptolemy/codegen/c/actor/lib/PublisherTest.html">PublisherTest</a>
<li><a href="codeDoc/ptolemy/codegen/c/actor/lib/RecursiveLattice.html">RecursiveLattice</a>
<li><a href="codeDoc/ptolemy/codegen/c/actor/lib/SetVariable.html">SetVariable</a>
<li><a href="codeDoc/ptolemy/codegen/c/actor/lib/Subscriber.html">Subscriber</a>
<li><a href="codeDoc/ptolemy/codegen/c/actor/lib/SubscriptionAggregator.html">SubscriptionAggregator</a>
<li><a href="codeDoc/ptolemy/codegen/c/actor/lib/VectorAssembler.html">VectorAssembler</a>
<li><a href="codeDoc/ptolemy/codegen/c/actor/lib/VectorDisassembler.html">VectorDisassembler</a>
<li><a href="codeDoc/ptolemy/codegen/c/actor/lib/WallClockTime.html">WallClockTime</a>
<li><a href="codeDoc/ptolemy/codegen/c/actor/lib/conversions/CartesianToComplex.html">CartesianToComplex</a>
<li><a href="codeDoc/ptolemy/codegen/c/actor/lib/conversions/ComplexToCartesian.html">ComplexToCartesian</a>
<li><a href="codeDoc/ptolemy/codegen/c/actor/lib/gui/LEDMatrix.html">LEDMatrix</a>
<li><a href="codeDoc/ptolemy/codegen/c/actor/lib/hoc/MultiInstanceComposite.html">MultiInstanceComposite</a>
<li><a href="codeDoc/ptolemy/codegen/c/domains/sdf/lib/BitsToInt.html">BitsToInt</a>
<li><a href="codeDoc/ptolemy/codegen/c/domains/sdf/lib/Chop.html">Chop</a>
<li><a href="codeDoc/ptolemy/codegen/c/domains/sdf/lib/DownSample.html">DownSample</a>
<li><a href="codeDoc/ptolemy/codegen/c/domains/sdf/lib/IntToBits.html">IntToBits</a>
<li><a href="codeDoc/ptolemy/codegen/c/domains/sdf/lib/LMSAdaptive.html">LMSAdaptive</a>
<li><a href="codeDoc/ptolemy/codegen/c/domains/sdf/lib/RaisedCosine.html">RaisedCosine</a>
<li><a href="codeDoc/ptolemy/codegen/c/domains/sdf/lib/UpSample.html">UpSample</a>
<li><a href="codeDoc/ptolemy/codegen/c/domains/sdf/lib/VariableFIR.html">VariableFIR</a>
<li><a href="codeDoc/ptolemy/codegen/c/domains/sdf/lib/VariableLattice.html">VariableLattice</a>
<li><a href="codeDoc/ptolemy/codegen/c/kernel/CCodegenUtilities.html">CCodegenUtilities</a>
</ul>

<h2><a name="bugs">Bug fixes</a></h2>

</body>
</html>

<h2>Backward Compatibility</h2>


Most models developed under Ptolemy II 1.0.1,
2.0.1, 3.0.2, 4.0.1, 5.0.2  or HyVisual 2.2-beta, 3.0, 4.0.1, 5.0.1, 6.0.2
should run under Ptolemy II 8.0.beta

<p>The MoMLParser includes a list of backward
compatibility filters that make certain changes on models
when read, handling such issues as actors being moved or renamed
and parameter names being changed.
The filters themselves are defined in
<a href="codeDoc/ptolemy/moml/filter/package-summary.html">
ptolemy.moml.filter</a>.
If you have developed your own actors under earlier versions of Ptolemy II by
writing your own Java files, you should recompile all your java code with
the new release.  In theory, copying the .class files should work, but
recompiling is safer.

<!--/whatsnew-->

<h2>Features that were new in previous Ptolemy II releases </h2>

<a href="oldFeatures.htm">Features that were new in previous Ptolemy II releases </a>


<!--vergilDocs-->
<h2><a name="limitations">Limitations</a>
</h2>
<ul>
<li><a href="http://ptolemy.eecs.berkeley.edu/ptolemy/ptII7.0/limitations.htm#in_browser">Ptolemy II 8.0.beta Limitations Page</a> - Limitations found after release.
<li><a
href="http://chess.eecs.berkeley.edu/ptexternal/bugs.html">Ptolemy II Bugzilla</a>
</ul>
Version 8.0.beta has the following limitations:

<h3>Release Limitations</h3>
<ul>

<li> The gzipped tar file of Ptolemy II  source files with Unix line endings
(<code>ptII8.0.beta.src.tar.gz</code>)
 <B>requires</B> GNU tar or WinZip.  Solaris 2.5.1 tar will fail to
untar this file with a checksum error because the pathnames are longer
than 100 characters.
 <p>Note further that some of the .class names are longer than
31 characters, which may cause problems when downloading zip files
on the Macintosh and using Stuffit.

<li> The documentation for custom actors used in demonstrations is not
included in the release.  The source code for the custom actors can be found
in the source download.

<li> If a URL ends with <CODE>#in_browser</CODE>, then
Ptolemy II will invoke the User's web browser.  Unfortunately, this
does not always work, especially under Windows if Netscape is already
running.  The workaround is to exit Netscape and let Ptolemy II
start up Netscape for you.


<li> Web Start does not work very well if the pathname to the 
<CODE>vergil.jnlp</CODE> file has spaces in it.  The workaround is
to place your Ptolemy II tree in a directory that does not have spaces
in the path name if you plan on using Web Start.

<li> If your user library contains actors that are not present in
vergil, then you may see a dialog or dialogs asking if you want
to skip these elements.  This could happen if you had developed custom
actors and put them into your user library and these custom actors
are not present in the release.  The work around is to click 'Skip Element'
and continue with the start up.


<li> Applet issues:
	<ul>

	<li> We've experienced problems with the browser freezing
	when between applets.  What happens is that the previous
	applet gets a InterruptedException and pops up a modal dialog
	box, which freezed the browser.  We are working on a solution.

	<li> Applets do not correctly display the TextAttribute,
	DocumentationAttribute or the TM "Show schedule" icon.

	<li> The Ptolemy II Applets require java 1.4.1_02 or later so
	as to prevent problems with Windows XP and Radeon displays
	that causes XP to hang when a Java application is exiting.
	For details, see

<a href="http://developer.java.sun.com/developer/bugParade/bugs/4713003.html#in_browser" target="_top"><CODE>http://developer.java.sun.com/developer/bugParade/bugs/4713003.html</CODE></a>
	 <br>For non-applet situations, we can invoke the browser with
	<CODE>-Dsun.java2d.d3d=false</CODE> or 
	<CODE>-Dsun.java2d.noddraw=true</CODE>, but for applets we must
	require Java 1.4.1_02 or later.  
	 <br>As a result, the applet html code requires version 1.4.2 or later,

	<li>Applets seem to run out of memory after about 82Mb.

	<li>There are no Jython or Cal applets 

	<li> Opera has problems viewing applets that are on the local
	file system.  In particular, it seems to have problems with urls like
	<CODE>file:///d|/ptII/ptolemy/plot/demo/FourierSeries.htm</CODE>
	which work fine in Netscape 4.x, IE, Mozilla.

	 <p>However, if I use the following style of URL, then some of the applets
	work: 
<CODE>file://localhost/d:/ptII/ptolemy/plot/demo/FourierSeries.htm</CODE>.
	Unfortunately any applet that accesses a data file will
	not work with the above URL style because the data file will
	be outside the codebase.

	 <p> The solution is to install a web server on the local
	machine and view the applets using 
	<CODE>http://localhost/</CODE>
	
        <li> Opera 6.03/Windows 2000/Java 1.4.0, may have
        problems running applets that include diva.jar if diva.jar
	is not downloaded in the first applet.  To reproduce this problem:
	<ol>
	<li> Run <a href="../ptolemy/domains/sdf/demo/Butterfly/Butterfly.htm">SDF Butterfly</a>, which does not use diva.jar

	<li> <a href="../ptolemy/domains/sdf/demo/Expression/Expression.htm">SDF Expression</a>, which uses diva.jar

	<li> In Opera, do <CODE>Window</CODE> -&gt; <CODE>Special</CODE>
	-&gt; <CODE>Java Console</CODE>, and you will see the following
        stack trace
<pre>
java.lang.NoClassDefFoundError: diva/graph/GraphController	
at java.lang.Class.getDeclaredConstructors0(Native Method)  
at java.lang.Class.privateGetDeclaredConstructors(Class.java:1576) 
at java.lang.Class.getConstructor0(Class.java:1748) 
at java.lang.Class.newInstance0(Class.java:266)  
at java.lang.Class.newInstance(Class.java:249) 
at opera.PluginPanel.run(opera/PluginPanel.java:343) 
at java.lang.Thread.run(Thread.java:536)  
</pre>

	</ol>
	The problem only occurs under Opera.

	<li> Running the Networked demo via an applet on the local
	file system results in an AccessControlException.
<pre>
com.microstar.htm.htmException: XML element "entity" triggers exception:
  java.lang.Exception: Attempted to lookup 'Waveform', but got: 
  java.lang.ClassNotFoundException: Waveform
Attempted to find as a moml class, but got: 
             java.security.AccessControlException: access denied
             (java.net.SocketPermission ptolemy.eecs.berkeley.edu resolve)
	     in file:/C:/Program Files/Ptolemy/Ptolemy II 3.0 beta2/
                   ptolemy/moml/demo/Networked/ at line 62 and column 118
	at ptolemy.moml.MoMLParser.startElement(MoMLParser.java:1341)
	at com.microstar.htm.htmParser.parseElement(XmlParser.java:944)
	at com.microstar.htm.htmParser.parseContent(XmlParser.java:1117)
	at com.microstar.htm.htmParser.parseElement(XmlParser.java:946)
	at com.microstar.htm.htmParser.parseDocument(XmlParser.java:495)
	at com.microstar.htm.htmParser.doParse(XmlParser.java:175)
	at com.microstar.htm.htmParser.parse(XmlParser.java:145)
	at ptolemy.moml.MoMLParser.parse(MoMLParser.java:492)
	at ptolemy.moml.MoMLParser.parse(MoMLParser.java:471)
	at ptolemy.moml.MoMLParser.parse(MoMLParser.java:456)
	at ptolemy.actor.gui.MoMLApplet._createModel(MoMLApplet.java:188)
</pre>

	The Network demo does not work as a local applet because the xml file
	includes a reference to http://ptolemy.eecs.berkeley.edu, which is
	not on the local file system, so we get a SecurityException.
	 <br>The workaround is to run the applet by downloading it
	from the Ptolemy Website:
<a href="http://ptolemy.eecs.berkeley.edu/ptolemyII/ptII7.0/ptII8.0.beta/ptolemy/moml/demo/Networked/Networked.htm"><CODE>http://ptolemy.eecs.berkeley.edu/ptolemyII/ptII7.0/ptII8.0.beta/ptolemy/moml/demo/Networked/Networked.htm</CODE></a>


	<li> If an icon file is not present, then a Vergil applet might
	try to download the icon file multiple times.  Ptolemy II
	uses XML files to store icons.  For example
<a href="../ptolemy/actor/lib/BooleanSwitchIcon.xml"><CODE>$PTII/ptolemy/actor/lib/BooleanSwitchIcon.xml</CODE></a>
	is an icon for
<a href="../ptolemy/actor/lib/BooleanSwitch.java"><CODE>$PTII/ptolemy/actor/lib/BooleanSwitch.java</CODE></a>
	 <br>The problem is that if an actor does not have an icon file,
	then the applet may go back to the server multiple times looking
	for the icon. 
 <!-- Steve writes:
      I think the MoMLParser should load Java-defined classes the same way
      it does xml-defined classes.  It should reflect a prototype and then
      keep the prototype around and clone it...  This would mean that it
      only has to grab the icon once...
 -->

	</ul>

<li> Windows Installer Issues:
 	<ul>

	<li> Sometimes running a model that uses the Matlab interface
	will cause Ptolemy II to exit.  Usually this occurs if Vergil
	has been running for a while and then the Matlab interface is loaded.
	<br><b>Workaround #1</b>: Run a model that uses the Matlab interface
	as the first model by doing Quick Tour -&gt; Matlab CT.
	<br><b>Workaround #2</b>:
        We believe that the problem has to do with loading the Direct
	Draw library.
<a href="http://developer.java.sun.com/developer/bugParade/bugs/4838939.html#in_browser" target="_top"><code>http://developer.java.sun.com/developer/bugParade/bugs/4838939.html</code></a>
        suggests invoking java with <code>-Dsun.java2d.noddraw=true</code>.
	<br>The way to do this is to edit <code>vergil-full.<b>lax</b></code>
	and add the line
	<pre>
lax.nl.java.option.additional=-Dsun.java2d.noddraw=true	
</pre>
        which we went ahead and did.  Note that because of problems
	with Radeon displays, setting noddraw to true is not such
	a bad idea.  See above for details.
        <br>The way to check if this argument is being used is to
	hold down the Control key and double click on the
	<code>vergil-full.<b>exe</b></code> icon.
	<br>You should see something like:
	<pre>	
c:\j2sdk1.4.2\bin\java.exe -Dsun.java2d.noddraw=true com.zerog.lax.LAX C:\\Ptol
emy\\Ptolemy_II_7.0ptiny\\vergil-ptiny.lax C:\\DOCUME~1\\cxh\\LOCALS~1\\Temp
\\env.prop
executing java...
        </pre>
	Note that to debug the binary, you would use the following line:
        <pre>
lax.nl.java.option.additional=-Xdebug -Xrunjdwp:transport=dt_shmem,server=y,suspend=n 
        </pre>

	<li> The Windows installer works best if you are in the 
	Administrators Windows group.   Otherwise, the Windows installer
	tends to dump lots of icons on your desktop
	</ul>

<li> Web Start issues:
	<ul>

	<li> The Matlab Wireless demo fails under Web Start.
	The problem is that the Matlab .m file cannot be found.

	<li> The Python Ptolemizer demo does not work under Web Start,
	probably because Jython cannot handle loading classes
	from the Ptolemy II classes. 


        <li> The JAI Adaptive Median model does not work under
	Web Start - the repaired image might be corrupt.
	The reason is that it uses the JAI acceleration libraries,
	which Web Start does not load.  

	<li> Viewing a pdf file may bring up a blank window along with
	the pdf file.  Running the code generator may bring up
	a blank window while the java or javac processes are running.

	<li> Some of the links on the GR domain instructions page
	might not work under Web Start because the files they refer
	to are not present. 
        </ul>

<li> Limitations in demonstrations
        <ul>

	<li> CT CarTracking should be run using View-&gt;Run
	so that the user can change the fault parameter.

        <li> HTVQ demo: The displays do not go away when
	the demo is exited.

	<li> GR demos: Under Java 3D 1.3.1-beta, the ViewScreen
	actor may display a black image when a second GR demo is run.
	 <br>The workaround is to install Java 3D 1.2.1_04.

        <li> Bouncer demo: If the user drags the bouncing icon, it no
	longer bounces
        </ul>
</ul>
<h3>Limitations in the Class Mechanism</h3>
The class mechanism is highly preliminary and is likely to change
in future releases.  There are several known problems:

<ul>


<li> Several higher-order-components will not work inside class definitions.
    (ModalModel, several CT actors, etc.).


<li> Name collisions can occur when adding objects to base classes
    whose names collide with objects in derived classes.
    Auto naming should look through the derivedList for name conflicts.


<li> Propagation of changes to a base class is very slow in Vergil.
    If there are more than just a very few instances or derived
    classes, interactive editing is not practical.  As a workaround,
    put the class definitions in a separate file and edit them
    without opening the model that creates instances. The probable
    reason is that MoMLParser handles propagation by issuing large
    numbers of change requests.


<li> Certain actors, such as MathFunction, change the number of ports
    when parameters change.  This violates the derivation invariance
    for classes.  To demonstrate the bug, put a MathFunction actor
    in a base class that has a subclass.  Change the function parameter
    in the subclass to anything but "modulo".  Then change the function
    in the base class to "modulo" (which adds a port).  Now attempt
    to insert a parameter into the port.  You will get an
    InternalErrorException when it tries to propagate the change.
</ul>


<h3>Limitations in the Actor Libraries</h3>
<ul>
<li>The actor library is far from complete.

<li>The Expression actor does not properly propagate type constraints in
an expression-dependent fashion. It works correctly for double-valued
expressions of double-valued inputs.

<li> The Ptolemy parameter parser uses comma "," to separate elements
in an array.  This causes problems when Ptolemy is run on
European machines that use a comma "1,0" instead of a period "1.1"
in floating point numbers.

<li> The Display actor uses the Swing JTextArea component which is 
known to have memory leaks.

<li> The readFile() parameter function does not work with applets.
Instead, use readResource().
<!-- If you change the next paragraph update install.htm -->

<li>The Matlab interface works only under Windows and it requires that
Matlab be installed on the local machine. 
The Matlab interface should work with version of Matlab from
R11 (5.3) and up to and including R13 (6.5)
<p>Didier Mauuary reports that under Windows 98, configure failed
to set up the <code>MATLAB_DIR</code>, <code>PTCC</code>
and <code>PTDLLTOOL</code> makefile variables, but after
he set them by hand:
<pre>
 MATLAB_DIR = /cygdrive/c/MATLABR11
 PTCC = gcc
 PTDLLTOOL = dlltool
</pre>
he was able to get farther with the recompilation of the Matlab interface.

<li>Under Windows, the Matlab interface has problems at runtime with gcc-3.3.
<br>Under Windows, we recommend using gcc-3.2, or Microsoft Visual C.

<li>Under Windows, Matlab models sometimes cause Ptolemy to exit the
second time the model is run!
<br>The problem seems to be a segfault within a Windows library.
The problem only affects systems where Matlab is compiled with 
Microsoft Visual C.


<li> The actor.lib.comm.SerialComm actor requires that Javacomm is installed

<a href="http://java.sun.com/products/javacomm/index.html#in_browser" target="_top"><CODE>http://java.sun.com/products/javacomm/index.html</CODE></a>.
The SerialComm actor will only work under Windows.


<li> IterateOverArray has the following problems
     <menu>

	<li> IterateOverArray: When you drop in an actor, and then
	another actor, and then select "undo," the second actor is
	deleted without the first one being re-created. Thus, undo is
        only a partial undo. The fix to this is extremely
        complicated. Probably the only viable
        mechanism is to use UndoStackAttribute.getUndoInfo() to get the undo
        stack and then to manipulate the contents of that stack directly.
	
	<li> IterateOverArray: There should be an option to reset
	between firings of the inside actor.


	<li> IterateOverArray: If you drop a new actor onto an IterateOverArray
        in a subclass, it will simply acquire the new contents, but not
        actually do anything with them. It should somehow refuse to accept
        the new object in the subclass, since to do so, it would have to
        delete the original object defined in the base class, and this would
        violate the derived invariant.

        
	<li> IterateOverArray: If an instance of IterateOverArray in a derived
        class has overridden values of parameters, those are lost if
        contained entity of the instance in the base class is replaced and
        then an undo is requested.

       
        <li> IterateOverArray: When an actor with a display icon like
        Const, Expression, or MathFunction is put into
        IterateOverArray, the CopyCatIcon doesn't reflect the text display.

     </menu>

</ul>

<h3>Limitations in the PN Domain</h3>
The PN domain documents that it locally handles mutations.  However, this
is currently not true in the implementation.  For the basic PN model, this
doesn't really matter, since mutations happen pretty much the same as they
would otherwise.  (i.e. they are non-deterministic in when they execute) 
However, for timed PN models, there is actually some expressiveness
lost, since timed PN models can locally execute mutations deterministically.

 <p>Embedding a PN typed composite actor inside a non-process top level
such as DE does not work.  In fact embedding a process domain inside
a non-process domain is likely to have problems.  Profess Lee wrote:
<BLOCKQUOTE>
    Yes, it looks as if the code is designed so that process domains
    (PN, CSP) can only be used within process domains.  I'm not sure
    to what extent this is a limitation of the process domains vs. a
    semantic problem.  What would PN mean within DE?  Since PN has
    no well-defined notion of a "firing", how would you assign time
    stamps to the outputs of a PN actor?  By default in DE, the time
    stamps of the outputs of an actor match those of the inputs that
    triggered the firing. There is no such notion in PN.
</BLOCKQUOTE>

<h3>Limitations in the User Interface</h3>

Below are some of the limitations of Vergil, the Ptolemy II Graphical
User Interface.

<ul>

<li> The labeling of ports gets messed up if you change cardinality.


<li> Cancelling a style change doesn't restore original
state.  There are FIXME's about this in actor.gui.style.StyleConfigurer.

<li> If there are multiple windows open for a model, say, the top
level vergil window and the tree view, or the top level window
and the inside look of a composite component, when the top
level window is closed, all other windows are closed, but the
user is not prompted to save any change to the model.

<li> When setting the type of a port, we should provide a combo
box that lists the common ports

<li> When creating a Modal Model, use Control-Right-Button to
drawn arcs between nodes.  One potential workaround would
be to have an information message in the status bar about this.

<li> You should not change the names of built in ports - The port
mechanism should disallow port name changes on ports that are
named in Java.  The UI could recognize this.  The UI should
not allow the user to remove built in Java defined ports.

<li> Manually setting of the types of actors like ArrayToSequence that
have constraints on their element types can cause problems.
<li> HTVQ demo is badly laid out when run under vergil.
<li>Weak support for multiports in the graph editor.
<li>It is difficult to control wire routing.
<li>Cannot have more than one vertex in a connection.
<li>No mechanism to set the width of a relation.
<li>The integrated web browser is not a full-featured browser.
<li>Debugger not yet integrated.
<li>It is difficult to add actors to the libraries.
<li>No dynamic class reloading.


<li> Plot windows don't resize when control panel is resized
 <br>If a model with plotters
is executed using the run button on the toolbar, and
then re-executed using the run control panel accessed through
the View menu, then resizing the run control panel does not
cause the plots to resize to fit.
<br>Workaround:
Close the model and re-open it, and then run first using the
run control panel.

<li>There is no mechanism in the UI to save a model as a class,
nor to save a submodel as a class.

<li>There is no mechanism in the UI to create a custom icon for
a library element and store it in the right place.

<li>If an actor uses a slider, then the actor tree navigator pane
incorrectly shows the slider as a subitem of the actor.

<li> It seems that if you close a model that has been modified,
  get prompted to save it, and select save, then the model
  is saved but not closed.  It should be closed too...

<li> When I select a large number of items from one model, and
  copy and paste them into a new one, they sometimes all get
  placed at the origin.  Strangely, if I then auto-place,
  and then undo, they get their original (correct) placement!


<li> Printing a model that contains transparent objects can result
in problems when printing to Encapsulated Postscript (EPS).

 <br>If a model has transparent objects, then when it is printed to
EPS, the resulting file is a bitmap instead of a Postscript
description of the graphics.  You can tell by the file size (several
Meg vs. several K) and by opening it in Illustrator, where in theory
you should be able to ungroup and select and edit individual
components.

 <br>The way Java prints EPS is that there is an implementation of
Graphics2D that literally translates each graphics2D call into a
Postscript snippet.  If Java detects any transparent colors or images,
then the literal translation of each element independently doesn't
work, so the printing code reverts to writing everything to an image
and then sending the image, encapsulated in Postscript to the printer.

 <br>Solution1: Use one of these pdf writing programs to generate
pdf-1.4 compliant pdf files, which have extensions to support
transparency that Postscript lacks, and then print them to eps, which
would use the distill implementation of the above algorithm.
Or alternatively, we could switch to using pdftex instead of 
latex-&gt;dvips-&gt;distill which should
embed pdf for figures directly at the expense of less robust latex support.
<a href="http://www.geocities.com/marcoschmidt.geo/java-libraries-pdf.html#in_browser" target="_top"><CODE>http://www.geocities.com/marcoschmidt.geo/java-libraries-pdf.html</CODE></a>

 <br>Solution 2: Use the undocumented flag
-Dsun.java2d.print.pipeline=pdl on the command line to force the
printing to use the postscript path, ignoring transparency.
Under Cygwin:
<pre>
export JAVAFLAGS=-Dsun.java2d.print.pipeline=pdl
vergil
</pre>
Then edit the file by hand in Illustrator to add the transparency back in.

</ul>

<h3>Limitations in JNI</h3>
<menu>
<li> The Interface to C actors using the Java Native Interface
	is not available via the Windows Installer (or Web Start).
	To use the JNI/Ptolemy II interface, you must download 
	Ptolemy II as source files and compile.


<li> The JNI user interface was removed between Ptolemy II 4.0
and Ptolemy II 7.0 because the UI stopped working.

</menu>


<h3>Code Generation Limitations</h3>
Code Generation limitations are covered on the
<a href="codegen.htm#limitations">Code Generation</a> page. 

<h3>Missing Domains</h3>
<ul>
<li>Boolean and integer dataflow.
</ul>
 <p>For limitations discovered after the release, see the
<a href="http://ptolemy.eecs.berkeley.edu/ptolemyII/ptII7.0/#in_browser">Ptolemy II 8.0.beta website</a>

<!--/vergilDocs-->
<p><font size="2" color="#cc0000">Last Updated: $Date$</font>
 <!-- Leave a trailing p here so that there is a little space at the bottom -->
 <p>
</body>
</html>
