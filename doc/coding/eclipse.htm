<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <title>Setting up Ptolemy II and Eclipse</title>
<link href="../default.css" rel="stylesheet" type="text/css">
</head>
<body>
<!--eclipseSimple-->
<h1>Setting up Ptolemy II and Eclipse</h1>

The instructions below include how to set up Subversion so that it
is possible to update the Ptolemy II tree.  If you would like to work
from a static source tree, such as what is shipped with the release,
see the
<a href="eclipseSimple.htm">Simple Eclipse Instructions</a>.

<p>
These instructions assume you are using Eclipse Helios under 
Windows or Mac OS X.
Other ways of setting up and building Ptolemy II are described on the
<a href="http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIlatest/ptII/doc/install.htm#in_browser" target="_top">Ptolemy II install page</a>. 
<p>Contents of this page:
<menu>
<li><a href="#Installing">Install Eclipse</a>
<li><a href="#Preferences">Eclipse Preferences for Ptolemy II</a>
<li><a href="#SettingUp">Set up Eclipse for Ptolemy II</a>
  <ul>
  <li> <a href="#NoSVN">Eclipse is unaware of the version control aspects of the project.</a>
<!--/eclipseSimple-->
  <li> <a href="#NoSubversive">Eclipse is unaware of the version control aspects of the project, use the shell version of Subversion to update the tree.</a>
  <li> <a href="#Subversive">Eclipse is aware of the Subversion aspects of the project.</a> 
<!--eclipseSimple-->
  </ul>
<li><a href="#simpleDebug">Simple Debugging Session</a></h2>
<li><a href="#Optional">Optional Extensions</a>
<li><a href="#Troubleshooting">Troubleshooting</a>
</menu>
Other local pages:
<menu>
<li><a href="performance.htm#Eclipse">Profiling using TPTP</a>
</menu>

<h2><a name="Installing">Install Eclipse</a></h2>
<ol>
<li>
Download the latest version of Eclipse from
<a href="http://www.eclipse.org#in_browser" target="_top">http://www.eclipse.org</a>.
 <br>In October, 2010, we chose
 <B>Eclipse for RCP and RAP Developers</B>, which is 190Mb.
The <B>Eclipse for RCP and RAP Developers</B> version includes the
plug-in development environment (PDE), which is needed by the backtrack
facility, which is an optional part of Ptolemy II that allows models to
restore their old state.  If the version of Eclipse that you install
does not have the PDE, then there will be build errors, which can be fixed by
excluding <CODE>ptolemy/backtrack/</CODE> from the build.

<p>Eclipse is available as both 32-bit and 64-bit binaries.  Deciding
which one to download can be complex.</p>
<p>The basic idea is that to use a 64-bit version of Eclipse, you must
have a 64-bit JVM and an operating system that will support 64-bit
applications.  When in doubt, choose the 32-bit version of Eclipse,
it is more likely to work than the 64-bit version.</p>

<p>See below for details.
</p>

<h3>32-bit or 64-bit?</h3>
<ul>
<li>(<i>Linux</i>): Run <code>uname -a</code>.  If the result
 contains <code>x64</code>, you are running a 64-bit version of Linux and 
would select the 64-bit version of Eclipse..  Also,
 try <code>java -version</code>.  Below is a run on a 64-bit Linux
 machine:
<pre>
-bash-3.2$ uname -a
Linux sisyphus.eecs.berkeley.edu 2.6.18-164.11.1.el5xen #1 SMP Wed Jan 6 13:43:33 EST 2010 x86_64 x86_64 x86_64 GNU/Linux
-bash-3.2$ java -version
java version "1.5.0_22"
Java(TM) 2 Runtime Environment, Standard Edition (build 1.5.0_22-b03)
Java HotSpot(TM) 64-Bit Server VM (build 1.5.0_22-b03, mixed mode)
</pre>

<li> (<i>Mac OS X</i>):
Under Mac OS X 10.5 and 10.6, the default JVM is 1.6, which is 64-bit.  However,
Java 1.6.0_20 does not work well.  The issue is that
the following stack trace appears:
<pre>
2010-10-10 11:50:02.263 java[7823:613] java.lang.NullPointerException
at apple.awt.CToolkit.postEvent(CToolkit.java:1086)
at apple.awt.EventFactoryProxy.forwardEvent(EventFactoryProxy.java:53)
</pre>
The bug happens when running from Eclipse or from the command line.
The bug requires UI interactions such as mouse movement or clicking.
The bug is probably a threading bug and may only show up on multi-core
machines.  The downside is that when the bug occurs, the debugging
session in Eclipse may become non-responsive.

<p>For further information, see:
<a href="http://lists.apple.com/archives/java-dev/2010/May/msg00140.html"><code>http://lists.apple.com/archives/java-dev/2010/May/msg00140.html</code></a>.

<br>So, at this time, we are recommending the 32-bit version with Java 1.5.

<br>Download
  <code>eclipse-rcp-helios-SR1-macosx-cocoa.tar.gz</code>
  uncompress it and move <code>eclipse/</code> into <code>/Applications</code>, which
  will create <code>/Applications/eclipse/Eclipse.app</code>.
  <br>Firefox Mac OS X Details:
    <ol>
    <li>Firefox will download the file into a directory, which may be
    <code>/Downloads</code>
    <li>Double click on
    <code>eclipse-rcp-helios-SR1-macosx-cocoa.tar.gz</code>
    which will create the <code>eclipse</code> directory.
    <li> Drag the <code>eclipse</code> directory to your
    <code>Applications</code> directory.
    </ol>

  <br>The next step on the Mac is to force Eclipse to use Java 1.5 by
    editing <code>eclipse.ini</code>.
   <ol>
    <li> In the Finder, go to <code>/Applications/eclipse</code>,
      find the <code>Eclipse</code> executable and right click (Control + click)
      and choose "Show Package Contents".
    <li> Browse to <code>Contents/MacOS</code> and double click on
      <code>eclipse.ini</code>, which will open up the file in TextEdit
    <li> Edit the file and insert
      <pre>
-vm /System/Library/Frameworks/JavaVM.framework/Versions/1.5/Home/bin/java
      </pre>
    <li>Save the file and exit TextEdit.
      
  </ol>
  For details about <code>eclipse.ini</code>, see
  <a href="http://wiki.eclipse.org/Eclipse.ini#in_browser">http://wiki.eclipse.org/Eclipse.ini</a>
  <br>When you start up Eclipse, if you want to verify which version
  of Java you are running
   <ul>
     <li>(<i>Mac OS X</i>): <code>Eclipse</code> | <code>About Eclipse</code>
       | <code>Installation Details</code> | <code>Configuration</code>.
     <br>For Java 1.5, the <code>java.class.version</code> property should be
     <code>49.0</code>.
     <br>For a 64-bit JVM, the <code>java.vm.name</code> property <i>might</i>
     have the string <code>64</code> in it.
   </ul>
 


<li> (<i>Windows</i>): Determine whether you are running a 32-bit or
    64-bit version of the OS.
<ul>
<li><i>Windows 7 or Vista</i>:  "Start", then right click on
"Computer", then click on "Properties".  Under System, you
should see the system type.  The 64-bit version of Windows 7 will
say "64-bit Operating System".  See
<a href="http://windows.microsoft.com/en-US/windows7/32-bit-and-64-bit-Windows-frequently-asked-questions"><code>http://windows.microsoft.com/en-US/windows7/32-bit-and-64-bit-Windows-frequently-asked-questions</code></a>.
for details.

<li><i>Windows XP</i>: "Start", then right click on "My Computer",
and then click on "Properties". Under "System", if you see "x64
Edition", then you are running a 64-bit version of Windows.  If "x64
Edition" is <b>not</b> listed, then you are running a 32-bit version of Windows.
</ul>

<br>After determining whether to download the 32-bit or 64-bit version
of Eclipse, download the file and unzip the download file into an
appropriate place, such as <code>C:\Program Files</code>, which will
create <code>C:\Program Files\eclipse\eclipse.exe</code>.

<br>If <code>eclipse\eclipse.exe</code> is not created, then it could
be that the security policy on your machine is preventing the creation
of <code>.exe</code> files.  If this is the case, then try right
clicking on the zip file, select "Properties" and then at the bottom,
hit "Unblock" and then "Apply". Or try running
<code>unzip</code> from the command line.

</ul>

<li>(<i>All Platforms</i>): Finish the installation by double click <code>/Applications/eclipse/Eclipse.app</code> or <CODE>eclipse/eclipse.exe</CODE>.
<br>The first time this is run it will complete the installation process.
<ul>
<li> (<i>Windows</i>): 
If Eclipse fails to start with the message "Windows cannot access the specified device, path or file. You may not have the appropriate permisions to access the item", then it may be necessary to make 
<code>eclipse.exe</code> and a dll executable:
<pre>
chmod a+x eclipse.exe
</pre>
<br>If you get the message "The Eclipse executable launcher was unable to locate its companion shared library", then run the following command
in the <code>eclipse</code> directory.
<pre>
find . -name *.dll -exec chmod a+x {} \;
</pre>
<br>After the first run, normal start-up will occur whenever it is started.
</ul>

</ol>

<h2><a name="Preferences">Eclipse Preferences for Ptolemy II</a></h2>
<p>
Eclipse has the notion of a workspace, which is a collection of
one or more projects.  Ptolemy II is a project. 

<br>When the "Workspace Launcher" window comes up, either stick with the default
or choose a new directory.  Note that the projects can be located outside
of the workspace directory.  One caveat is that Eclipse will not permit
the project directory to be a parent of the workspace directory, so placing the
workspace in a subdirectory such as the default location is best.
<br>Click "OK" to create the workspace and open Eclipse.
<br>Below is the Workspace Launcher Window:
<center><p><img src="../img/eclipseWorkspaceLauncher.png" alt="Eclipse Workspace Launcher" width="597" height="244"></p></center>

The default configuration of Eclipse has some difficulties with Ptolemy II,
so a few changes are necessary.
<ol>
<li>(<i>Optional</i>): Shortcuts and Memory Size
<ul>
<li>(<i>Mac OS X</i>):
  In <code>Applications/eclipse</code>, drag the
  <code>Eclipse.app</code> icon to the Finder Dock on the edge of your
  screen.  This will give you fast access to starting Eclipse.
  <br>There is usually no need to set the memory size for Eclipse under Mac OS X.  By default, it is set to 512 megabytes.  
  For details about setting the memory size, see:
  <a href="http://help.eclipse.org/helios/topic/org.eclipse.platform.doc.user/tasks/running_eclipse.htm#in_browser" target="_top">Eclipse Workbench User Guide/Tasks/Running Eclipse</a>.
  
<li>(<i>Windows</i>): 

  In Windows,  create a shortcut to <code>eclipse.exe</code> by going to the 
directory where Eclipse is installed, right clicking on eclipse.exe 
and selecting <code>Create Shortcut</code>. 
  <br>To add Eclipse to the start menu, right click on the shortcut and 
select <code>Pin to Start Menu</code>
  <br>There is usually no need to set the memory size for Eclipse.  By default, it is set to 512 megabytes in the
  <code>eclipse.ini</code> file.

</ul>

<li>Eclipse requires some customization to build Ptolemy II
and to keep the <a href="http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIlatest/ptII/doc/coding/style.htm#in_browser" target="_top">Ptolemy II coding style</a>.
In the steps below, we
outline changes to be made in the Eclipse Preferences window.
<br> Under <i>Windows</i> the Eclipse Preferences window
is invoked via <code>Window</code> | <code>Preferences</code>.

<br> Under <i>Mac OS X</i> the Eclipse Preferences window
is invoked via <code>Eclipse</code> | <code>Preferences</code>.

<br>For each of the
changes, hit <code>Apply</code>.  When all the changes are done, hit
<code>OK</code>, which will close the Eclipse Preferences Window.

<!--/eclipseSimple-->
<li>
By default, Eclipse rebuilds a project when any change is made
to a file.  This will result in thousands of errors when Ptolemy II
is first checked out, and during normal usage, can be annoying because
of the pauses it creates. We suggest disabling this feature as
follows:
<ol>
<li> While still in the preferences window 
<br> (<i>Mac OS X</i>: <code>Eclipse</code> | <code>Preferences</code>)
<br> (<i>Windows</i>: <code>Window</code> | <code>Preferences</code>)
<li> Select <code>General</code> | <code>Workspace</code>
<li> Deselect <code>Build automatically</code>.
<li> Click Apply. 
</ol>
Below is the <code>General</code> | <code>Workspace</code> window:
<center>
<p><img src="../img/eclipsePreferencesGeneralWorkspace.png" alt="Eclipse Preferemces General Workspace" width="624" height="537"></p>
</center>
<p>
<!--/eclipseSimple-->
<li>

Ptolemy II source files are worked on by many people with different
editors.  Unfortunately, different text editors interpret tab
characters differently, so it is best to use spaces rather than tabs.
<br>Sadly, the Eclipse developers have chosen to use tabs
as spaces, so you must adjust the Eclipse Java Formatter
if you plan on contributing code to the Ptolemy II tree.

<br>Also, it is best if files end with new line characters, so
that we can run line oriented scripts on them.
<br>In addition, we currently do not want the Eclipse Formatter
to format comments.  We hope to change this policy in the future.

<br>We handle these changes together:
 <ol>
  <li> While 
<!--/eclipseSimple-->
still
<!--eclipseSimple-->
in the preferences window
   <br> (<i>Mac OS X</i>: <code>Eclipse</code> | <code>Preferences</code>)
   <br> (<i>Windows</i>: <code>Window</code> | <code>Preferences</code>)
<li> Go to <code>Java</code> | <code>Code Style</code> | <code>Formatter</code> and click
       New
  <li> In the "New Profile" Window, for the Profile name, enter "Ptolemy II"
      Under "Initialize settings with the following profile",
      select "Java Conventions [built-in]"
      (We use Java Conventions over the "Eclipse"
      setting because the Eclipse style uses tabs.)
      Then hit OK
   
  <li> Under the "Indentation" tab, change the Tab policy to "Spaces only". 
  <li> Under the "New Lines" tab, select "at end of file"
  <li> Under the "Comments" tab,
       <br><b>unselect</b> "Enable Javadoc comment formatting" 
       <br><b>unselect</b> "Enable block comment formatting", otherwise the block comments that have &lt;pre&gt; ... &lt;pre&gt; get changed.
       <br><b>unselect</b> "Enable line comment formatting", otherwise the headers for public methods etc. get changed.
 <li> Click OK.
  <li> In the Preferences Window, click Apply.
 </ol>

<li>
Ptolemy II 8.0 uses some features of Java 1.5, which is also known as Java 5.0.
In particular, <CODE>ptolemy/actor/ptalon</CODE> uses generics,
which require Java 1.5 (aka Java 5.0) or later.
<p>However, the Ptolemy II development trunk that includes changes after
Ptolemy II 8.0 uses some features of Java 1.6 (aka Java 6.0).

In particular, <code>ptdb</code> to uses javax.swing.GroupLayout.
 which requires Java 1.6 (also known as 6.0) or later.

<ul>
<li>(<i>Mac OS X</i>): It is best to set Eclipse to use Java 1.5 or 5.0
or later source code compliance.

<li>(<i>Windows</i>): It is best to set Eclipse to use Java 1.6 or 6.0
or later source code compliance.
</ul>

<ol>
 <li> While still in the preferences window
  <br> (<i>Mac OS X</i>: <code>Eclipse</code> | <code>Preferences</code>)
  <br> (<i>Windows</i>: <code>Window</code> | <code>Preferences</code>)
  <br> expand <code>Java</code> | <code>Compiler</code>
 <li> Make sure that Set "Compiler compliance level":
<ul>
<li>(<i>Mac OS X</i>): "1.5" or "5.0"
<li>(<i>Windows</i>): "1.6" or "6.0"
</ul>

<i>Note that Java 1.5 is the same as Java 5.0 and Java 1.6 is the same as Java 6.0</i>.  What we don't want
is "1.4" or "4.0".   If you plan on using the the Ptolemy II development
tree after Ptolemy II 8.0. then you don't want "1.5" or "5.0".
 <li> Click Apply. 
</ol>

<li> Eclipse has very good compiler error/warning.  One of the
warnings complains if a Serializable class does not have
serialVersionUID declared.  Since this warning is only useful
if you are tightly managing serialization, we turn it off:
 <ol>
  <li> While still in the preferences window
   <br> (<i>Mac OS X</i>: <code>Eclipse</code> | <code>Preferences</code>)
   <br> (<i>Windows</i>: <code>Window</code> | <code>Preferences</code>)
   <br>  Expand <code>Java</code> | <code>Compiler</code> | <code>Errors/Warning</code>
  <li> Under "Potential programming problems", change
  "Serializable class without serialVersionUID" to "Ignore"
  <li> Under "Generic Types", change
  "Unchecked generic type operation" to "Ignore".
  <li> Under "Generic Types", change
  "Usage of a raw type" to "Ignore".
  <li> Click Apply.  If you are prompted for a full rebuild, click Yes.
 </ol>

<li> (<i>Windows</i>:) The PtDoc Doclet in <code>$PTII/doc/doclets/PtDoclet.java</code>
requires <code>tools.jar</code>, which is only in the Java Development
Kit (JDK), not the Java Runtime Environment (JRE).  So, be sure that a
JDK is selected for building, not a JRE.
<br>While still in the preferences window: 
<br> (<i>Mac OS X</i>: <code>Eclipse</code> | <code>Preferences</code>)
<br> (<i>Windows</i>: <code>Window</code> | <code>Preferences</code>)
<ol>
<li> Select <code>Java</code> | <code>Installed JREs</code>
<br>(<i>Mac OS X</i>):  select <code>JVM 1.5.0</code>.
<br>(<i>Windows</i>):  select <code>JVM 1.6.0</code>.

<li> Verify that the checked line corresponds with a JDK, not
a JRE.
</ol>

<li> (<i>Windows</i>): While in the "Installed JREs" window, under Java 1.6,
<code>tools.jar</code> must be added the external jars:
  <ol>
  <li>Select the default JRE | <code>Edit</code> | <code>Add External Jars</code>.
  
  <li> Browse to the path of your JDK for example <code>c:\Program Files\Java JDK1.6.0_22\lib</code>
  <li> Hit <code>Open</code>, select <code>tools.jar</code> and then finish.
  </ol>

<li> Click OK  in the Preferences window to apply all of the above changes.
</ol>


<h2><a name="SettingUp">Setting up Eclipse to manage your Ptolemy II development environment</a></h2>

<p>Eclipse will manage your ptII code tree as a <em>project</em> called
the ptII project.  
<!--/eclipseSimple-->
There several ways to set up the ptII project,
<ol>

<li> <a href="#NoSVN">Eclipse is unaware of the version control aspects of the project.</a>
<br>If you are downloading the source from major Ptolemy release,
and don't want to update regularly, then use this choice.

<br>(No Eclipse Subversion plug-in (Subversive),
 No Subversion (<code>svn</code>) from the command line).

<li> <a href="#NoSubversive">Eclipse is unaware of the version control aspects of the project, use the shell version of Subversion to update the tree.</a>

<br>(No Eclipse Subversion plug-in (Subversive),
 use Subversion (<code>svn</code>) from the command line).

<li> <a href="#Subversive">Eclipse is aware of the Subversion aspects of the project.</a> 
You can use both Eclipse and shell version of Subversion to update the tree.
<br>(Use both the Eclipse Subversion plug-in (Subversive) and the
shell <code>svn</code> command).
</ol>
<!--eclipseSimple-->


<!--/eclipseSimple-->
Without Subversive, you'll need to manage the Subversion aspects in the
usual way, i.e. with Subversion commands being submitted to a bash
shell.  With Subversive, Eclipse will do all sorts of things to "help"
you. Most of these things are good, but there is a learning curve.


<p>Please choose <b>one</b> of the methods below to set up Eclipse for
Ptolemy II.

<h3><a name="NoSVN">1. Eclipse is unaware of the version control aspects of the project.</a> (No Subversion)</h3>

If you are downloading the source from major Ptolemy release,
and don't want to update regularly
<!--eclipseSimple-->

<ol>

<li> Download a ptII source tree from
<a href="http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIlatest#in_browser" target="_top"><CODE>http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIlatest</CODE></a>
<br> The Windows and Mac OS X installers include the source, or you may
install a separate source-only download.

<li>Eclipse uses the <code>.classpath</code> file to set paths and exclude files.
  There are two choices:
  <ol>

    <li> In the Ptolemy II source tree,
      copy <code>.classpath.default</code> to <code>.classpath</code>.
      This choice is the simpler choice, but might exclude optional
      third party packages.

    <li> Run <code>./configure</code>.  This choice is more complex,
      especially for Windows users.  However, this choice will include
      optional third party software that is already installed on your
      machine.

  </ol>

  Choose <b>one</b> of the options below
   <h4>A. Copy .classpath to .classpath.default</h4>
   <ul>
   <li>(<i>Mac OS X</i>): 
     Unfortunately, by default the Mac OS X Finder hides files whose names
     begin with a period, such as <code>.classpath</code>.  One solution
 is to follow the instructions from:
  <a href="http://www.macworld.com/article/51830/2006/07/showallfinder.html"><code>http://www.macworld.com/article/51830/2006/07/showallfinder.html</code></a>:
     <ol>
       <li>Start up the Terminal application, which may be found as
        <code>/Utilities/Terminal.app</code>.  Enter:
	 <pre>
	   defaults write com.apple.Finder AppleShowAllFiles YES
	 </pre>
        <li> Restart the Finder by holding down the Option key, then
	  clicking and holding on the Finder icon in the Dock.  Then, 
	  select "Relaunch".  Or, log out and log back in again.

       <li>Start up the Terminal application, which may be found as
        <code>/Utilities/Terminal.app</code>
       <li>In the Terminal, change to the directory where the Ptolemy II
	 source code was installed.  For example:
	 <pre>
	   cd /Applications/Ptolemy/ptII8.1.devel
	 </pre>  
       <li> Copy the files:
         <pre>
           cp .classpath.default .classpath
         </pre>
     </ol>
   <li>(<i>Windows</i>): 
     <ol>
     <li>Find the Ptolemy II source distribution,
     which by default would be <code>c:\Ptolemy\ptII8.1.devel</code>.
     <li>Right click on <code>.classpath</code> and select delete.
     <li>Right click on <code>.classpath.default</code>, select copy.
     <li>Select paste and paste a copy of the file.
     <li>Right click on the copy, select rename and rename the file
       to <code>.classpath.default</code>.
     </ol>
   </ul>
   <p><b>OR</b></p>
   <h4><a name="#runConfigure">B. Run ./configure</a></h4> 

   Ptolemy II includes a number of packages that rely on software that
   you may or may not have installed, such as MATLAB, the rxtx
   package (for serial port connections), joystick support, Java
   Advanced Imaging (JAI), the Java Media Framework (JMF), and Java
   3D.  If you wish to use or extend these features, you will need to
   perform a few extra steps.  These steps require execution of a
   script called <code>configure</code> in the Ptolemy II home
   directory, which in turn requires (on Windows) installation of
   Cygwin, a package that offers Unix-like facilities within Windows.

   <p>The procedure below will modify the <code>.classpath</code> file
   that is provided in the version control repository to customize it
   for the software that you have installed.</p>

    <ul>
     <li>(<i>Mac OS X</i>): Using the Terminal to run configure
     <ol>
       <li>Start up the Terminal application, which may be found as
        <code>/Utilities/Terminal.app</code>
       <li>In the Terminal, change to the directory where the Ptolemy II
	 source code was installed.  For example:
	 <pre>
	   cd /Applications/Ptolemy/ptII8.1.devel
	 </pre>  
       <li> Set <code>$PTII</code> to the location of the source tree:
	 <pre>
	   export PTII=`pwd`  
	 </pre>  
       <li> Make <code>configure</code> executable.
	 <pre>
	   chmod a+x configure
	 <pre>
       <li> Run <code>./configure</code>
         <pre>
	   ./configure
         </pre>
     </ol>

   <li>(<i>Windows</i>): Install Cygwin and run configure

   Unfortunately Windows does not ship with Unix shell commands
   like <code>make</code>.  The workaround is to install Cygwin,
   see <a href="http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIlatest/cygwin.htm"><code>http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIlatest/cygwin.htm</code></a>
      <ol>
	<li> Start up the Cygwin Bash shell: <code>Start</code> | <code>Run</code> | <code>Cygwin</code>
	<li> Change to the directory where the Ptolemy II source code was
	  installed.  For example:
	  <pre>
	    cd c:/Ptolemy/ptII8.1.devel
          </pre>
	  Note that if there are <b>spaces</b> in the path name to the directory
	    where your Ptolemy installation is located, then you should use
	    double quotes around the path:
	    <code>cd "c:/Documents and Settings/<i>yourLogin</i>/workspace/ptII"</code> 
	<li> Set <code>$PTII</code> to the location of the Ptolemy II source tree:
	  <pre>
	    export PTII=c:/Ptolemy/ptII8.1.devel
	  </pre>
	    Again, if there are spaces in the path, use double quotes:
            <code> export PTII="c:/Documents and Settings/<i>yourLogin</i>/workspace/ptII"</code> 
	<li>  Run:
	  <pre>
	    ./configure
	  </pre>  
	  This will create <code>$PTII/.classpath</code>
      </ol>
    </ul>

 <li> If Eclipse is not running, start up Eclipse

 <li> In Eclipse, do  <code>File</code> | <code>New</code> | <code>Project</code>.
 <li> In the "New Project" window, select "Java" &gt; "Java project", Click Next.
<center>
<p><img src="../img/eclipseNewProject.png" alt="Eclipse New Project" width="525" height="500"></p>
</center>

<li>In the "New Java Project" window:
   <br> In "Project Name", enter any project name,  <code>ptII</code>
  is a common choice.
   <br> Uncheck "Use default location" and browse to the location of
  the source tree.
  <br>(<i>Mac OS X</i>):  For example, browse to <code>/Applications/Ptolemy/ptII8.1.devel</code>
  <!-- In "Project Layout", check "Use project folder as root for
  source and class files".  If "Project Layout" is not selectable, then
  that means that there is already a <code>.eclipse.epf</code> file in the
  default location.  This is usually not a problem, but to be safe,
  exit Eclipse, remove the file and restart Eclipse. -->
  <br> Press "Next".
  <br> Below is the New Java Project window:
  <center>
  <p><img src="../img/eclipseNewJavaProject.png" alt="Eclipse New Java Project" width="603" height="704"></p>
  </center>
  <b>Warning</b>: If the "Setting Build Paths" window comes up with a message
  "The output folder has changed. Do you want to remove all generated resources
  from the old location ptII/bin", then the problem is that the
  <code>.classpath</code> file was not found.  It is best if you exit
  Eclipse, create the <code>.classpath</code> file and redo the above steps.
<li> In the "New Java Project" window, select
 "Allow output folders for source folder", then click "Finish"
  <br> Below is the second New Java Project window:
  <center>
  <p><img src="../img/eclipseNewJavaProject2.png" alt="Eclipse New Java Project" width="603" height="704"></p>
  </center>
<li>When asked if you want to shift to the Java perspective, click on Yes.
<!--/eclipseSimple-->
<li>Under the "Project" menu choice, select "Build All", 
"Run in background" and then "Build Automatically" 
<!--eclipseSimple-->
<li>The workspace will take a few minutes to build.
<!--/eclipseSimple-->
<li>Go to <a href="#runningPtolemy">Running Ptolemy II</a> below.
<!--eclipseSimple-->
</ul>

</ol>

<!--/eclipseSimple-->

<h3>OR</h3>
<h3><a name="NoSubversive">2. Eclipse is unaware of the version control aspects of the project, use the shell version of Subversion to update the tree.</a></h3>

<ol>
   <li>Install Subversion:
    <ul>
      <li>(<i>Mac OS X</i>): Mac OS X already has Subversion installed.
       To test this, start up a Terminal window and run <code>svn help</code>.
      <li>(<i>Windows</i>): Windows does not have Subversion installed.
      <ul>
        <li> <a href="http://tortoisesvn.tigris.org/#in_browser" target="_top">Tortoise SVN</a> - Windows GUI Client
          <br> <i>If you are not installing the Eclipse Subversive plugin, then choose TortoiseSVN</i>
        <li> <a href="http://www.cygwin.com/#in_browser" target="_top">Cygwin</a> - Windows command line client
         <br> If you are more comfortable with a command line, then choose Cygwin. Make sure that you also install Cygwin's Subversion package.
     </ul>
    </ul>
  <li> To check out the ptII svn repository with <b>read-only</b> access:
     <pre>
     svn co svn://source.eecs.berkeley.edu/chess/ptII/trunk ptII
     </pre>
     <br><B>Note:</B> Most users will select <CODE>svn://</CODE> because
     they will be accessing the tree with <B>read-only</B> Subversion access.
    <br>If you have an 
    <a href="http://chess.eecs.berkeley.edu/ptexternal/#in_browser" target="_top">ssh account</a>
    on <code>source.eecs.berkeley.edu</code>, then check out ptII with
    read/write access:
    <pre>
    svn co svn+ssh://source.eecs.berkeley.edu/chess/ptII/trunk ptII
    </pre>
    Or, if your user id on source.eecs is different than your current user id
    on your machine:
    <pre>
    svn co svn+ssh://<I>yourID@</I>source.eecs.berkeley.edu/chess/ptII/trunk ptII
    </pre>

   <li>Configure the .classpath and .project files. See <a href="#.classpath.default"><CODE>.classpath.default</CODE></a>. below.
   <li>Create the ptII project
     <ol>
     <li> In <code>File</code> | <code>New</code> | <code>Project</code>,
     select 'Java project'.
     In the 'Contents' box, click on 'Create project from existing source'
     and browse to the PTII directory. Finish.

     <li>When asked if you want to shift to the Java perspective, click on Yes.
     </ol>
   <li>Go to <a href="#setupSubversion">Setup the Subversion Configuration to Sane Settings</a> below.
</ol>

<h3>OR</h3>

<h3>3. Setting up Eclipse for use with Subversion: <a name="Subversive">Installing Subversive</a></h3>
<p>There are at least two Subversion plugins for Eclipse, Subversive and Subclipse.  Either will work, for a brief comparison, see <a href="http://chess.eecs.berkeley.edu/ptexternal/wiki/Main/Subversion#SubclipseVsSubversion" target="_top">Subclipse vs. Subversion</a>.  The instructions below are for Subversive. To use Subclipse, see <a href="https://kepler-project.org/developers/reference/kepler-and-eclipse#7-installing-subversion-svn" target="_top">Installing Subversion (SVN) into Eclipse</a>.

<p>The <a href="http://www.eclipse.org/subversive/downloads.php#in_browser" target="_top">Subversive</a>
Eclipse plug-in adds Subversion to Eclipse.  After installation,
you can use either Eclipse to manage your project, or the <code>svn</code>
from the command line.

<p>
Follow the <a href="http://www.eclipse.org/subversive/downloads.php#in_browser" target="_top">Subversive installation instructions</a> or these instructions below
<ol>
<li> To download Subversive, in Eclipse, follow these menus
<br><i>Mac OS X</i>:
<br>The first time software is to be added the menu will be:
 <code>Help</code> | <code>Install New Software</code> 
<br><i>Windows</i>:
 <code>Help<code> | <code>Software Updates</code> | <code>Available Software</code>.  
<li>In the "Work with" field, select "Helios - http://download.eclipse.org/releases/helios" from the drop down.
<br>Expand the "Collaboration" tab and check the box next to
  "Subversive SVN Team Provider (Incubation)"
 
<li>Then click <code>Next</code>, <code>Next</code> again and click
  through the license agreement and hit <code>Finish</code.  
<li> When the "Software Updates" window appears and asks about a
  restart, select "Restart Now" and restart.
<li> When Eclipse restarts, bring up the preferences window:
  <br> (<i>Mac OS X</i>: <code>Eclipse</code> | <code>Preferences</code>)
  <br> (<i>Windows</i>: <code>Window</code> | <code>Preferences</code>)
  <br> Then do <code>Team</code> | <code>SVN</code>.  When you click
  on the <code>SVN</code>, the "Subversion Connector Discovery" window
  will pop up.  (See <a
  href="http://www.polarion.com/products/svn/subversive/connector_discovery.php#in_browser">http://www.polarion.com/products/svn/subversive/connector_discovery.php</code></a>
  for details.)
  <li> In the "Subversion Connector Discovery" window, what version
  you select depends on what version of svn is installed on your
  machine.
  <br>If <code>svn --version</code> returns 1.4, then install SVN Kit 1.1.7
  <br>If <code>svn --version</code> returns 1.5, then install SVN Kit 1.2.3
  <br>If <code>svn --version</code> returns 1.5, then install SVN Kit 1.3.0
  <p>Note: if you install a more recent version of the plugin than the
  version of the command line <code>svn</code> tool, then
  you will not be able to use the command line <code>svn</code> to
  update or modify the tree that is checked out by Eclipse.
  <br>If you
  run <code>svn</code> on a tree checked out by Eclipse and get a message <code> svn: This client is
  too old to work with working copy '.'; please get a newer Subversion
  client</code>, then the solution is to <a
  href="http://subversion.apache.org/packages.html#in_browser">update
  svn</a>.

  <p>Then do "Finish", "Next", "Next", Accept the license and then
  "Finish".
 
  <li>If you get a security warning about unsigned software, click
  "OK".
  <li> When prompted for a restart, select "Restart Now".
</ol>

<h3><a name="setupSubversion">Setup the Subversion Configuration to Sane setting</h3>
Sadly, Subversion is by default configured with nonsense initial default 
values for commit times and end of line settings.
<h4>Tell Subversion to use commit times</h4>

In the default settings, if you check out files with subversion, then they will 
have their modification times set to the current time.  This is incorrect:
<ol>

<li>The ptII tree includes derived files that are generated by
Autoconf, JavaCC and Antlr. If the commit times are not preserved,
then the source file might have a mod time later than the derived file
which means that either the tool must be run or else the build system
must touch the derived file.
<li>If the commit times are preserved, the <code>ls -ltr</code> will
quickly show which files were changed when
</ol>

<p>To change the Subversion configuration, hunt for the
<code>.subversion/config</code> file.  
 <p>Under Windows with Cygwin, you
might find it as <code>$HOME/.subversion/config</code>.  Another place to look
is <code>c:/Documents and Settings/<i>yourlogin</i>/Application Data/Subversion/config. 
 <p>On the Mac, try <CODE>/Users/<I>yourlogin</I>/.subversion</CODE>.
 <p>If the directory does not exist, try running <CODE>svn --version</CODE> to create the directory.

 <p>Make this change to <CODE>.subversion/config</CODE>
<pre>
### Set use-commit-times to make checkout/update/switch/revert
### put last-committed timestamps on every file touched.
use-commit-times = yes
</pre>

<h4>Tell Subversion to automatically set the eol style</h4>
With the default settings, if you use Subversion to add a makefile,
then the file will be checked in with binary settings.  When the
file is checked on out non-Windows platforms, then the file will have
<code>\r\n</code> characters, which will break Solaris <code>/usr/ccs/bin/make</code> and cause other problems.

<p>In addition, we would like keyword strings like 
<code>$Id$</code> to be automatically expanded and updated.

<p>Find the <code>.subversion/config</code> file and uncomment the
<code>enable-auto-props</code> line so that it looks like:
<pre>
enable-auto-props = yes 
</pre>

Also, uncomment the <CODE>[auto-props]</CODE> and the section below that
sets the properties for the files.  Also, set props for 
at least <CODE>makefile</CODE>, <CODE>*.tcl</CODE> and <CODE>*.mk</CODE> files.
See <a href="svn-config-auto-props.txt"><CODE>$PTII/doc/coding/svn-config-auto-props.txt</CODE></a> for a more complete set of properties.

The bottom of the <CODE>.subversion/config</CODE> file should look like:

<pre>
### Settings for your ~/.subversion/config file.  To use this:
### 1) Edit your ~/.subversion/config file
### 2) Insert the contents of this file into your
###    ~/.subversion/config file
### 3) You must set "enable-auto-props" to yes
###    BEFORE the [auto-props] line.
###    _BE_SURE_ to check that [auto-props] does NOT appear twice
###    If you append the contents of this file at the end
###    Of your config file, you will need to comment out
###    the preexisting [auto-props] line.

### Set enable-auto-props to 'yes' to enable automatic properties
### for 'svn add' and 'svn import', it defaults to 'no'.
### Automatic properties are defined in the section 'auto-props'.
### For this to work, the "enable-auto-props = yes" line should
### be before the "[auto-props]" line.
enable-auto-props	 = yes

[auto-props]

### Section for configuring automatic properties.
### The format of the entries is:
###   file-name-pattern = propname[=value][;propname[=value]...]
### The file-name-pattern can contain wildcards (such as '*' and
### '?').  All entries which match will be applied to the file.
### Note that auto-props functionality must be enabled, which
### is typically done by setting the 'enable-auto-props' option.
###
### NOTE: There is a bug in svn-1.5 and earlier where lines
### that differ only in case cause problems - only the first
### line is read.  See
### http://subversion.tigris.org/issues/show_bug.cgi?id=2036
### 
*.MF = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.aart = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.ac = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.am = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.apt = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.avi = svn:mime-type=video/avi
*.bat = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.bsh = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.c = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.cat = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.cgi = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.classpath = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.cmd = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.cnd = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.conf = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.config = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.cpp = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.css = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.cwiki = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.data = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.dcl = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.doc = svn:mime-type=application/msword
*.dsp = svn:eol-style=CRLF
*.dsw = svn:eol-style=CRLF
*.dtd = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.egrm = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.ent = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.fn = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.ft = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.fv = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.g = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.gif = svn:mime-type=image/gif
*.grm = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.gz = svn:mime-type=application/x-gzip
*.h = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.handlers = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.htc = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.html = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.ico = svn:mime-type=image/x-icon
*.ihtml = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.in = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.java = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.jmx = svn:eol-style=LF
*.jpg = svn:mime-type=image/jpeg
*.jpg= svn:mime-type=image/jpeg
*.js = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.jsp = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.junit = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.jx = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.m = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.m4 = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.manifest = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.mdo = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.meta = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.mf = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.mk = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.mod = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.mov = svn:mime-type=video/quicktime
*.mpg = svn:mime-type=video/mpeg
*.ms = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.n3 = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.nroff = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.patch = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.pdf = svn:mime-type=application/pdf
*.pen = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.php = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.pl = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.pm = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.png = svn:mime-type=image/png
*.pod = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.pom = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.ppt = svn:mime-type=application/powerpoint
*.project = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.properties = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.py = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.rb = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.rdf = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.rnc = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.rng = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.rnx = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.roles = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.rss = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.schemas = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.sh = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.sh = svn:eol-style=native;svn:executable
*.sql = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.svg = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.tcl = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.tgz = svn:mime-type=application/x-compressed
*.tif = svn:mime-type=image/tiff
*.tiff = svn:mime-type=image/tiff
*.tld = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.txt = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.types = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.vm = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.vsl = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.wsdd = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.wsdl = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.xargs = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.xcat = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.xconf = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.xegrm = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.xgrm = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.xhtml = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.xhtml2 = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.xlex = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.xlog = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.xls = svn:mime-type=application/excel
*.xmap = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.xml = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.xroles = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.xsamples = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.xsd = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.xsl = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.xslt = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.xsp = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.xtest = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.xul = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.xweb = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.xwelcome = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.zip = svn:mime-type=application/zip
.htaccess = svn:eol-style=native;svn:keywords=Author Date Id Revision
INSTALL = svn:eol-style=native;svn:keywords=Author Date Id Revision
KEYS = svn:eol-style=native;svn:keywords=Author Date Id Revision
LICENSE = svn:eol-style=native;svn:keywords=Author Date Id Revision
makefile = svn:eol-style=native;svn:keywords=Author Date Id Revision
Makefile = svn:eol-style=native;svn:keywords=Author Date Id Revision
NOTICE = svn:eol-style=native;svn:keywords=Author Date Id Revision
README = svn:eol-style=native;svn:keywords=Author Date Id Revision
abs-linkmap = svn:eol-style=native;svn:keywords=Author Date Id Revision
abs-menulinks = svn:eol-style=native;svn:keywords=Author Date Id Revision


</pre>


<p>See <a href="http://svn.haxx.se/users/archive-2003-12/0063.shtml#in_browser" _target="_top">Subversion Users: Re: Setting svn:eol-style</a>
and <a href="http://maven.apache.org/developers/svn-eol-style.txt#in_browser" target="_top"><code>http://maven.apache.org/developers/svn-eol-style.txt</code></a>

<p>BTW - To set the style on already checked in file, run:
<pre>
svn propset svn:eol-style native <i>filename</i>
</pre>
To set the keywords on an alredy checked in file, run:
svn propset svn:keywords "Author Date Id Revision" <i>filename</i>
</pre>

Then run <code>svn commit</code> to commit the change. 

<h3>SSH Configuration.</h3>
If you will be accessing the ptII repository with <b>read/write</b>
access, then you will need to do a little more configuration concerning
passwords.
 <p><B>Note:</B> Most users will <b>not</b> need to do this configuration
 because they will be accessing the tree
 with <B>read-only</B> Subversion access.  Read-only users can 
skip to <a href="#CheckOutPtII">Check Out Ptolemy II from the Subversion repository</a>

<p>To access the ptII repository with read/write access, you will
need configure Subversive to use your password.  If don't do this step
and you leave the default
settings, and have Cygwin ssh installed, then
<code>c:/cygwin/bin/ssh.exe</code> window will pop up each time ssh
is called.

<p>The fix is to set Subversive to use SVNKit
<code>Window</code> | <code>Preferences</code> | <code>Team</code> | <code>SVN</code> | <code>SVN interface</code> | <code>SVNKit (Pure Java)</code>
| <code>OK</code>


<h3><a name="CheckOutPtII">Check Out Ptolemy II</a> from the Subversion repository</h3>

Below we describe how to set up Eclipse so Eclipse
manages the Subversion interaction.

<p>
Eclipse will manage your ptII code tree as a <em>project</em> called
the ptII project.  Assuming Eclipse is running:
<ol>
<li>Install Subversive by <a href="#Subversive">following the instructions above</a>.

<li> In Eclipse, add the ptII SVN Repository:

<code>Window</code> | <code>Show View</code> | <code>Other</code> | <code>SVN</code> | <code>SVN Repositories</code>
<li>In the SVN Repository view, right click, select <code>New</code> and set the url.
<br>To check out the ptII svn repository with <b>read-only</b> access:
<pre>
https://source.eecs.berkeley.edu/svn/chess/ptII
</pre>
or
<pre>
svn://source.eecs.berkeley.edu/chess/ptII
</pre>

 <p><B>Note:</B> Most users will select <code>https://</code> or 
<CODE>svn://</CODE> because
they will be accessing the tree with <B>read-only</B> Subversion access.
<br>If you have an 
<a href="http://chess.eecs.berkeley.edu/ptexternal/#in_browser" target="_top">ssh account</a> on <code>source.eecs.berkeley.edu</code>, then check out ptII with
read/write access:
<pre>
svn+ssh://source.eecs.berkeley.edu/home/svn/chess/ptII
</pre>
Or, if your user id on source.eecs is different than your current user id
on your machine:
<pre>
svn co svn+ssh://<I>yourID</I>@source.eecs.berkeley.edu/chess/ptII
</pre>
Read/write users will be prompted for their source.eecs.berkeley.edu
username and password. This typically happens more than once since in case the svn+ssh protocol is being used passwords are not cached.

<li>If you get a "Certificate Problem" window, then select
<code>Trust</code> or <code>Trust Always</code>.  For details and
a workaround, see <a href="http://chess.eecs.berkeley.edu/ptexternal/wiki/Main/Subversion#svnCertficateIsNotIssuedByATrustedAuthority" target="_top">Certificate is not issued by a trusted authority</a>.

<li>In the SVN Repository view, right click on <code>trunk</code> and select <code>Find/Check out As</code>

<blockquote>
 <table border="1">
  <tr>
   <td>
     Be sure to check out the <b><code>trunk</code></b> not the
     entire tree, which include all the branches and the trunk.
   </td>
  </tr>
 </table>
</blockquote>

Follow the wizard, creating selections as follows:
<ul>
<li> In the "Check Out As" window, use the default, <code>Check out as a project configured using the New Project Wizard</code>, then hit <code>Finish</code>.

<li> In the "Select a wizard" window, select <code>Java</code> | <code>Java Project</code>, then hit <code>Next</code>.
<li> In the "Create a Java Project" window,
     <br> set "Project Name" to: <CODE>ptII</CODE>
     <br> set "Project Layout" to <code>Use project folder as root for sources and class files</code>.
     This is done so that <code>$PTII/bin</code> will contain the Ptolemy II command line scripts instead of the
     <code>*.class</code> files created by Eclipse.
<li> Click Finish.
<li> If you see a Confirm Overwrite Window that says:
<blockquote>
 <code>The project you created, ptII, contains resources other than the standard .project file. If any of those resources have the same name and relative location of a resource you are checking out, the local resource will be replaced with the resource from the repository</code>
</blockquote>
then you probably did not change "Project Layout" as per above.  Click cancel and recreate the Java Project.
<li> In the "Open Associated Perspective?" window, click "Yes". 
</ul>

<p>
<li> Wait for the checkout to finish. <I>Go get coffee.</I>
 <br><B>Note:</B>If you did not disable build automatically, as
suggested above, then Eclipse will build the project and produce
<B>thousands of errors</B>. This is not really a problem.  You will
fix the errors below with the <CODE>.classpath.default</CODE> file.

<p>
<li> You will want to view the project in the Java perspective.
If you aren't already in the Java perspective, select
<code>Window</code> | <code>Open Perspective</code> | <code>Java</code>
in the menu.
By default, Eclipse offers a "Package Explorer" as the main navigation
mechanism for the source files. Many developers much
prefer to use the "Navigator."
To get the Navigator, select
<code>Window</code> | <code>Show View</code> | <code>Navigator</code>
in the menu.
You can now browse the source files.

<p>
<li> <a name=".classpath.default">Find</a>
the file in the ptII home directory called
<CODE>.classpath.default</CODE> and copy it into a new file called
<CODE>.classpath</CODE>.
 <br>Note that you can use the Eclipse Navigator browse to the
<CODE>.classpath.default</CODE> file, open the file, copy the contents,
open <CODE>.classpath</CODE>, paste the contents and save <CODE>.classpath</CODE>.
 <br>Or, you can use Windows Explorer or the shell.

<li> In Eclipse, perform a Refresh on the ptII project
by <code>Window</code> | <code>Open Perspective</code> | <code>Java</code
<br> &nbsp;&nbsp;&nbsp;Go to the Package Explorer or the Navigator.
<br> &nbsp;&nbsp;&nbsp;Right mouse click on the ptII icon and select Refresh.

 <br><B>Note:</B>If you do not do copy <CODE>.classpath.default</CODE>
and select "Refresh", then Eclipse will produce
<B>thousands of errors</B>. This is not really a problem. It reflects
that you probably don't have installed many optional packages that
are needed to build subsets of Ptolemy II. You can ignore the errors
(not advised, since they will mask errors you make), or you can copy
the <CODE>.classpath.default</CODE> file and rebuild.

<h4>Running configure</h4>
Alternatively, you can <a href="#runConfigure">run <code>./configure</code></a>,
which searches your environment for 3rd party packages and updates
<code>.classpath</code>.

<ul>

<li>If, after running <code>configure</code< you plan on running the
Ptolemy II startup scripts in
<CODE>$PTII/bin</CODE> on the command line, you will probably
want to run the following commands within Cygwin bash:
<pre>
cd $PTII/bin
make
</pre>

<li> In Eclipse, after running <code>configure</code>, perform a Refresh on the ptII project
by <code>Window</code>| <code>Open Perspective</code> | <code>Java</code>
<br> &nbsp;&nbsp;&nbsp;Go to the Package Explorer or the Navigator.
<br> &nbsp;&nbsp;&nbsp;Right mouse click on the ptII icon and select Refresh.
<br> This will
cause Eclipse to see the new <code>ptII/.classpath</code> and to build
the project (or you may have to manually rebuild if you turned
off automatic rebuild).
</ol>
</ol>  

<p>
<li> Build Ptolemy II by selecting <code>Project</code> | </code>Build All</code>.
(<I>If Build All is greyed out, then perhaps "Build Automatically" was
not disabled and Ptolemy has been built.  See above for more about Build Automatically</I>.)
You will get many warnings that you can ignore, but hopefully no errors.

</ol>
<!--eclipseSimple-->
<h3><a name="runningPtolemy">Running Ptolemy II</a></h3>

<ol>
 <li> In the Run menu, select "Run Configurations...".

<p> <li> In the resulting dialog, select "Java Application" and click "New".

<p> <li> In the dialog, fill in the boxes as follows:
<ul>
<li> Name: <CODE>Vergil</CODE>
<li> Project: <CODE>ptII</CODE>
<li> Main class: <CODE>ptolemy.vergil.VergilApplication</CODE>
</ul>

 <p> <li> Press the Run button.
</ol>

The Ptolemy II welcome window should appear.
 <p>You may now wish to read the <a href="http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIlatest/ptII/doc/design/usingVergil/index.htm#in_browser" target="_top">Using Vergil</a>
tutorial.

<h2><a name="simpleDebug">Simple Debugging Session</a></h2>

<ol>
 <li> Locate ptolemy/vergil/VergilApplication in the Explorer and
double click. Place a breakpoint on the first line of main()
by using <code>Run</code> | <code>Add/Remove Breakpoint</code>

 <li> Tell Eclipse which class to run with <code>Run</code> | <code>Run</code>.
On the Main
tab, select the Ptolemy II package and enter
ptolemy.vergil.VergilApplication as Main class.

 <li> Press the Run button
 <li> To debug, quit Vergil, and place a breakpoint in, say, the fire() method
of ptolemy.domains.ct.kernel.CTBaseIntegrator. Then <code>Run</code> | <code>Debug</code>, and
as above. Open the Lorenz CT demo from the Quick Tour and run it.
 </ol>

<!--/eclipseSimple-->
<h3>Synchronizing with the repository</h3>

<ol>
<li>In the Navigator view scroll/open until you see the resource
(directory or file) to be synchronized.
<li>Right click that resource and select Team->Synchronize With Repository...
<li>The Synchronize view should then be visible.
<li>Select the Incoming, Outgoing, or Incoming/Outgoing menu bar icon as appropriate
</ol>

<h3>Restoring a file from the repository</h3>
<ol>
<li>In the Navigator view scroll/open until you see the resource (directory or file) to be restored.
<li>Right click that resource and select Replace With->Latest From Head.
</ol>

<h3>Copying Files</h3>
Usually, it is better to extend Java classes than to copy them, but sometimes copying files
under Subversion is useful.  To copy files, use the <code>svn cp</code> command.  Do
not drag and drop directories as the directories contain a <code>.svn</code> directory
that will have settings for the source location.  Instead, use <code>svn cp</code>.
See also <code>svn mv</code>.

<h3><a name="#debugTclTests">Debugging Tcl Tests</a></h3>
See <a href="testing.htm">Testing Ptolemy II</a> for details.
<ol>
<li> In Eclipse, go to Run -&gt; Debug Configurations
<li> Select Java Application and then click the New icon.
<li> In the Main tab, set the "Name:" to ptjacl, in "Main class:", enter <code>tcl.lang.Shell</code>.
<li> <i>Optional:</i> In the Arguments tab, under "Program arguments", enter <code>alljtests.tcl</code> or any individual test tcl file. 
(E.g. </code>SimpleDelay.tcl</code>).
Or, leave the "Program arguments" field blank and when ptjacl is running (see below), enter text in to the Eclipse console. 

<li> <i>Optional:</i> In the Arguments tab, under "VM arguments", enter <CODE>-Dptolemy.ptII.dir=<I>your PtII directory</I></CODE>
<br>(E.g. <CODE>-Dptolemy.ptII.dir=c:/hyzheng/ptII</CODE>).<br /> In case your directory path contains
spaces, you need to use quotes. (E.g. <CODE>-Dptolemy.ptII.dir="c:/my workspace/ptII"</CODE>).


<li> In the "Working directory:" pane, select "Other:", browse to the directory containing the tcl 
tests.
 <br> (E.g. <CODE>C:\hyzheng\ptII\ptolemy\domains\de\lib\test</CODE>)

<li> Select Debug.

</ol>

The nice thing of using Eclipse is that you can very easily locate where 
the exception is thrown by clicking the classes listed in the stack trace. 
You may further register a breakpoint to do more diagnosis.
<!--eclipseSimple-->

<h2><a name="Troubleshooting">Troubleshooting</a></h2>

<h3>Preferences</h3>
If you have already used Eclipse and you would like to start over with
new projects and preferences, remove the <code>workspace</code> directory in the
Eclipse directory.  The <code>workspace</code> directory will only
appear if you have already run Eclipse.  <b>Note that removing the
<code>workspace</code> directory will cause Eclipse to 'forget'
about any projects that you may have set up</b>

<h3>Build Error: Assert cannot be resolved</h3>
<p>If, when building, the Problem tab shows "Assert cannot be resolved",
then the problem is that Junit is not being found.

<h3>Rebuilding Briefly flashes a window</h3> 
<p>If you have problems where clicking on build briefly flashes up
a window, look in <code>$PTII/.classpath</code> for and empty
exclusion that looks like <code>||</code>

<p>If you have problems with the classpath, look in the 
<code>workspace/.metadata/log</code> file that is in
the directory where eclipse is installed. For more information
about the <code>.metadata</code> directory, see
<a href="#metadata">below</a>.

<h3>Eclipse takes a long time to start up</h3>

If Eclipse takes a long time to start up, then the problem could be 
a problem in your .metadata file.

 <p>Basically, when eclipse starts up, it might try to update
<a name="metadata"><CODE>H:/workspace/.metadata</CODE></a>
.  The solution is covered in
<a href="http://www.eclipse.org/documentation/html/plugins/org.eclipse.platform.doc.user/doc/tasks/running_eclipse.htm#in_browser" target="_top"><CODE>http://www.eclipse.org/documentation/html/plugins/org.eclipse.platform.doc.user/doc/tasks/running_eclipse.htm</CODE></a>:

The way I figured this out was by running Norton Antivirus and
doing View -&gt; File System Realtime Scan Statistics and then I noticed 
that my machine was updating H:/workspace/.metadata

 <p>I think I introduced the problem by clicking on the Eclipse.exe
binary and selecting Pin to Start Menu.  My solution was to remove the
Eclipse bogus entry in the start menu and then create a shortcut,
change Start in property and then pin that shortcut to my start menu.

<!--/eclipseSimple-->

<h2>Instructions for adding an actor in Eclipse</h2>
Based on text by Mehran Meschian.
<p>In this example, we copy <code>ptolemy/actor/lib/Ramp.java</code> and create a new actor
called <code>Ramp2</code>
<ol>
<li> Open Eclipse and choose the work space that you have your Ptolemy project there (mine is PtII 8.1.devel)
<li> Open the PtII8.1.devel folder in eclipse and then open  Ptolemy -&gt; actor -&gt; lib -&gt; string
<li> In string folder copy the java class (our simple actor)
<li> Rename the java file to Bmh and debug the errors that come because of this renaming.
<li> At the first line of the Java code add:     package ptolemy.actor.lib.string;

<li> When there is no more error Run the java file and you should see a Bmh.class file in the tree as well (In the string branch). For now close the GUI window that opened after running.

<li>	In the same place that Bmh.java and Bmh.class files exist, there is a string.xml file. Open it.
<li>	At the top of the eclipse console, you should see two options: Design & Source. Click on Source to see the content of the xml
<li>	Add the following bold and red text to the location in the xml file. Then save and run the xml file:
<pre>
&lt;property name="_icon" class="ptolemy.vergil.icon.AttributeValueIcon"&gt;
          &lt;property name="attributeName" value="function"/&gt;
          &lt;property name="displayWidth" value="11"/&gt;
        &lt;/property&gt;
      &lt;/entity&gt;

      &lt;entity name="Bmh" class="ptolemy.actor.lib.string.Bmh"&gt;
       &lt;doc&gt;Boyer Moore Horspool&lt;/doc&gt;
      &lt;/entity&gt;

      &lt;entity name="StringIndexOf" class="ptolemy.actor.lib.string.StringIndexOf"&gt;
       &lt;doc&gt;Output the length of an input string&lt;/doc&gt;
      &lt;/entity&gt;
</pre>
<li>	Again in the same tree there is makefile. Open and add the following bold and red text to the location and save and run:
<pre>
PTDIST =        $(PTPACKAGE)$(PTVERSION)
PTCLASSJAR = 	$(PTPACKAGE).jar

# Keep this list alphabetized.
JSRCS = \
        Bmh.java \
	StringCompare.java \
	StringFunction.java \
	StringIndexOf.java \
	StringLength.java \
	StringMatches.java \
</pre>
<li>	Now, back to your Bmh.java and run it again. You should see the welcome window of Vergil.
<li>	Now in the window, go to file- &gt; New -&gt; Graph editor. You should see a new window of graph editor.
<li>	Go to Graph -&gt; instantiate Entity. Then type Ptolemy.actor.lib.string.Bmh in the class name and you will see our Bmh actor in the window.
<li>	Right click on the actor and choose Save Actor in Library. Now if you open the User Library (left side) you can see the Bmh actor there.
<li>	In the case after all of these steps it doesn't work, restart your eclipse and make sure you have saved your xml file and there are Bmh.java and Bmh.class there. If again it doesn't work, there should be something wrong regarding your Ptolemy installation in eclipse. Hope not!!

</body>
</html>
