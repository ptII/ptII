<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <title>Setting up Ptolemy II and Eclipse</title>
<link href="../default.css" rel="stylesheet" type="text/css">
</head>
<body>
<h1>Setting up Ptolemy II and Eclipse</h1>
<p>
These instructions assume you are using Eclipse Galileo under 
Windows or Mac OS X.
Other ways of setting up and building Ptolemy II are described on the
<a href="http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIlatest/ptII/doc/install.htm">
Ptolemy II install page</a>. 
<p>Contents of this page:
<menu>
<li><a href="#Installing">Install Eclipse</a>
<li><a href="#Preferences">Eclipse Preferences for Ptolemy II</a>
<li><a href="#SettingUp">Set up Eclipse for Ptolemy II</a>
  <ul>
  <li> <a href="#NoSVN">Eclipse is unaware of the version control aspects of the project.</a>
  <li> <a href="#NoSubversive">Eclipse is unaware of the version control aspects of the project, use the shell version of Subversion to update the tree.</a>
  <li> <a href="#Subversive">Eclipse is aware of the Subversion aspects of the project.</a> 
  </ul>
<li><a href="#simpleDebug">Simple Debugging Session</a></h2>
<li><a href="#Optional">Optional Extensions</a>
<li><a href="#Troubleshooting">Troubleshooting</a>
</menu>
Other local pages:
<menu>
<li><a href="performance.htm#Eclipse">Profiling using TPTP</a>
</menu>
<h2><a name="Installing">Install Eclipse</a></h2>
<ol>
<li>
Download the latest version of Eclipse from
<a href="http://www.eclipse.org" target="_top">http://www.eclipse.org</a>.
 <br>In July, 2009, we chose
 <B>Eclipse for RCP/Plug-in Developers</B>, which is 187Mb.
The <B>Eclipse for RCP/Plug-in Developers</B> version includes the
plug-in development environment (PDE), which is needed by the backtrack
facility, which is an optional part of Ptolemy II that allows models to
restore their old state.  If the version of Eclipse that you install
does not have the PDE, then there will be build errors, which can be fixed by
excluding <CODE>ptolemy/backtrack/</CODE> from the build.
<li> (<i>Mac OS X</i>):
Untar the download file in <code>/Applications</code>, which will create <code>/Applications/eclipse/Eclipse.app</code>.
<br> (<i>Windows</i>): 
Unzip the download file into an appropriate place, such as <code>C:\Program Files</code>, which will create <code>C:\Program Files\eclipse\eclipse.exe</code>.
<br>If <code>eclipse\eclipse.exe</code> is not created, then it could
be that the security policy on your machine is preventing the creation
of <code>.exe</code> files.  If this is the case, then try running
<code>unzip</code> from the command line.

<li>Finish the installation by running <code>/Applications/eclipse/Eclipse.app</code> or <CODE>eclipse/eclipse.exe</CODE>.
<br>The first time this is run it will complete the installation process.
<br> (<i>Windows</i>): 
If Eclipse fails to start with the message "Windows cannot access the specified device, path or file. You may not have the appropriate permisions to access the item", then it may be necessary to make 
<code>eclipse.exe</code> and a dll executable:
<pre>
chmod a+x eclipse.exe
</pre>
<br>If you get the message "The Eclipse executable launcher was unable to locate its companion shared library", then run the following command
in the <code>eclipse</code> directory.
<pre>
find . -name *.dll -exec chmod a+x {} \;
</pre>
<br>After the first run, normal start-up will occur whenever it is started.


</ol>

<h2><a name="Preferences">Eclipse Preferences for Ptolemy II</a></h2>
<p>
The default configuration of Eclipse has some difficulties with Ptolemy II,
so a few changes are necessary.
<ol>
<li>(<i>Mac OS X</i>):
  There is usuall no need to set the memory size for Eclipse under Mac OS X.  By default, it is set to 512 megabytes.  
  For details about setting the memory size, see:
  <a href="http://help.eclipse.org/ganymede/topic/org.eclipse.platform.doc.user/tasks/running_eclipse.htm">Eclipse Workbench User Guide/Tasks/Running Eclipse</a>.
  
<li>(<i>Windows</i>): 
  There is usually no need to set the memory size for Eclipse.  By default, it is set to 512 megabytes in the
  <code>eclipse.ini</code> file.

<p>In Windows,  create a shortcut to <code>eclipse.exe</code> by going to the 
directory where Eclipse is installed, right clicking on eclipse.exe 
and selecting <code>Create Shortcut</code>. 

<p>To add Eclipse to the start menu, right click on the shortcut and 
select <code>Pin to Start Menu</code>
<p>
<li>Eclipse requires some customization to build Ptolemy II
and to keep the <a href="http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIlatest/ptII/doc/coding/style.htm" target="_top">Ptolemy II coding style</a>.
In the steps below, we
outline changes to be made in the Eclipse Preferences window.
<br> Under <i>Windows</i> the Eclipse Preferences window
is invoked via <code>Window</code> | <code>Preferences</code>.

<br> Under <i>Mac OS X</i> the Eclipse Preferences window
is invoked via <code>Eclipse</code> | <code>Preferences</code>.

<br>For each of the
changes, hit <code>Apply</code>.  When all the changes are done, hit
<code>OK</code>, which will close the Eclipse Preferences Window.

<li>
By default, Eclipse rebuilds a project when any change is made
to a file.  This will result in thousands of errors when Ptolemy II
is first checked out, and during normal usage, can be annoying because
of the pauses it creates. We suggest disabling this feature as
follows:
<ol>
<li> While still in the preferences window 
<br> (<i>Mac OS X</i>: <code>Eclipse</code> | <code>Preferences</code>)
<br> (<i>Windows</i>: <code>Window</code> | <code>Preferences</code>)
<li> Select <code>General</code> | <code>Workspace</code>
<li> Deselect <code>Build automatically</code>.
<li> Click Apply. 
</ol>
<p>
<li>

Ptolemy II source files are worked on by many people with different
editors.  Unfortunately, different text editors interpret tab
characters differently, so it is best to use spaces rather than tabs.
<br>Sadly, the Eclipse developers have chosen to use tabs
as spaces, so you must adjust the Eclipse Java Formatter
if you plan on contributing code to the Ptolemy II tree.

<br>Also, it is best if files end with new line characters, so
that we can run line oriented scripts on them.
<br>In addition, we currently do not want the Eclipse Formatter
to format comments.  We hope to change this policy in the future.

<br>We handle these changes together:
 <ol>
  <li> While still in the preferences window (<code>Window</code> | <code>Preferences</code>),
 <li> Go to <code>Java</code> | <code>Formatter</code> and click
       New
  <li> In the "New Profile" Window, for the Profile name, enter "Ptolemy II"
      Under "Initialize settings with the following profile",
      select "Java Conventions [built-in]"
      (We use Java Conventions over the "Eclipse"
      setting because the Eclipse style uses tabs.)
      Then hit OK
   
  <li> Under the "Indentation" tab, change the Tab policy to "Spaces only". 
  <li> Under the "New Lines" tab, select "at end of file"
  <li> Under the "Comments" tab,
       <br><b>unselect</b> "Enable Javadoc comment formatting" 
       <br><b>unselect</b> "Enable block comment formatting", otherwise the block comments that have &lt;pre&gt; ... &lt;pre&gt; get changed.
       <br><b>unselect</b> "Enable line comment formatting", otherwise the headers for public methods etc. get changed.
 <li> Click OK.
  <li> In the Preferences Window, click Apply.
 </ol>

<li>
Ptolemy II uses some features of Java 5.0.
In particular, <CODE>ptolemy/actor/ptalon</CODE> uses generics,
which require Java 5.0 or later.
<br>Set Eclipse to use Java 5.0 or later source code compliance.
<ol>
 <li> While still in the preferences window (<code>Window</code> | <code>Preferences</code>),
      expand <code>Java</code> | <code>Compiler</code>
 <li> Make sure that Set "Compiler compliance level" is "1.5", "5.0"
 or later.
<i>Note that Java 1.5 is the same as Java 5.0</i>.  What we don't want
is "1.4" or "4.0". 
 <li> Click Apply. 
</ol>

Note the following restrictions about versions of Java and Eclipse
under Mac OS X:
<menu>
<li>Eclipse 3.4.0 will not start up for me under Java 1.6.0_05 on the Mac.
  This means that if "java -version" returns 1.6.0_05, then Eclipse
  failed to start for me.
<li> Within Eclipse 3.4.0 which was started with Java 1.5.0_13, you can
  compile and run your project with either Java 1.5.0_13 or
  Java 1.6.0_13.
<li>Eclipse 3.4.0 Java Projects that include Eclipse Plug-ins don't work
  under either Java 1.5.0_13 or Java 1.6.0_05 on the Mac
</menu>
For details, see <a href="http://chess.eecs.berkeley.edu/ptexternal/wiki/Main/Mac"><code>http://chess.eecs.berkeley.edu/ptexternal/wiki/Main/Mac</code></a>.

<li> Eclipse has very good compiler error/warning.  One of the
warnings complains if a Serializable class does not have
serialVersionUID declared.  Since this warning is only useful
if you are tightly managing serialization, we turn it off:
 <ol>
  <li> While still in the preferences window (<code>Window</code> | <code>Preferences</code>),
    Expand <code>Java</code> | <code>Compiler</code> | <code>Errors/Warning</code>
  <li> Under "Potential programming problems", change
  "Serializable class without serialVersionUID" to "Ignore"
  <li> Under "Generic Types", change
  "Unchecked generic type operation" to "Ignore".
  <li> Under "Generic Types", change
  "Usage of a raw type" to "Ignore".
  <li> Click Apply.  If you are prompted for a full rebuild, click Yes.
 </ol>

<li> The PtDoc Doclet in <code>$PTII/doc/doclets/PtDoclet.java</code>
requires <code>tools.jar</code>, which is only in the Java Development
Kit (JDK), not the Java Runtime Environment (JRE).  So, be sure that a
JDK is selected for building, not a JRE.
<br>While still in the preferences window 
<br> (<i>Windows</i>: <code>Window</code> | <code>Preferences</code>)
<br> (<i>Mac OS X</i>: <code>Eclipse</code> | <code>Preferences</code>)
<ol>
<li> Select <code>Java</code> | <code>Installed JREs</code>
<br>(<i>Mac OS X</i>):  select <code>JVM 1.5.0 (Mac OS X Default)</code>.

<li> Verify that the checked line corresponds with a JDK, not
a JRE.
</ol>

Under Java 1.6, <code>tools.jar</code> must be added the external jars:
<ol>
<li>Windows -> Preferences -> Java -> Installed JREs
<li>Select the default JRE -> Edit -> Add External Jars -> <code></i>Path to JDK</i>/lib/tools.jar</code>
</ol>

<li> Click OK  in the Preferences window to apply all of the above changes.
</menu>

</ol>

<h2><a name="SettingUp">Setting up Eclipse to manage your Ptolemy II development environment</a></h2>

<p>Eclipse will manage your ptII code tree as a <em>project</em> called
the ptII project.  There several ways to set up the ptII project,
<ol>

<li> <a href="#NoSVN">Eclipse is unaware of the version control aspects of the project.</a>
<br>If you are downloading the source from major Ptolemy release,
and don't want to update regularly, then use this choice

<br>(No Eclipse Subversion plug-in (Subversive),
 No Subversion (<code>svn</code>) from the command line)

<li> <a href="#NoSubversive">Eclipse is unaware of the version control aspects of the project, use the shell version of Subversion to update the tree.</a>

<br>(No Eclipse Subversion plug-in (Subversive),
 use Subversion (<code>svn</code>) from the command line)

<li> <a href="#Subversive">Eclipse is aware of the Subversion aspects of the project.</a> 
You can use both Eclipse and shell version of Subversion to update the tree.
<br>(Use both the Eclipse Subversion plug-in (Subversive) and the
shell <code>svn</code> command)

</ol>

Without Subversive, you'll need to manage the Subversion aspects in the
usual way, i.e. with Subversion commands being submitted to a bash
shell.  With Subversive, Eclipse will do all sorts of things to "help"
you. Most of these things are good, but there is a learning curve.

<p>Please choose <b>one</b> of the methods below to set up Eclipse for Ptolemy II. 

<h3><a name="NoSVN">1. Eclipse is unaware of the version control aspects of the project.</a> (No Subversion)</h3>
If you are downloading the source from major Ptolemy release,
and don't want to update regularly
<ol>

<li> Download a ptII source tree from
<a href="http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIlatest"><CODE>http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIlatest</CODE></a>

<li>Configure the .classpath and .project files. See <a href="#.classpath.default"><CODE>.classpath.default</CODE></a>. below.
<li>Create the ptII project
<ul>
 <li> In <code>File</code> | <code>New</code> | <code>Project</code>,
select 'Java project'.
In the 'Contents' box, click on 'Create project from existing source'
and browse to the PTII directory. Finish.

<li>When asked if you want to shift to the Java perspective, click on Yes.
</ul>
</ol>
<h3>OR</h3>
<h3><a name="NoSubversive">2. Eclipse is unaware of the version control aspects of the project, use the shell version of Subversion to update the tree.</a></h3>

<ol>
<li>Install Subversion:
   <ul>
   <li> <a href="http://tortoisesvn.tigris.org/" target="_top">Tortoise SVN</a> - Windows GUI Client
   <br> <i>If you are not installing Subversive, then choose TortoiseSVN</i>
   <li> <a href="http://www.cygwin.com" target="_top">Cygwin</a> - Windows command line client
   <br> If you are more comfortable with a command line, then choose Cygwin. Make sure that you also install Cygwin's Subversion package.
<li> To check out the ptII svn repository with <b>read-only</b> access:
<pre>
svn co svn://source.eecs.berkeley.edu/chess/ptII/trunk ptII
</pre>
 <br><B>Note:</B> Most users will select <CODE>svn://</CODE> because
they will be accessing the tree with <B>read-only</B> Subversion access.
<br>If you have an 
<a href="http://chess.eecs.berkeley.edu/ptexternal" target="_top">ssh account</a> on <code>source.eecs.berkeley.edu</code>, then check out ptII with
read/write access:
<pre>
svn co svn+ssh://source.eecs.berkeley.edu/chess/ptII/trunk ptII
</pre>
Or, if your user id on source.eecs is different than your current user id
on your machine:
<pre>
svn co svn+ssh://<I>yourID@</I>source.eecs.berkeley.edu/chess/ptII/trunk ptII
</pre>

<li>Configure the .classpath and .project files. See <a href="#.classpath.default"><CODE>.classpath.default</CODE></a>. below.
<li>Create the ptII project
<ul>
 <li> In <code>File</code> | <code>New</code> | <code>Project</code>,
select 'Java project'.
In the 'Contents' box, click on 'Create project from existing source'
and browse to the PTII directory. Finish.

<li>When asked if you want to shift to the Java perspective, click on Yes.
</ul>
</ol>

<h3>OR</h3>

<h3>3. Setting up Eclipse for use with Subversion: <a name="Subversive">Installing Subversive</a></h3>
<p>There are at least two Subversion plugins for Eclipse, Subversive and Subclipse.  Either will work, for a brief comparison, see <a href="http://chess.eecs.berkeley.edu/ptexternal/wiki/Main/Subversion#SubclipseVsSubversion">Subclipse vs. Subversion</a>.  The instructions below are for Subversive. To use Subclipse, see <a href="https://kepler-project.org/developers/reference/kepler-and-eclipse#7-installing-subversion-svn">Installing Subversion (SVN) into Eclipse</a>.

<p>The <a href="http://www.eclipse.org/subversive/downloads.php" target="_top">Subversive</a>
Eclipse plug-in adds Subversion to Eclipse.  After installation,
you can use either Eclipse to manage your project, or the <code>svn</code>
from the command line.

<p>
Follow the <a href="http://www.eclipse.org/subversive/downloads.php" target="_top">Subversive installation instructions</a> or these instructions below
<ol>
<li> To download Subversive, in Eclipse, follow these menus
<br><i>Mac OS X</i>:
<br>The first time software is to be added the menu will be:
 <code>Help<code> | <code>Install New Software<code> 
<br>After a package is added, the menu will be:
 <code>Help<code> | <code>Software Updates<code> | <code>Available Software</code>.  
<br><i>Windows</i>:
 <code>Help<code> | <code>Software Updates<code> | <code>Available Software</code>.  
<li>In the "Work with" field, select "Galileo - http://download.eclipse.org/releases/galileo" from the drop down.
<br>Expand the "Collaboration" tab and check the box next to
  "Subversive SVN Team Provider (Incubation)"
 
<li>Then click <code>Next</code>, <code>Next</code> again and click through the license agreement.  
<li>When you are prompted to restart, click <code>No</code>, we will restart later

<li>It is <b>required</b> that a second package, the <code>Subversive SVN Connectors plug-in</code> be installed.  To do this, go back to
 <code>Help<code> | <code>Software Updates<code> | <code>Available Software</cod>
  <code>Help</code> | <code>Install New Software</code>, Click on
  "Add" and then in the "Add Site" window, enter the Name "Polarion" and the location
<pre>
http://www.polarion.org/projects/subversive/download/eclipse/2.0/ganymede-site/
</pre>
Hit OK
<li>In the Available Software window,
<i>Mac OS X</i>: There is no need to install JavaHL, in fact JavaHL will likely cause problems
<br>Under Subversive SVN Connectors, select these packages:
<pre>
Subversive SVN Connectors
SVNKit 1.2.0 Implementation (Optional)
</pre>
<p><i>Windows</i>: <b>Note: select only one <code>JavaHL</code> Win32 binary</b>.  If both
JavaHL 1.4.5 and JavaHL 1.5.0 are installed, then Eclipse will have
problems.  The version of JavaHL is dependent on the version of command line <code>svn</code> that is installed on your machine.
<br>If <code>svn -version</code> returns 1.4, then install JavaHL 1.4.5.
<br>If <code>svn -version</code> returns 1.5, then install JavaHL 1.5.
<br>Select these packages:
<pre>
JavaHL 1.4.5 Win32 Binaries(Optional)
Native JavaHL 1.4 Implementation (Optional)
Subversive SVN Connectors
</pre>

<li>Click on <code>Next</code> and click through the rest of the installation.
<li>When prompted to restart Eclipse, do so.
</ol>

<h3>Setup the Subversion Configuration to Sane setting</h3>
Sadly, Subversion is by default configured with nonsense initial default 
values for commit times and end of line settings.
<h4>Tell Subversion to use commit times</h4>

In the default settings, if you check out files with subversion, then they will 
have their modification times set to the current time.  This is incorrect:
<ol>

<li>The ptII tree includes derived files that are generated by
Autoconf, JavaCC and Antlr. If the commit times are not preserved,
then the source file might have a mod time later than the derived file
which means that either the tool must be run or else the build system
must touch the derived file.
<li>If the commit times are preserved, the <code>ls -ltr</code> will
quickly show which files were changed when
</ol>

<p>To change the Subversion configuration, hunt for the
<code>.subversion/config</code> file.  
 <p>Under Windows with Cygwin, you
might find it as <code>$HOME/.subversion/config</code>.  Another place to look
is <code>c:/Documents and Settings/<i>yourlogin</i>/Application Data/Subversion/config. 
 <p>On the Mac, try <CODE>/Users/<I>yourlogin</I>/.subversion</CODE>.
 <p>If the directory does not exist, try running <CODE>svn --version</CODE> to create the directory.

 <p>Make this change to <CODE>.subversion/config</CODE>
<pre>
### Set use-commit-times to make checkout/update/switch/revert
### put last-committed timestamps on every file touched.
use-commit-times = yes
</pre>

<h4>Tell Subversion to automatically set the eol style</h4>
With the default settings, if you use Subversion to add a makefile,
then the file will be checked in with binary settings.  When the
file is checked on out non-Windows platforms, then the file will have
<code>\r\n</code> characters, which will break Solaris <code>/usr/ccs/bin/make</code> and cause other problems.

<p>In addition, we would like keyword strings like 
<code>$Id$</code> to be automatically expanded and updated.

<p>Find the <code>.subversion/config</code> file and uncomment the
<code>enable-auto-props</code> line so that it looks like:
<pre>
enable-auto-props = yes 
</pre>

Also, uncomment the <CODE>[auto-props]</CODE> and the section below that
sets the properties for the files.  Also, set props for 
at least <CODE>makefile</CODE>, <CODE>*.tcl</CODE> and <CODE>*.mk</CODE> files.
See <a href="svn-config-auto-props.txt"><CODE>$PTII/doc/coding/svn-config-auto-props.txt</CODE></a> for a more complete set of properties.

The bottom of the <CODE>.subversion/config</CODE> file should look like:

<pre>
###
### Settings for your ~/.subversion/config file.  To use this:
### 1) Edit your ~/.subversion/config file
### 2) Insert the contents of this file into your
###    ~/.subversion/config file
### 3) You must set "enable-auto-props" to yes
###    BEFORE the [auto-props] line.
###    _BE_SURE_ to check that [auto-props] does NOT appear twice
###    If you append the contents of this file at the end
###    Of your config file, you will need to comment out
###    the preexisting [auto-props] line.

### Set enable-auto-props to 'yes' to enable automatic properties
### for 'svn add' and 'svn import', it defaults to 'no'.
### Automatic properties are defined in the section 'auto-props'.
### For this to work, the "enable-auto-props = yes" line should
### be before the "[auto-props]" line.
enable-auto-props	 = yes

[auto-props]
### Section for configuring automatic properties.
### The format of the entries is:
###   file-name-pattern = propname[=value][;propname[=value]...]
### The file-name-pattern can contain wildcards (such as '*' and
### '?').  All entries which match will be applied to the file.
### Note that auto-props functionality must be enabled, which
### is typically done by setting the 'enable-auto-props' option.
[auto-props]
*.MF = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.aart = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.ac = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.am = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.apt = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.avi = svn:mime-type=video/avi
*.bat = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.bsh = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.c = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.cat = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.cgi = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.classpath = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.cmd = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.cnd = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.conf = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.config = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.cpp = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.css = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.cwiki = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.data = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.dcl = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.doc = svn:mime-type=application/msword
*.dsp = svn:eol-style=CRLF
*.dsw = svn:eol-style=CRLF
*.dtd = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.egrm = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.ent = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.fn = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.ft = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.fv = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.g = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.gif = svn:mime-type=image/gif
*.grm = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.gz = svn:mime-type=application/x-gzip
*.h = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.handlers = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.htc = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.html = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.ico = svn:mime-type=image/x-icon
*.ihtml = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.in = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.java = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.jmx = svn:eol-style=LF
*.jpg = svn:mime-type=image/jpeg
*.jpg= svn:mime-type=image/jpeg
*.js = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.jsp = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.junit = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.jx = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.m = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.m4 = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.manifest = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.mdo = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.meta = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.mf = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.mk = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.mod = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.mov = svn:mime-type=video/quicktime
*.mpg = svn:mime-type=video/mpeg
*.ms = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.n3 = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.nroff = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.patch = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.pdf = svn:mime-type=application/pdf
*.pen = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.php = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.pl = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.pm = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.png = svn:mime-type=image/png
*.pod = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.pom = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.ppt = svn:mime-type=application/powerpoint
*.project = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.properties = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.py = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.rb = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.rdf = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.rnc = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.rng = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.rnx = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.roles = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.rss = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.schemas = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.sh = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.sh = svn:eol-style=native;svn:executable
*.sql = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.svg = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.tcl = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.tgz = svn:mime-type=application/x-compressed
*.tif = svn:mime-type=image/tiff
*.tiff = svn:mime-type=image/tiff
*.tld = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.txt = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.types = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.vm = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.vsl = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.wsdd = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.wsdl = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.xargs = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.xcat = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.xconf = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.xegrm = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.xgrm = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.xhtml = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.xhtml2 = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.xlex = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.xlog = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.xls = svn:mime-type=application/excel
*.xmap = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.xml = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.xroles = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.xsamples = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.xsd = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.xsl = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.xslt = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.xsp = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.xtest = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.xul = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.xweb = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.xwelcome = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.zip = svn:mime-type=application/zip
.htaccess = svn:eol-style=native;svn:keywords=Author Date Id Revision
INSTALL = svn:eol-style=native;svn:keywords=Author Date Id Revision
KEYS = svn:eol-style=native;svn:keywords=Author Date Id Revision
LICENSE = svn:eol-style=native;svn:keywords=Author Date Id Revision
Makefile = svn:eol-style=native;svn:keywords=Author Date Id Revision
NOTICE = svn:eol-style=native;svn:keywords=Author Date Id Revision
README = svn:eol-style=native;svn:keywords=Author Date Id Revision
abs-linkmap = svn:eol-style=native;svn:keywords=Author Date Id Revision
abs-menulinks = svn:eol-style=native;svn:keywords=Author Date Id Revision
makefile = svn:eol-style=native;svn:keywords=Author Date Id Revision
</pre>


<p>See <a href="http://svn.haxx.se/users/archive-2003-12/0063.shtml" _target="_top">Subversion Users: Re: Setting svn:eol-style</a>
and <a href="http://maven.apache.org/developers/svn-eol-style.txt"><code>http://maven.apache.org/developers/svn-eol-style.txt</code></a>

<p>BTW - To set the style on already checked in file, run:
<pre>
svn propset svn:eol-style native <i>filename</i>
</pre>
To set the keywords on an alredy checked in file, run:
svn propset svn:keywords "Author Date Id Revision" <i>filename</i>
</pre>

Then run <code>svn commit</code> to commit the change. 

<h3>SSH Configuration.</h3>
If you will be accessing the ptII repository with <b>read/write</b>
access, then you will need to do a little more configuration concerning
passwords.
 <p><B>Note:</B> Most users will <b>not</b> need to do this configuration
 because they will be accessing the tree
 with <B>read-only</B> Subversion access.  Read-only users can 
skip to <a href="#CheckOutPtII">Check Out Ptolemy II from the Subversion repository</a>

<p>To access the ptII repository with read/write access, you will
need configure Subversive to use your password.  If don't do this step
and you leave the default
settings, and have Cygwin ssh installed, then
<code>c:/cygwin/bin/ssh.exe</code> window will pop up each time ssh
is called.

<p>The fix is to set Subversive to use SVNKit
<code>Window</code> | <code>Preferences</code> | <code>Team</code> | <code>SVN</code> | <code>SVN interface</code> | <code>SVNKit (Pure Java)</code>
| <code>OK</code>


<h3><a name="CheckOutPtII">Check Out Ptolemy II</a> from the Subversion repository</h3>

Below we describe how to set up Eclipse so Eclipse
manages the Subversion interaction.

<p>
Eclipse will manage your ptII code tree as a <em>project</em> called
the ptII project.  Assuming Eclipse is running:
<ol>
<li>Install Subversive by <a href="#Subversive">following the instructions above</a>.

<li> In Eclipse, add the ptII SVN Repository:

<code>Window</code> | <code>Show View</code> | <code>Other</code> | <code>SVN</code> | <code>SVN Repositories</code>
<li>In the SVN Repository view, right click, select <code>New</code> and set the url.
<br>To check out the ptII svn repository with <b>read-only</b> access:
<pre>
https://source.eecs.berkeley.edu/svn/chess/ptII
</pre>
or
<pre>
svn://source.eecs.berkeley.edu/chess/ptII
</pre>

 <p><B>Note:</B> Most users will select <code>https://</code> or 
<CODE>svn://</CODE> because
they will be accessing the tree with <B>read-only</B> Subversion access.
<br>If you have an 
<a href="http://chess.eecs.berkeley.edu/ptexternal" target="_top">ssh account</a> on <code>source.eecs.berkeley.edu</code>, then check out ptII with
read/write access:
<pre>
svn+ssh://source.eecs.berkeley.edu/home/svn/chess/ptII
</pre>
Or, if your user id on source.eecs is different than your current user id
on your machine:
<pre>
svn co svn+ssh://<I>yourID</I>@source.eecs.berkeley.edu/chess/ptII
</pre>
Read/write users will be prompted for their source.eecs.berkeley.edu
username and password. This typically happens more than once since in case the svn+ssh protocol is being used passwords are not cached.

<li>If you get a "Certificate Problem" window, then select
<code>Trust</code> or <code>Trust Always</code>.  For details and
a workaround, see <a href="http://chess.eecs.berkeley.edu/ptexternal/wiki/Main/Subversion#svnCertficateIsNotIssuedByATrustedAuthority">Certificate is not issued by a trusted authority</a>.

<li>In the SVN Repository view, right click on <code>trunk</code> and select <code>Find/Check out As</code>

<blockquote>
 <table border="1">
  <tr>
   <td>
     Be sure to check out the <b><code>trunk</code></b> not the
     entire tree, which include all the branches and the trunk.
   </td>
  </tr>
 </table>
</blockquote>

Follow the wizard, creating selections as follows:
<ul>
<li> In the "Check Out As" window, use the default, <code>Check out as a project configured using the New Project Wizard</code>, then hit <code>Finish</code>.

<li> In the "Select a wizard" window, select <code>Java</code> | <code>Java Project</code>, then hit <code>Next</code>.
<li> In the "Create a Java Project" window,
     <br> set "Project Name" to: <CODE>ptII</CODE>
     <br> set "Project Layout" to <code>Use project folder as root for sources and class files</code>.
     This is done so that <code>$PTII/bin</code> will contain the Ptolemy II command line scripts instead of the
     <code>*.class</code> files created by Eclipse.
<li> Click Finish.
<li> If you see a Confirm Overwrite Window that says:
<blockquote>
 <code>The project you created, ptII, contains resources other than the standard .project file. If any of those resources have the same name and relative location of a resource you are checking out, the local resource will be replaced with the resource from the repository</code>
</blockquote>
then you probably did not change "Project Layout" as per above.  Click cancel and recreate the Java Project.
<li> In the "Open Associated Perspective?" window, click "Yes". 
</ul>

<p>
<li> Wait for the checkout to finish. <I>Go get coffee.</I>
 <br><B>Note:</B>If you did not disable build automatically, as
suggested above, then Eclipse will build the project and produce
<B>thousands of errors</B>. This is not really a problem.  You will
fix the errors below with the <CODE>.classpath.default</CODE> file.

<p>
<li> You will want to view the project in the Java perspective.
If you aren't already in the Java perspective, select
<code>Window</code> | <code>Open Perspective</code> | <code>Java</code>
in the menu.
By default, Eclipse offers a "Package Explorer" as the main navigation
mechanism for the source files. Many developers much
prefer to use the "Navigator."
To get the Navigator, select
<code>Window</code> | <code>Show View</code> | <code>Navigator</code>
in the menu.
You can now browse the source files.

<p>
<li> <a name=".classpath.default">Find</a>
the file in the ptII home directory called
<CODE>.classpath.default</CODE> and copy it into a new file called
<CODE>.classpath</CODE>.
 <br>Note that you can use the Eclipse Navigator browse to the
<CODE>.classpath.default</CODE> file, open the file, copy the contents,
open <CODE>.classpath</CODE>, paste the contents and save <CODE>.classpath</CODE>.
 <br>Or, you can use Windows Explorer or the shell.

<li> In Eclipse, perform a Refresh on the ptII project
by <code>Window</code> | <code>Open Perspective</code> | <code>Java</code
<br> &nbsp;&nbsp;&nbsp;Go to the Package Explorer or the Navigator.
<br> &nbsp;&nbsp;&nbsp;Right mouse click on the ptII icon and select Refresh.

 <br><B>Note:</B>If you do not do copy <CODE>.classpath.default</CODE>
and select "Refresh", then Eclipse will produce
<B>thousands of errors</B>. This is not really a problem. It reflects
that you probably don't have installed many optional packages that
are needed to build subsets of Ptolemy II. You can ignore the errors
(not advised, since they will mask errors you make), or you can copy
the <CODE>.classpath.default</CODE> file and rebuild.
Alternatively, you can <a href="#Optional">install
the optional packages and run configure</a>.

<p>
<li> Build Ptolemy II by selecting <code>Project</code> | </code>Build All</code>.
(<I>If Build All is greyed out, then perhaps "Build Automatically" was
not disabled and Ptolemy has been built.  See above for more about Build Automatically</I>.)
You will get many warnings that you can ignore, but hopefully no errors.

</ol>

<h3><a name="runningPtolemy">Running Ptolemy II</a></h3>

<ol>
 <li> In the Run menu, select "Run Configurations...".

<p> <li> In the resulting dialog, select "Java Application" and click "New".

<p> <li> In the dialog, fill in the boxes as follows:
<ul>
<li> Name: <CODE>Vergil</CODE>
<li> Project: <CODE>ptII</CODE>
<li> Main class: <CODE>ptolemy.vergil.VergilApplication</CODE>
</ul>

 <p> <li> Press the Run button.
</ol>

The Ptolemy II welcome window should appear.
 <p>You may now wish to read the <a href="http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIlatest/ptII/doc/design/usingVergil/index.htm">Using Vergil</a>
tutorial.

<h2><a name="simpleDebug">Simple Debugging Session</a></h2>

<ol>
 <li> Locate ptolemy/vergil/VergilApplication in the Explorer and
double click. Place a breakpoint on the first line of main()
by using <code>Run</code> | <code>Add/Remove Breakpoint</code>

 <li> Tell Eclipse which class to run with <code>Run</code> | <code>Run</code>.
On the Main
tab, select the Ptolemy II package and enter
ptolemy.vergil.VergilApplication as Main class.

 <li> Press the Run button
 <li> To debug, quit Vergil, and place a breakpoint in, say, the fire() method
of ptolemy.domains.ct.kernel.CTBaseIntegrator. Then <code>Run</code> | <code>Debug</code>, and
as above. Open the Lorenz CT demo from the Quick Tour and run it.
 </ol>

<h2><a name="Optional">Optional Extensions</a></h2>
<p>
Ptolemy II includes a number of packages that rely on software that you may
or may not have installed, such as MATLAB, the Java comm package (for serial
port connections), joystick support, Java Advanced Imaging (JAI), the Java
Media Framework (JMF), and Java 3D.  If you wish to use or extend these
features, you will need to perform a few extra steps.  These steps
require execution of a script called "configure" in the Ptolemy II
home directory, which in turn requires (on Windows) installation of
Cygwin, a package that offers Unix-like facilities within Windows.
You can find instructions for installing Cygwin at
<a href="http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIlatest/cygwin.htm">
http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIlatest/cygwin.htm</a>.
<p>
The procedure below will modify the .classpath file that is
provided in the version control repository to customize it for
the software that you have installed.
The procedure is as follows:
<ol>
<li> Start up Cygwin bash shell.

<li> Set the PTII variable and export it
 <br><B>Windows:</B>
<pre>
export PTII=c:/Documents\ and\ Settings/<i>yourLogin</i>/workspace/ptII 
</pre>
 <br><B>Mac:</B>
<pre>
export PTII=c:/Users/<i>yourLogin</i>/workspace/ptII 
</pre>

<li>
cd to the PTII directory
<pre>
cd "$PTII"
</pre>
<i>Note that we use double quotes around <code>PTII</code> because
the value of <code>PTII</code> has spaces in it.</i>
<li>Run configure:
<pre>
./configure
</pre>
This will create <code>$PTII/.classpath</code>

<li>
If you plan on running the Ptolemy II startup scripts in 
<CODE>$PTII/bin</CODE> on the command line, you will probably
want to run the following commands within Cygwin bash:
<pre>
cd $PTII/bin
make
</pre>

<li> In Eclipse, perform a Refresh on the ptII project
by <code>Window</code>Open Perspective</code> | <code>Java</code>
<br> &nbsp;&nbsp;&nbsp;Go to the Package Explorer or the Navigator.
<br> &nbsp;&nbsp;&nbsp;Right mouse click on the ptII icon and select Refresh.
<br> This will
cause Eclipse to see the new <code>ptII/.classpath</code> and to build
the project (or you may have to manually rebuild if you turned
off automatic rebuild).
</ol>  


<h3>Synchronizing with the repository</h3>

<ol>
<li>In the Navigator view scroll/open until you see the resource
(directory or file) to be synchronized.
<li>Right click that resource and select Team->Synchronize With Repository...
<li>The Synchronize view should then be visible.
<li>Select the Incoming, Outgoing, or Incoming/Outgoing menu bar icon as appropriate
</ol>

<h3>Restoring a file from the repository</h3>
<ol>
<li>In the Navigator view scroll/open until you see the resource (directory or file) to be restored.
<li>Right click that resource and select Replace With->Latest From Head.
</ol>

<h3>Copying Files</h3>
Usually, it is better to extend Java classes than to copy them, but sometimes copying files
under Subversion is useful.  To copy files, use the <code>svn cp</code> command.  Do
not drag and drop directories as the directories contain a <code>.svn</code> directory
that will have settings for the source location.  Instead, use <code>svn cp</code>.
See also <code>svn mv</code>.

<h3><a name="#debugTclTests">Debugging Tcl Tests</a></h3>
See <a href="testing.htm">Testing Ptolemy II</a> for details.
<ol>
<li> In Eclipse, go to Run -&gt; Debug Configurations
<li> Select Java Application and then click the New icon.
<li> In the Main tab, set the "Name:" to ptjacl, in "Main class:", enter <code>tcl.lang.Shell</code>.
<li> <i>Optional:</i> In the Arguments tab, under "Program arguments", enter <code>alljtests.tcl</code> or any individual test tcl file. 
(E.g. </code>SimpleDelay.tcl</code>).
Or, leave the "Program arguments" field blank and when ptjacl is running (see below), enter text in to the Eclipse console. 

<li> <i>Optional:</i> In the Arguments tab, under "VM arguments", enter <CODE>-Dptolemy.ptII.dir=<I>your PtII directory</I></CODE>
<br>(E.g. <CODE>-Dptolemy.ptII.dir=c:/hyzheng/ptII</CODE>).<br /> In case your directory path contains
spaces, you need to use quotes. (E.g. <CODE>-Dptolemy.ptII.dir="c:/my workspace/ptII"</CODE>).


<li> In the "Working directory:" pane, select "Other:", browse to the directory containing the tcl 
tests.
 <br> (E.g. <CODE>C:\hyzheng\ptII\ptolemy\domains\de\lib\test</CODE>)

<li> Select Debug.

</ol>

The nice thing of using Eclipse is that you can very easily locate where 
the exception is thrown by clicking the classes listed in the stack trace. 
You may further register a breakpoint to do more diagnosis.


<h2><a name="Troubleshooting">Troubleshooting</a></h2>

<h3>Preferences</h3>
If you have already used Eclipse and you would like to start over with
new projects and preferences, remove the <code>workspace</code> directory in the
Eclipse directory.  The <code>workspace</code> directory will only
appear if you have already run Eclipse.  <b>Note that removing the
<code>workspace</code> directory will cause Eclipse to 'forget'
about any projects that you may have set up</b>


<h3>Rebuilding Briefly flashes a window</h3> 
<p>If you have problems where clicking on build briefly flashes up
a window, look in <code>$PTII/.classpath</code> for and empty
exclusion that looks like <code>||</code>

<p>If you have problems with the classpath, look in the 
<code>workspace/.metadata/log</code> file that is in
the directory where eclipse is installed. For more information
about the <code>.metadata</code> directory, see
<a href="#metadata">below</a>.

<h3>Eclipse takes a long time to start up</h3>

If Eclipse takes a long time to start up, then the problem could be 
a problem in your .metadata file.

 <p>Basically, when eclipse starts up, it might try to update
<a name="metadata"><CODE>H:/workspace/.metadata</CODE></a>
.  The solution is covered in
<a href="http://www.eclipse.org/documentation/html/plugins/org.eclipse.platform.doc.user/doc/tasks/running_eclipse.htm" target="_top"><CODE>http://www.eclipse.org/documentation/html/plugins/org.eclipse.platform.doc.user/doc/tasks/running_eclipse.htm</CODE></a>:

The way I figured this out was by running Norton Antivirus and
doing View -&gt; File System Realtime Scan Statistics and then I noticed 
that my machine was updating H:/workspace/.metadata

 <p>I think I introduced the problem by clicking on the Eclipse.exe
binary and selecting Pin to Start Menu.  My solution was to remove the
Eclipse bogus entry in the start menu and then create a shortcut,
change Start in property and then pin that shortcut to my start menu.


</body>
</html>
