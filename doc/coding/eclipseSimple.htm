<!-- DO NOT EDIT this file, it is created by running make.
     The file to edit is $PTII/doc/coding/eclipe.htm
     and then run 'make update'
     to update the derived files and check them in to svn. -->
<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <title>Setting up Ptolemy II and Eclipse</title>
<link href="../default.css" rel="stylesheet" type="text/css">
</head>
<body>
<!--eclipseSimple-->
<h1>Setting up Ptolemy II and Eclipse</h1>
<p>These are simplified instructions for setting up 
Eclipse using the source tree.
See <a href="eclipse.htm"><code>eclipse.htm</code></a>
for instructions about how to set up Eclipse using 
the Subversion version control system.
Subversion allows you to get updates from the 
Ptolemy development tree.  The instructions here 
provide access to a static source code tree, such
as what is shipped with the Ptolemy II release.</p>
<p>

The instructions below include how to set up Subversion so that it
is possible to update the Ptolemy II tree.  If you would like to work
from a static source tree, such as what is shipped with the release,
see the
<a href="eclipseSimple.htm">Simple Eclipse Instructions</a>.

<p>
These instructions assume you are using Eclipse Indigo under 
Windows or Mac OS X.
Other ways of setting up and building Ptolemy II are described on the
<a href="http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIlatest/ptII/doc/install.htm#in_browser" target="_top">Ptolemy II install page</a>. 
<p>Contents of this page:
<menu>
<li><a href="#Java">Install Java</a>
<li><a href="#Installing">Install Eclipse</a>
<li><a href="#Preferences">Eclipse Preferences for Ptolemy II</a>
<li><a href="#SettingUp">Set up Eclipse for Ptolemy II</a>
  <ul>
  <li> <a href="#NoSVN">Eclipse is unaware of the version control aspects of the project.</a>
<!--eclipseSimple-->
  </ul>
<li><a href="#ant">Ant</a>
<li><a href="#simpleDebug">Simple Debugging Session</a>
<li><a href="#Optional">Optional Extensions</a>
<li><a href="#Troubleshooting">Troubleshooting</a>
</menu>
Other local pages:
<menu>
<li><a href="performance.htm#Eclipse">Profiling using TPTP</a>
</menu>

<h2><a name="Java">Install Java</a></h2>

See <a href="../install.htm">Ptolemy II Installation</a> for details, but
briefly:
<p>Ptolemy II requires Java 1.6 because ptdb uses javax.swing.GroupLayout.
Also, Java 1.5 is past its end of life.</p>

<p>The Oracle (formerly Sun) Java Development Kit (JDK) is preferred.</p>  
<p>The IBM JDK will work under Linux.</p>
<p>OpenJDK may work with Ptolemy II, but could have problems with Kepler.</p>

<h2><a name="Installing">Install Eclipse</a></h2>
<ol>
<li>
Download the latest version of Eclipse from
<a href="http://www.eclipse.org#in_browser" target="_top">http://www.eclipse.org</a>.
 <br>In August, 2011, we chose
 <B>Eclipse for RCP and RAP Developers</B>, which is 190Mb.
The <B>Eclipse for RCP and RAP Developers</B> version includes the
plug-in development environment (PDE), which is needed by the backtrack
facility, which is an optional part of Ptolemy II that allows models to
restore their old state.  If the version of Eclipse that you install
does not have the PDE, then there will be build errors, which can be fixed by
excluding <CODE>ptolemy/backtrack/</CODE> from the build.

<p>Eclipse is available as both 32-bit and 64-bit binaries.  Deciding
which one to download can be complex.</p>
<p>The basic idea is that to use a 64-bit version of Eclipse, you must
have a 64-bit JVM and an operating system that will support 64-bit
applications.  When in doubt, choose the 32-bit version of Eclipse,
it is more likely to work than the 64-bit version.</p>

<p>See below for details.
</p>

<h3>32-bit or 64-bit?</h3>

<ul>
<li>(<i>Linux</i>): Run <code>uname -a</code>.  If the result
 contains <code>x64</code>, you are running a 64-bit version of Linux and 
would select the 64-bit version of Eclipse..  Also,
 try <code>java -version</code>.  Below is a run on a 64-bit Linux
 machine:
<pre>
-bash-3.2$ uname -a
Linux sisyphus.eecs.berkeley.edu 2.6.18-164.11.1.el5xen #1 SMP Wed Jan 6 13:43:33 EST 2010 x86_64 x86_64 x86_64 GNU/Linux
-bash-3.2$ java -version
java version "1.6.0_21"
Java(TM) SE Runtime Environment (build 1.6.0_21-b06)
Java HotSpot(TM) 64-Bit Server VM (build 17.0-b16, mixed mode)
-bash-3.2$ 
</pre>

<li> (<i>Mac OS X</i>):
Under Mac OS X 10.7, the default JVM is 1.6, which is 64-bit.
 
</p>Under Mac OS X 10.5 and 10.6, the default JVM is 1.6, which is 64-bit.  However,
Java 1.6.0_20 does not work well.  The issue is that
the following stack trace appears:
<pre>
2010-10-10 11:50:02.263 java[7823:613] java.lang.NullPointerException
at apple.awt.CToolkit.postEvent(CToolkit.java:1086)
at apple.awt.EventFactoryProxy.forwardEvent(EventFactoryProxy.java:53)
</pre>
The bug happens when running from Eclipse or from the command line.
The bug requires UI interactions such as mouse movement or clicking.
The bug is probably a threading bug and may only show up on multi-core
machines.  The downside is that when the bug occurs, the debugging
session in Eclipse may become non-responsive.

<p>For further information, see:
<a href="http://lists.apple.com/archives/java-dev/2010/May/msg00140.html"><code>http://lists.apple.com/archives/java-dev/2010/May/msg00140.html</code></a>.

<br>So, at this time, we are recommending the 32-bit version with Java 1.5 and Mac OS X 10.5.
Below are instructions for using the 32-bit version of Eclipse. 
<b>These instructions are for Mac OS X 10.5 only.</b>  Mac OS X 10.6 and 10.7
should <b>use the 64-bit version of Eclipse</b>

<br>Download
    <code>eclipse-rcp-indigo-macosx-cocoa.tar.gz</code>
  uncompress it and move <code>eclipse/</code> into <code>/Applications</code>, which
  will create <code>/Applications/eclipse/Eclipse.app</code>.
  <br>Firefox Mac OS X Details for 32-bit under Mac OS 10.5:
    <ol>
    <li>Firefox will download the file into a directory, which may be
    <code>/Downloads</code>
    <li>Double click on
    <code>eclipse-rcp-indigo-macosx-cocoa.tar.gz</code>
    which will create the <code>eclipse</code> directory.
    <li> Drag the <code>eclipse</code> directory to your
    <code>Applications</code> directory.
    </ol>

  <br>The next step on the Mac is to force Eclipse to use Java 1.5 by
    editing <code>eclipse.ini</code>.
   <ol>
    <li> In the Finder, go to <code>/Applications/eclipse</code>,
      find the <code>Eclipse</code> executable and right click (Control + click)
      and choose "Show Package Contents".
    <li> Browse to <code>Contents/MacOS</code> and double click on
      <code>eclipse.ini</code>, which will open up the file in TextEdit
    <li> Edit the file and insert
      <pre>
-vm /System/Library/Frameworks/JavaVM.framework/Versions/1.5/Home/bin/java
      </pre>
    <li>Save the file and exit TextEdit.
      
  </ol>
  For details about <code>eclipse.ini</code>, see
  <a href="http://wiki.eclipse.org/Eclipse.ini#in_browser">http://wiki.eclipse.org/Eclipse.ini</a>
  <br>When you start up Eclipse, if you want to verify which version
  of Java you are running
   <ul>
     <li>(<i>Mac OS X</i>): <code>Eclipse</code> | <code>About Eclipse</code>
       | <code>Installation Details</code> | <code>Configuration</code>.
     <br>For Java 1.5, the <code>java.class.version</code> property should be
     <code>49.0</code>.
     <br>For a 64-bit JVM, the <code>java.vm.name</code> property <i>might</i>
     have the string <code>64</code> in it.
   </ul>
 


<li> (<i>Windows</i>): Determine whether you are running a 32-bit or
    64-bit version of the OS.
<ul>
<li><i>Windows 7 or Vista</i>:  "Start", then right click on
"Computer", then click on "Properties".  Under System, you
should see the system type.  The 64-bit version of Windows 7 will
say "64-bit Operating System".  See
<a href="http://windows.microsoft.com/en-US/windows7/32-bit-and-64-bit-Windows-frequently-asked-questions"><code>http://windows.microsoft.com/en-US/windows7/32-bit-and-64-bit-Windows-frequently-asked-questions</code></a>.
for details.

<li><i>Windows XP</i>: "Start", then right click on "My Computer",
and then click on "Properties". Under "System", if you see "x64
Edition", then you are running a 64-bit version of Windows.  If "x64
Edition" is <b>not</b> listed, then you are running a 32-bit version of Windows.
</ul>

<br>After determining whether to download the 32-bit or 64-bit version
of Eclipse, download the file and unzip the download file into an
appropriate place, such as <code>C:\Program Files</code>, which will
create <code>C:\Program Files\eclipse\eclipse.exe</code>.

<br>If <code>eclipse\eclipse.exe</code> is not created, then it could
be that the security policy on your machine is preventing the creation
of <code>.exe</code> files.  If this is the case, then try right
clicking on the zip file, select "Properties" and then at the bottom,
hit "Unblock" and then "Apply". Or try running
<code>unzip</code> from the command line.

</ul>

<li>(<i>All Platforms</i>): Finish the installation by double click <code>/Applications/eclipse/Eclipse.app</code> or <CODE>eclipse/eclipse.exe</CODE>.
<br>The first time this is run it will complete the installation process.
<ul>
<li> (<i>Windows</i>): 
If Eclipse fails to start with the message "Windows cannot access the specified device, path or file. You may not have the appropriate permisions to access the item", then it may be necessary to make 
<code>eclipse.exe</code> and a dll executable:
<pre>
chmod a+x eclipse.exe
</pre>
<br>If you get the message "The Eclipse executable launcher was unable to locate its companion shared library", then run the following command
in the <code>eclipse</code> directory.
<pre>
find . -name *.dll -exec chmod a+x {} \;
</pre>
<br>After the first run, normal start-up will occur whenever it is started.
</ul>

</ol>

<h2><a name="Preferences">Eclipse Preferences for Ptolemy II</a></h2>
<p>
Eclipse has the notion of a workspace, which is a collection of
one or more projects.  Ptolemy II is a project. 

<br>When the "Workspace Launcher" window comes up, either stick with the default
or choose a new directory.  Note that the projects can be located outside
of the workspace directory.  One caveat is that Eclipse will not permit
the project directory to be a parent of the workspace directory, so placing the
workspace in a subdirectory such as the default location is best.
<br>Click "OK" to create the workspace and open Eclipse.
<br>Below is the Workspace Launcher Window:
<center><p><img src="../img/eclipseWorkspaceLauncher.png" alt="Eclipse Workspace Launcher" width="597" height="244"></p></center>

The default configuration of Eclipse has some difficulties with Ptolemy II,
so a few changes are necessary.
<ol>
<li>(<i>Optional</i>): Shortcuts and Memory Size
<ul>
<li>(<i>Mac OS X</i>):
  In <code>Applications/eclipse</code>, drag the
  <code>Eclipse.app</code> icon to the Finder Dock on the edge of your
  screen.  This will give you fast access to starting Eclipse.
  <br>There is usually no need to set the memory size for Eclipse under Mac OS X.  By default, it is set to 512 megabytes.  
  For details about setting the memory size, see:
  <a href="http://help.eclipse.org/helios/topic/org.eclipse.platform.doc.user/tasks/running_eclipse.htm#in_browser" target="_top">Eclipse Workbench User Guide/Tasks/Running Eclipse</a>.
  
<li>(<i>Windows</i>): 

  In Windows,  create a shortcut to <code>eclipse.exe</code> by going to the 
directory where Eclipse is installed, right clicking on eclipse.exe 
and selecting <code>Create Shortcut</code>. 
  <br>To add Eclipse to the start menu, right click on the shortcut and 
select <code>Pin to Start Menu</code>
  <br>There is usually no need to set the memory size for Eclipse.  By default, it is set to 512 megabytes in the
  <code>eclipse.ini</code> file.

</ul>

<li>Eclipse requires some customization to build Ptolemy II
and to keep the <a href="http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIlatest/ptII/doc/coding/style.htm#in_browser" target="_top">Ptolemy II coding style</a>.
In the steps below, we
outline changes to be made in the Eclipse Preferences window.
<br> Under <i>Windows</i> the Eclipse Preferences window
is invoked via <code>Window</code> | <code>Preferences</code>.

<br> Under <i>Mac OS X</i> the Eclipse Preferences window
is invoked via <code>Eclipse</code> | <code>Preferences</code>.

<br>For each of the
changes, hit <code>Apply</code>.  When all the changes are done, hit
<code>OK</code>, which will close the Eclipse Preferences Window.

<!--eclipseSimple-->
in the preferences window
   <br> (<i>Mac OS X</i>: <code>Eclipse</code> | <code>Preferences</code>)
   <br> (<i>Windows</i>: <code>Window</code> | <code>Preferences</code>)
<li> Go to <code>Java</code> | <code>Code Style</code> | <code>Formatter</code> and click
       New
  <li> In the "New Profile" Window, for the Profile name, enter "Ptolemy II"
      Under "Initialize settings with the following profile",
      select "Java Conventions [built-in]"
      (We use Java Conventions over the "Eclipse"
      setting because the Eclipse style uses tabs.)
      Then hit OK
   
  <li> Under the "Indentation" tab, change the Tab policy to "Spaces only". 
  <li> Under the "New Lines" tab, select "at end of file"
  <li> Under the "Comments" tab,
       <br><b>unselect</b> "Enable Javadoc comment formatting" 
       <br><b>unselect</b> "Enable block comment formatting", otherwise the block comments that have &lt;pre&gt; ... &lt;pre&gt; get changed.
       <br><b>unselect</b> "Enable line comment formatting", otherwise the headers for public methods etc. get changed.
 <li> Click OK.
  <li> In the Preferences Window, click Apply.
 </ol>

<li>
Ptolemy II uses some features of Java 1.6, which is also known as Java 6.0
In particular, <CODE>ptdb</CODE> uses javax.swing.GroupLayout
which requires Java 1.6 (aka Java 6.0) or later.

<ul>
<li>(<i>Mac OS X</i>): It is best to set Eclipse to use Java 1.5 or 6.0
or later source code compliance.

<li>(<i>Windows</i>): It is best to set Eclipse to use Java 1.6 or 6.0
or later source code compliance.
</ul>

<ol>
 <li> While still in the preferences window
  <br> (<i>Mac OS X</i>: <code>Eclipse</code> | <code>Preferences</code>)
  <br> (<i>Windows</i>: <code>Window</code> | <code>Preferences</code>)
  <br> expand <code>Java</code> | <code>Compiler</code>
 <li> Make sure that "Compiler compliance level" is set to "1.6" or "6.0":
</ul>

<i>Note that Java 1.6 is the same as Java 6.0</i>.  What we don't want
is "1.5", "5.0", "1.4" or "4.0".
 <li> Click Apply. 
</ol>

<li> Eclipse has very good compiler error/warning.  One of the
warnings complains if a Serializable class does not have
serialVersionUID declared.  Since this warning is only useful
if you are tightly managing serialization, we turn it off:
 <ol>
  <li> While still in the preferences window
   <br> (<i>Mac OS X</i>: <code>Eclipse</code> | <code>Preferences</code>)
   <br> (<i>Windows</i>: <code>Window</code> | <code>Preferences</code>)
   <br>  Expand <code>Java</code> | <code>Compiler</code> | <code>Errors/Warning</code>
  <li> Under "Potential programming problems", change
  "Serializable class without serialVersionUID" to "Ignore"
  <li> Under "Generic Types", change
  "Unchecked generic type operation" to "Ignore".
  <li> Under "Generic Types", change
  "Usage of a raw type" to "Ignore".
  <li> Click Apply.  If you are prompted for a full rebuild, click Yes.
 </ol>

<li> (<i>Windows</i>:) The PtDoc Doclet in <code>$PTII/doc/doclets/PtDoclet.java</code>
requires <code>tools.jar</code>, which is only in the Java Development
Kit (JDK), not the Java Runtime Environment (JRE).  So, be sure that a
JDK is selected for building, not a JRE.
<br>While still in the preferences window: 
<br> (<i>Mac OS X</i>: <code>Eclipse</code> | <code>Preferences</code>)
<br> (<i>Windows</i>: <code>Window</code> | <code>Preferences</code>)
<ol>
<li> Select <code>Java</code> | <code>Installed JREs</code>
<br>(<i>Mac OS X</i>):  select <code>Java SE 6</code>.
<br>(<i>Windows</i>):  select <code>JVM 1.6.0</code>.

<li> Verify that the checked line corresponds with a JDK, not
a JRE.
</ol>

<li> (<i>Windows</i>): While in the "Installed JREs" window, under Java 1.6,
<code>tools.jar</code> must be added the external jars:
  <ol>
  <li>Select the default JRE | <code>Edit</code> | <code>Add External Jars</code>.
  
  <li> Browse to the path of your JDK for example: 
    <br/> 32 bit: <code>c:\Program Files (x86) \Java\jdk1.6.0_23\lib</code> 
    <br/> 64 bit: <code>c:\Program Files\Java\jdk1.6.0_23\lib</code></li> 
  <li> Hit <code>Open</code>, select <code>tools.jar</code> and then finish.
  </ol>

<li> Click OK  in the Preferences window to apply all of the above changes.
</ol>


<h2><a name="SettingUp">Setting up Eclipse to manage your Ptolemy II development environment</a></h2>

<p>Eclipse will manage your ptII code tree as a <em>project</em> called
the ptII project.  
<!--eclipseSimple-->


<!--eclipseSimple-->

<ol>

<li> Download a ptII source tree from
<a href="http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIlatest#in_browser" target="_top"><CODE>http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIlatest</CODE></a>
<br> The Windows and Mac OS X installers include the source, or you may
install a separate source-only download.

<li>Eclipse uses the <code>.classpath</code> file to set paths and exclude files.
  There are two choices:
  <ol>

    <li> In the Ptolemy II source tree,
      copy <code>.classpath.default</code> to <code>.classpath</code>.
      This choice is the simpler choice, but might exclude optional
      third party packages.

    <li> Run <code>./configure</code>.  This choice is more complex,
      especially for Windows users.  However, this choice will include
      optional third party software that is already installed on your
      machine.

  </ol>

  Choose <b>one</b> of the options below
   <h4>A. Copy .classpath to .classpath.default</h4>
   <ul>
   <li>(<i>Mac OS X</i>): 
     Unfortunately, by default the Mac OS X Finder hides files whose names
     begin with a period, such as <code>.classpath</code>.  One solution
 is to follow the instructions from:
  <a href="http://www.macworld.com/article/51830/2006/07/showallfinder.html"><code>http://www.macworld.com/article/51830/2006/07/showallfinder.html</code></a>:
     <ol>
       <li>Start up the Terminal application, which may be found as
        <code>/Utilities/Terminal.app</code>.  Enter:
	 <pre>
	   defaults write com.apple.Finder AppleShowAllFiles YES
	 </pre>
        <li> Restart the Finder by holding down the Option key, then
	  clicking and holding on the Finder icon in the Dock.  Then, 
	  select "Relaunch".  Or, log out and log back in again.

       <li>Start up the Terminal application, which may be found as
        <code>/Utilities/Terminal.app</code>
       <li>In the Terminal, change to the directory where the Ptolemy II
	 source code was installed.  For example:
	 <pre>
	   cd /Applications/Ptolemy/ptII8.1.devel
	 </pre>  
       <li> Copy the files:
         <pre>
           cp .classpath.default .classpath
         </pre>
     </ol>
   <li>(<i>Windows</i>): 
     <ol>
     <li>Find the Ptolemy II source distribution,
     which by default would be <code>c:\Ptolemy\ptII8.1.devel</code>.
     <li>Right click on <code>.classpath</code> and select delete.
     <li>Right click on <code>.classpath.default</code>, select copy.
     <li>Select paste and paste a copy of the file.
     <li>Right click on the copy, select rename and rename the file
       to <code>.classpath.default</code>.
     <br>Windows 7 users:  If you get a message "You must type a file name",
     then rename the file to <code>.classpath.</code> with a
     trailing dot.  The "operating system" will delete the trailing dot.
     <br><i>This is one of the oddest things I've ever seen</i>.</li>
     </ol>
   </ul>
   <p><b>OR</b></p>
   <h4><a name="#runConfigure">B. Run ./configure</a></h4> 

   Ptolemy II includes a number of packages that rely on software that
   you may or may not have installed, such as MATLAB, the rxtx
   package (for serial port connections), joystick support, Java
   Advanced Imaging (JAI), the Java Media Framework (JMF), and Java
   3D.  If you wish to use or extend these features, you will need to
   perform a few extra steps.  These steps require execution of a
   script called <code>configure</code> in the Ptolemy II home
   directory, which in turn requires (on Windows) installation of
   Cygwin, a package that offers Unix-like facilities within Windows.

   <p>The procedure below will modify the <code>.classpath</code> file
   that is provided in the version control repository to customize it
   for the software that you have installed.</p>

    <ul>
     <li>(<i>Mac OS X</i>): Using the Terminal to run configure
     <ol>
       <li>Start up the Terminal application, which may be found as
        <code>/Utilities/Terminal.app</code>
       <li>In the Terminal, change to the directory where the Ptolemy II
	 source code was installed.  For example:
	 <pre>
	   cd /Applications/Ptolemy/ptII8.1.devel
	 </pre>  
       <li> Set <code>$PTII</code> to the location of the source tree:
	 <pre>
	   export PTII=`pwd`  
	 </pre>  
       <li> Make <code>configure</code> executable.
	 <pre>
	   chmod a+x configure
	 <pre>
       <li> Run <code>./configure</code>
         <pre>
	   ./configure
         </pre>
     </ol>

   <li>(<i>Windows</i>): Install Cygwin and run configure

   Unfortunately Windows does not ship with Unix shell commands
   like <code>make</code>.  The workaround is to install Cygwin,
   see <a href="http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIlatest/cygwin.htm"><code>http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIlatest/cygwin.htm</code></a>
      <ol>
	<li> Start up the Cygwin Bash shell: <code>Start</code> | <code>Run</code> | <code>Cygwin</code>
	<li> Change to the directory where the Ptolemy II source code was
	  installed.  For example:
	  <pre>
	    cd c:/Ptolemy/ptII8.1.devel
          </pre>
	  Note that if there are <b>spaces</b> in the path name to the directory
	    where your Ptolemy installation is located, then you should use
	    double quotes around the path:
	    <code>cd "c:/Documents and Settings/<i>yourLogin</i>/workspace/ptII"</code> 
	<li> Set <code>$PTII</code> to the location of the Ptolemy II source tree:
	  <pre>
	    export PTII=c:/Ptolemy/ptII8.1.devel
	  </pre>
	    Again, if there are spaces in the path, use double quotes:
            <code> export PTII="c:/Documents and Settings/<i>yourLogin</i>/workspace/ptII"</code> 
	<li>  Run:
	  <pre>
	    ./configure
	  </pre>  
	  This will create <code>$PTII/.classpath</code>
      </ol>
    </ul>

 <li> If Eclipse is not running, start up Eclipse

 <li> In Eclipse, do  <code>File</code> | <code>New</code> | <code>Project</code>.
 <li> In the "New Project" window, select "Java" &gt; "Java project", Click Next.
<center>
<p><img src="../img/eclipseNewProject.png" alt="Eclipse New Project" width="525" height="500"></p>
</center>

<li>In the "New Java Project" window:
   <br> In "Project Name", enter any project name,  <code>ptII</code>
  is a common choice.
   <br> Uncheck "Use default location" and browse to the location of
  the source tree.
  <br>(<i>Mac OS X</i>):  For example, browse to <code>/Applications/Ptolemy/ptII8.1.devel</code>
  <!-- In "Project Layout", check "Use project folder as root for
  source and class files".  If "Project Layout" is not selectable, then
  that means that there is already a <code>.eclipse.epf</code> file in the
  default location.  This is usually not a problem, but to be safe,
  exit Eclipse, remove the file and restart Eclipse. -->
  <br> Press "Next".
  <br> Below is the New Java Project window:
  <center>
  <p><img src="../img/eclipseNewJavaProject.png" alt="Eclipse New Java Project" width="603" height="704"></p>
  </center>
  <b>Warning</b>: If the "Setting Build Paths" window comes up with a message
  "The output folder has changed. Do you want to remove all generated resources
  from the old location ptII/bin", then the problem is that the
  <code>.classpath</code> file was not found.  It is best if you exit
  Eclipse, create the <code>.classpath</code> file and redo the above steps.
<li> In the "New Java Project" window, select
 "Allow output folders for source folder", then click "Finish"
  <br> Below is the second New Java Project window:
  <center>
  <p><img src="../img/eclipseNewJavaProject2.png" alt="Eclipse New Java Project" width="603" height="704"></p>
  </center>
<li>When asked if you want to shift to the Java perspective, click on Yes.
<!--eclipseSimple-->
<li>The workspace will take a few minutes to build.
<!--eclipseSimple-->
</ul>

</ol>

<!--eclipseSimple-->
<h3><a name="runningPtolemy">Running Ptolemy II</a></h3>

<ol>
 <li> In the Run menu, select "Run Configurations...".

<p> <li> In the resulting dialog, select "Java Application" and click "New".

<p> <li> In the dialog, fill in the boxes as follows:
<ul>
<li> Name: <CODE>Vergil</CODE>
<li> Project: <CODE>ptII</CODE>
<li> Main class: <CODE>ptolemy.vergil.VergilApplication</CODE>
</ul>

 <p> <li> Press the Run button.
</ol>

The Ptolemy II welcome window should appear.
 <p>You may now wish to read the <a href="http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIlatest/ptII/doc/design/usingVergil/index.htm#in_browser" target="_top">Using Vergil</a>
tutorial.

<h2><a name="ant">Ant</a></h2>
Versions of Ptolemy II after Ptolemy II 8.0.1 include an Ant (<a href="http://ant.apache.org/#in_browser" target="_top"><CODE>http://ant.apache.org/</code></a>)
script that defines useful targets like building the actor documentation and actor/demonstration index.

<p>See the <a href="ant.htm">Ptolemy II Ant documentation</a> for details, but the overview is
that there are two ant build files in the tree:
<ol>
 <li>The <code>$PTII/build.default.xml</code> file is set up for a vanilla installation,
it excludes third party packages like Java3D and Matlab. 
 <li>The <code>$PTII/build.xml</code> file <b>is created if you run ./configure</b>
</ol>

To access an Ant file in Eclipse:
<ul>
 <li> Bring up the Ant view with: <code>Window</code> | <code>Show View</code> | <code>Ant</code>
  <br/>If the <code>Ant</code> menu choice is not present, find it under <code>Others</code></li>
 <li>Right click on the Ant pane and select <code>Add Buildfiles</code>
 <li>In the Buildfile Selection window, open the ptII table and browse to either
   <code>build.default.xml</code> or the <code>build.xml</code> file.
   <br/>If both are present, then select the <code>build.xml</code> file, it is more configured for
   the environment.
</ul>

To build the Javadocs and the actor documentation
<ul> 
 <li>In the Ant pane, expand the ptII task.</li>
 <li>Double click on the <code>javadoc</code> tab.</li>
</ul>

<h2><a name="simpleDebug">Simple Debugging Session</a></h2>

<ol>
 <li> Locate ptolemy/vergil/VergilApplication in the Explorer and
double click. Place a breakpoint on the first line of main()
by using <code>Run</code> | <code>Add/Remove Breakpoint</code>

 <li> Tell Eclipse which class to run with <code>Run</code> | <code>Run</code>.
On the Main
tab, select the Ptolemy II package and enter
ptolemy.vergil.VergilApplication as Main class.

 <li> Press the Run button
 <li> To debug, quit Vergil, and place a breakpoint in, say, the fire() method
of ptolemy.domains.ct.kernel.CTBaseIntegrator. Then <code>Run</code> | <code>Debug</code>, and
as above. Open the Lorenz CT demo from the Quick Tour and run it.
 </ol>

<!--eclipseSimple-->

<h2><a name="Troubleshooting">Troubleshooting</a></h2>

<h3>Preferences</h3>
If you have already used Eclipse and you would like to start over with
new projects and preferences, remove the <code>workspace</code> directory in the
Eclipse directory.  The <code>workspace</code> directory will only
appear if you have already run Eclipse.  <b>Note that removing the
<code>workspace</code> directory will cause Eclipse to 'forget'
about any projects that you may have set up</b>

<h3>Build Error: Assert cannot be resolved</h3>
<p>If, when building, the Problem tab shows "Assert cannot be resolved",
then the problem is that Junit is not being found.

<h3>Rebuilding Briefly flashes a window</h3> 
<p>If you have problems where clicking on build briefly flashes up
a window, look in <code>$PTII/.classpath</code> for and empty
exclusion that looks like <code>||</code>

<p>If you have problems with the classpath, look in the 
<code>workspace/.metadata/log</code> file that is in
the directory where eclipse is installed. For more information
about the <code>.metadata</code> directory, see
<a href="#metadata">below</a>.

<h3>Eclipse takes a long time to start up</h3>

If Eclipse takes a long time to start up, then the problem could be 
a problem in your .metadata file.

 <p>Basically, when eclipse starts up, it might try to update
<a name="metadata"><CODE>H:/workspace/.metadata</CODE></a>
.  The solution is covered in
<a href="http://www.eclipse.org/documentation/html/plugins/org.eclipse.platform.doc.user/doc/tasks/running_eclipse.htm#in_browser" target="_top"><CODE>http://www.eclipse.org/documentation/html/plugins/org.eclipse.platform.doc.user/doc/tasks/running_eclipse.htm</CODE></a>:

The way I figured this out was by running Norton Antivirus and
doing View -&gt; File System Realtime Scan Statistics and then I noticed 
that my machine was updating H:/workspace/.metadata

 <p>I think I introduced the problem by clicking on the Eclipse.exe
binary and selecting Pin to Start Menu.  My solution was to remove the
Eclipse bogus entry in the start menu and then create a shortcut,
change Start in property and then pin that shortcut to my start menu.

</body>
</html>
