<!-- $Id$ -->
<html>
<head>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<title>Features that were new in previous Ptolemy II releases </title>
<link href="default.css" rel="stylesheet" type="text/css">
</head>
<body bgcolor="#ffffff">
<h1>Features that were new in previous Ptolemy II releases</h1>

 <!-- When we create a new release, we move the new features from 
      the old release here so that we can browse them.
      See also the quick tour in ptII/doc/tour
-->


<h3>Major Features that were new in Ptolemy II 6.0</h3>

<ul>
<li> <a href="../ptolemy/codegen/README.html">Ptolemy II C Code Generation</a>
 <br>Primary Developers: Jackie Leung, Gang Zhou, Ye Zhou, Edward A. Lee,
	Christopher Brooks
 <br>  Ptolemy II can now generate C code for SDF, FSM and HDF models.
  This new code generator consists of actor templates (called helpers)
  that contain C code stubs that are stitched together.  Only a subset
  of actors have helpers, so only a subset of models can be converted
  to C.  Creating new helpers is fairly easy though.  The code generator
  has been written to be easily extensible to languages other than C.


<li> The
<a href="../ptolemy/domains/rendezvous/doc/body.htm" target="body">Rendezvous domain</a>:
 <br>Primary Authors: Thomas Huining Feng, Edward A. Lee
 <br>In the Rendezvous domain in Ptolemy II, each actor executes in
its own thread of control, and communication between actors is
by rendezvous.  If an actor is ready to send a message,
it blocks until the receiving actor is ready to receive it. Similarly if
an actor is ready to receive a message, it blocks until the sending actor
is ready to send it.
<p>
This domain supports both conditional and multi-way rendezvous.
In conditional rendezvous, an actor is willing to rendezvous with
any one of several other actors. In multiway rendezvous, an actor requires
rendezvous with multiple other actors at the same time.
When using conditional rendezvous, the choice of which rendezvous
occurs is nondeterministic, in general.
<P>
The model of computation is based on the Communicating Sequential
Processesmodel first proposed by Hoare in 1978. Rendezvous-based
communication is also known as synchronous message passing, but we
avoid this term to avoid confusion with the SR (synchronous/reactive)
domain.

<li> <a href="../ptolemy/configs/viptos/intro.htm">Viptos</a>: 
 <i>Visual editor and code generator for TinyOS programs</i>.
 <br>Primary Author: Elaine Cheong
 <br><B>Viptos</B> is an interface between TinyOS and Ptolemy II that
provides a graphical user interface for TinyOS developers.  

<li> <a href="codeDoc/ptolemy/distributed/domains/sdf/kernel/DistributedSDFDirector.html">Distributed SDF Domain using Jini</a>
 <br>Authors: Daniel Lazaro Cuadrado (Aalborg University).
 <br> The Distributed-SDF domain is an extended version of the existing SDF
 Domain that performs the simulation in a distributed manner using
 Jini.  
</ul>


<h2><a name="other">Other Key New Capabilities in 6.0</a>
</h2>
<ul>
<li> <a href="codeDoc/ptolemy/actor/lib/hoc/CaseDirector.html">CaseDirector</a><a name="Case"></a>
 <br>Primary Author: Edward A. Lee
 <br>The Case actor has been further developed so that it is easier
to build models that execute one of several refinements.

<li> <a href="codeDoc/ptolemy/actor/lib/Publisher.html">Publisher</a>,
<a href="codeDoc/ptolemy/actor/lib/Subscriber.html">Subscriber</a> and
<a href="codeDoc/ptolemy/actor/lib/SubscriptionAggregator.html">SubscriptionAggregator</a>
 <br>Primary Authors: Raymond Cardillo, Edward A. Lee 
<br>These actors use publish/subscribe semantics to read
and write tokens on a named channel.  
 The tokens are
 "tunneled" to any instance of Subscriber that names the same channel
 and that is under the control of the same director. That is, it can
 be at a different level of the hierarchy, or in an entirely different
 composite actor, as long as the relevant composite actors are
 transparent (have no director).

<li> A Token can now be "nil", which means that the data is missing.
If <a href="codeDoc/ptolemy/data/Token.html#nil()">Token.nil()</a> is
called, it indicates that a token is a nil or missing token, which contains no data.
  Nil or missing tokens are common in analytical systems like R and SAS
  where they are used to handle sparsely populated data sources.
  In database parlance, missing tokens are sometimes called 
  null tokens.  Since null is a Java keyword, we use the term "nil".
The PN <a href="../ptolemy/domains/pn/demo/RemoveNilTokens/RemoveNilTokens.htm">Remove Nil Tokens</a>
demo illustrates use of nil tokens.
</ul>


<h2><a name="libraries">New and Enhanced Actor Libraries in 6.0</a>
</h2>
A number of new and enhanced actor libraries are included in version 6.0.2.
You may also wish to refer to the
<a href="codeDoc/ptolemy/actor/lib/package-summary.html">ptolemy.actor.lib</a>
package, where most of the domain-polymorphic actors reside (domain-polymorphic actors are
those that can be used in more than one domain).

<ul>
</ul>

<li><i>New generic actors</i>:
<ul>
<li><a href="codeDoc/ptolemy/actor/lib/DelayStart.html">DelayStart</a>
<li><a href="codeDoc/ptolemy/actor/lib/RemoveNilTokens.html">RemoveNilTokens</a>
<li><a href="codeDoc/ptolemy/actor/lib/Triangular.html">Triangular</a>
</ul>

<li><i>New Communicating Sequential Processes (CSP) actors</i>:
<ul>
<li><a href="codeDoc/ptolemy/domains/csp/lib/Barrier.html">Barrier</a>
<li><a href="codeDoc/ptolemy/domains/csp/lib/Buffer.html">Buffer</a>
<li><a href="codeDoc/ptolemy/domains/csp/lib/ResourcePool.html">ResourcePool</a>
</ul>

<li><i>New Discrete Event (DE) actors</i>:
<ul>
<li><a href="codeDoc/ptolemy/domains/de/lib/UnionMerge.html">UnionMerge</a>
<li><a href="codeDoc/ptolemy/domains/de/lib/Wire.html">Wire</a>
</ul>

</ul>


<h2><a name="demos">New demonstrations in 6.0</a></h2>
<ul>
<li><i>New Communicating Sequential Processes (CSP) demonstrations</i>:
<ul>
<li> <a href="../ptolemy/domains/csp/demo/Barrier/Barrier.htm">Barrier Synchronization</a>
<li> <a href="../ptolemy/domains/csp/demo/ResourcePool/ResourcePool.htm">Resource Management</a>
<li> <a href="../ptolemy/domains/csp/demo/WriteRegulator/WriteRegulator.htm">Write Regulator</a>
</ul>

<li><i>New Continuous Time (CT) demonstrations</i>:
<ul>
<li> <a href="../ptolemy/domains/ct/demo/CartPendulum/CartPendulum.htm">Cart with Pendulum</a> (Requires Java 3D, see the <a href="../ptolemy/domains/gr/doc/main.htm">GR domain</a>)
<li> <a href="../ptolemy/domains/ct/demo/NewtonsCradle/NewtonsCradlePerfectlyInelastic1.htm">Newton's Cradle with Perfectly Inelastic Collisions</a> (Requires Java 3D, see the <a href="../ptolemy/domains/gr/doc/main.htm">GR domain</a>)
<li> <a href="../ptolemy/domains/ct/demo/NewtonsCradle/ParameterizedNewtonsCradleAnimated.htm">Newton's Cradle with Configurable Parameters</a> (Requires Java 3D, see the <a href="../ptolemy/domains/gr/doc/main.htm">GR domain</a>)
<li> <a href="../ptolemy/domains/ct/demo/NewtonsCradle/ParameterizedNewtonsCradleAnimatedNondeterministic.htm">Newton's Cradle with Balls Having Different Masses</a> (Requires Java 3D, see the <a href="../ptolemy/domains/gr/doc/main.htm">GR domain</a>)
<li> <a href="../ptolemy/domains/ct/demo/Pendulum3D/Pendulum3D.htm">3D Pendulum</a> (Requires Java 3D, see the <a href="../ptolemy/domains/gr/doc/main.htm">GR domain</a>)
</ul>

<li><i>New Discrete Event (DE)demonstration</i>:
<ul>
<li><a href="../ptolemy/domains/de/demo/QueueAndServer/QueueAndServer.htm">Queue and Server (M/M/1 Queues)</a>
</ul>

<li><i>New Heterochronous Dataflow (HDF) demonstrations</i>:
<ul>
<li><a href="../ptolemy/domains/hdf/demo/AdaptiveCoding/AdaptiveCoding.htm">AdaptiveCoding</a> (With codegen in Ptolemy II 6.0)
<li><a href="../ptolemy/domains/hdf/demo/Hysteresis/Hysteresis.htm">Hysteresis</a> (With codegen in Ptolemy II 6.0)
<li><a href="../ptolemy/domains/hdf/demo/Merge/Merge.htm">Merge</a> (With codegen in Ptolemy II 6.0)
</ul>

<li><i>New Rendezvous demonstrations</i>:
<ul>
<li> <a href="../ptolemy/domains/rendezvous/demo/Barrier/Barrier.htm">Barrier Synchronization</a>
<li> <a href="../ptolemy/domains/rendezvous/demo/ResourcePool/ResourcePool.htm">Resource Management</a>
<li> <a href="../ptolemy/domains/rendezvous/demo/Sequencing/Sequencing.htm">Sequencing</a>
<li> <a href="../ptolemy/domains/rendezvous/demo/WriteRegulator/WriteRegulator.htm">Write Regulator</a>
</ul>

<li><i>New Synchronous Dataflow (SDF) demonstrations</i>:
<ul>
<li> <a href="../ptolemy/actor/lib/hoc/demo/Case/Case.htm">Case</a> (New in Ptolemy II 6.0) (with codegen)
</ul>

<li><i>New Process Network (PN) demonstrations</i>:
<ul>
<li><a href="../ptolemy/domains/pn/demo/RemoveNilTokens/RemoveNilTokens.htm">Remove Nil Tokens</a>
</ul>


</ul>

<h2>
<a name="features"> Additional Features in 6.0</a>
</h2>
<ul>
<li>Actor and model documentation system
 <br>Primary Authors: Edward A. Lee, Christopher Brooks.
 <br>Actor and model documentation is now displayed using a custom
 widget.  The documentation for an actor or model can be edited by 
 the user.  To view the documentation for an actor, right click on 
 the actor and select Documentation -&gt; Get Documentation.
 This functionality is implemented using
 <a
 href="codeDoc/ptolemy/vergil/actor/DocTableau.html">DocTableau</a>
 and other classes in vergil.actor and the
 <a href="codeDoc/doc/doclets/PtDoclet.html">PtDoclet</a> doclet.

<li> Relation Groups
Relations mediate connections between ports. For flexibility,
particularly with visual syntaxes, the Ptolemy II abstract syntax
permits any number of relations to be involved in any one
connection. Relations may be linked to
other relations. Any two relations that are linked are said to be
members of the same relation group. Specifically, a relation group is
a maximal set of linked relations. Semantically, a relation group has
the same meaning as a single relation.
The API of the Relation class, support linking and unlinking
relations, and also provides a method to obtain a list of all the
relations in a relation group.

<p>In a relation group, there is no significance to the order in which
relations are linked, unlike the order in which ports are linked to
relations. Also, unlike links between relations and ports, there is no
significance to multiple links between the same relations. Any two
relations are either linked or not linked.

<li>
<a href="codeDoc/ptolemy/actor/gui/CheckModelSize.html">CheckModelSize</a>:
<a href="about:copyright" target="_blank">about:copyright</a>
facility has been extended so that model screen size and screen
location are checked.


<li><a href="codeDoc/ptolemy/actor/gui/PtolemyPreferences.html">PtolemyPreferences</a>:
A preference system for UI related preferences, including:
  <ul>
     <li> preference to specify link bend radius
     <li> preference to specify relation size
     <li> preference to show parameters
  </ul>

<li><a href="codeDoc/ptolemy/actor/gui/WelcomeWindow.html">WelcomeWindow</a>,
<a href="codeDoc/ptolemy/actor/gui/WelcomeWindowTableau.html">WelcomeWindowTableau</a>:
An alternative start up screen infrastructure.

<li> <a href="codeDoc/ptolemy/actor/lib/hoc/MultiCompositeActor.html">MultiCompositeActor</a>,
 <a href="codeDoc/ptolemy/actor/lib/hoc/MultiCompositePort.html">MultiCompositePort</a>,
 <a href="codeDoc/ptolemy/actor/lib/hoc/Refinement.html">Refinement</a>,
 <a href="codeDoc/ptolemy/actor/lib/hoc/RefinementPort.html">RefinementPort</a>,
 <a href="codeDoc/ptolemy/domains/ct/kernel/CTCaseDirector.html">CTCaseDirector</a>,
 <a href="codeDoc/ptolemy/domains/ct/kernel/CTCase.html">CTCase</a>,
 <a href="codeDoc/ptolemy/domains/ct/kernel/CTRefinement.html">CTRefinement</a>,
 <a href="codeDoc/ptolemy/vergil/fsm/CaseGraphFrame.html">CaseGraphFrame</a>,
 <a href="codeDoc/ptolemy/vergil/fsm/CaseGraphTableau.html">CaseGraphTableau</a>,
<a href="codeDoc/ptolemy/domains/fsm/modal/Case.html">Case</a>:

 Used by the <a href="#Case">Case facility</a>.

<li><a href="codeDoc/ptolemy/actor/TokenSentEvent.html">TokenSentEvent</a>,
    <a href="codeDoc/ptolemy/actor/TokenSentListener.html">TokenSentListener</a>:
    Two listeners created by Oscar Barney to help with
    <a href="http://kepler-project.org#in_browser">Kepler</a>.

<li><a href="codeDoc/ptolemy/caltrop/ddi/DataflowWithRates.html">DataflowWithRates</a>,
 <a href="codeDoc/ptolemy/caltrop/ddi/DDFFactory.html">DDFFactory</a>,
 <a href="codeDoc/ptolemy/caltrop/ddi/DDF.html">DDF</a>:
 Caltrop work by J&#246;rn W/ Janneck, and Steve Neuendorffer

<li><a href="codeDoc/ptolemy/data/expr/ASTPtUnionConstructNode.html">ASTPtUnionConstructNode</a>,
 <a href="codeDoc/ptolemy/data/type/UnionType.html">UnionType</a>,
 <a href="codeDoc/ptolemy/data/UnionToken.html">UnionToken</a>:
 Support for the Union type

<li>  <a href="codeDoc/ptolemy/math/Precision.html">Precision</a>:
   <ul>
      <li> Provide support for unsigned FixPoint values
      <li> Modify the way Precision is represented internally
    (sign, bits, exponent offset)
      <li> Provide 4 String representations of a given precision
    (including ability to parse and recognize the appropriate
     precision format)
    <br>"3.2" (integer.fraction)
    <br>"5/3" (length/integer)
    <br>"2:-2" (vhdl)
    <br>"5e-2" (length e exponent)
   </ul> 
   <a href="codeDoc/ptolemy/math/FixPoint.html">FixPoint</a>:
   <ul> 
     <li> Provide "lossless" arithmetic operators. These operators
    will generate FixPoint results that "grow" if overflow occurs.
     <li> Provide quantized versions of these operators. Quantization
    is a parameter for each operator.
  </ul>
  Fixpoint and Precision work by Mike Wirthlin (Brigham Young University)


<li><a href="codeDoc/ptolemy/domains/csp/kernel/AbstractBranchController.html">AbstractBranchController</a>,
 <a href="codeDoc/ptolemy/domains/csp/kernel/BranchActor.html">BranchActor</a>,
 <a href="codeDoc/ptolemy/domains/csp/kernel/MultiwayBranchController.html">MultiwayBranchController</a>:
 Support for CSP changes

<li><a href="codeDoc/ptolemy/domains/sdf/kernel/CachedSDFScheduler.html">CachedSDFScheduler</a>

<li><a href="codeDoc/ptolemy/moml/LibraryBuilder.html">LibraryBuilder</a>:
    Support for <a href="http://kepler-project.org#in_browser">Kepler</a>,
    added by Chad Berkeley.


<li>Haiyang Zheng just enriched the exception handling
capabilities in Ptolemy II...  Currently, if you create an actor
that implements the ExceptionHandler interface and put it into a model,
then any exception that occurs when the model is executes gets delegated
to that actor.  The first such actor is a test actor that can be used
to make regression tests that ensure that an exception is thrown.

<li><a href="codeDoc/ptolemy/util/ExecuteCommands.html">ExecuteCommands</a>,
  <a href="codeDoc/ptolemy/util/StreamExec.html">StreamExec</a>:
  Code that executes subprocesses

<li><a href="codeDoc/ptolemy/vergil/actor/DocEffigy.html">DocEffigy</a>,
 <a href="codeDoc/ptolemy/vergil/actor/DocManager.html">DocManager</a>,
 <a href="codeDoc/ptolemy/vergil/actor/DocTableau.html">DocTableau</a>,
 <a href="codeDoc/ptolemy/vergil/basic/CustomizeDocumentationAction.html">CustomizeDocumentationAction</a>,
 <a href="codeDoc/ptolemy/vergil/basic/DocAttribute.html">DocAttribute</a>,
 <a href="codeDoc/ptolemy/vergil/basic/DocViewerFactory.html">DocViewerFactory</a>,
 <a href="codeDoc/ptolemy/vergil/basic/GetDocumentationAction.html">GetDocumentationAction</a>,
 <a href="codeDoc/ptolemy/vergil/basic/RemoveCustomDocumentationAction.html">RemoveCustomDocumentationAction</a>,
 <a href="codeDoc/ptolemy/moml/filter/ActorIndex.html">ActorIndex</a>
 <a href="codeDoc/ptolemy/moml/filter/NamedObjClassesSeen.html">NamedObjClassesSeen</a>:
 Support for actor and model documentation 

<li><a href="codeDoc/ptolemy/vergil/actor/LinkManhattanConnector.html">LinkManhattanConnector</a>,
 <a href="codeDoc/ptolemy/vergil/actor/PortConnectSite.html">PortConnectSite</a>,
 <a href="codeDoc/ptolemy/vergil/actor/PortTerminal.html">PortTerminal</a>,
 <a href="codeDoc/ptolemy/vergil/icon/ActorNameIcon.html">ActorNameIcon</a>,
 <a href="codeDoc/ptolemy/vergil/icon/NameIcon.html">NameIcon</a>,
 <a href="codeDoc/ptolemy/vergil/kernel/attributes/VisibleAttribute.html">VisibleAttribute</a>,
 <a href="codeDoc/ptolemy/vergil/toolbox/RotateOrFlipPorts.html">RotateOrFlipPorts</a>:
  Vergil features such as controllable port orientation.
  
<li><a href="codeDoc/ptolemy/vergil/VergilInitializer.html">VergilInitializer</a>:
  A class that may be called during startup.

<li> New deadlock detection mechanism in process domains supporting
multi-threaded actors
<li> SDFDirector has a period parameter now, making it timed.
and a synchronizeToRealTime parameters.
<li> SDF scheduler runs faster
<li> Workspace has wait(object, timeout) method, and DE uses it (some deadlocks
   prevented when using synchronizeToRealTime).
<li> Miscellaneous user interface enhancements:
   <ul>
      <li> Decorative attributes properly go to background or foreground
      <li>Display name for parameters (need not match the name)
      <li>Multiport connections show ordering
      <li>Bus relations displayed better
      <li>Custom Icons can have a "dashArray" parameter, which  
          creates dashed lines
   </ul>


<h2>
<a name="bugs"> Bug fixes in 6.0</a>
</h2>
<ul>

<li> Fixed memory leaks in MoMLParser
<li> Create hierarchy didn't work with classes
<li> Undo didn't always work with classes
<li> Couldn't drop a director (or anything containing a SharedParameter)
     into a class that already had an instance.
<li> Relation groups didn't always work with hierarchy.
<li> Paste of hierarchical models would mess up locations on the inside.

<li> The highlighting of classes and of inherited elements is now opaque.
They used to be translucent so that the highlights could compose even
though they overlapped.  However, if you print a model to EPS or PDF,
the presence of translucent elements forces the rendition to be
rasterized. This results is a major loss of quality...
<li> Paste of relations not properly offset.
</ul>

</ul>

<h2>Major Features that were new in Ptolemy II 5.1 </h2>

<menu>
<li> <a href="../ptolemy/configs/viptos/intro.htm">Viptos</a> - an interface
between TinyOS and Ptolemy II
</menu>

<h3>Major Features that were new in Ptolemy II 5.0 Highlights</h3>


<ul>
<li> <i>Dynamic Dataflow</i>:
<a href="../ptolemy/domains/ddf/demo/HanoiTower/HanoiTower.htm">HanoiTower</a>
(see also
<a href="../ptolemy/domains/ddf/demo/Eratosthenes/Eratosthenes.htm">Eratosthenes</a>,
<a href="../ptolemy/domains/ddf/demo/IfThenElse/IfThenElse.htm">IfThenElse</a>,
<a href="../ptolemy/domains/ddf/demo/Loop/Loop.htm">Loop</a>,
<a href="../ptolemy/domains/ddf/demo/OrderedMerge/OrderedMerge.htm">OrderedMerge</a>,
<a href="../ptolemy/domains/ddf/demo/RandomWalk/RandomWalk.htm">RandomWalk</a>)
<br>
In dynamic dataflow (DDF) models, actors are fired in response to available
input data. The schedule is dynamic and data dependent, and actors can
change their production and consumption rates in each firing.
Unlike synchronous dataflow, the DDF model of computation is Turing
complete, and questions of deadlock and boundedness are undecidable.
The <a href="../ptolemy/domains/ddf/demo/HanoiTower/HanoiTower.htm">HanoiTower</a>
example exploits this to give an algorithmic solution to the well-known
towers of Hanoi problem.

<br>
<li>
<i>Modeling of hybrid systems</i>:
<a href="../ptolemy/domains/ct/demo/NewtonsCradle/NewtonsCradleComplicated.htm">NewtonsCradleComplicated</a>.
<br>
<i>Hybrid systems</i> are a special case of modal models
where finite-state machines (FSMs) are combined with the continuous-time (CT) models
to get mixed continuous-time and discrete-event models.
The HyVisual package
is a subset of Ptolemy II that includes the FSM and CT domains and libraries
that support the design of hybrid systems.
Version 5.0 introduces significant rework of the hybrid systems
modeling infrastructure to have more complete and predictable
semantics, as described in the paper
"<a href="http://ptolemy.eecs.berkeley.edu/publications/papers/05/OperationalSemantics/#in_browser">
Operational Semantics of Hybrid Systems</a>".
The
<a href="../ptolemy/domains/ct/demo/NewtonsCradle/NewtonsCradleComplicated.htm">NewtonsCradleComplicated</a>
example illustrates this with a model of a physical system that has simultaneous
events.

<br>
<li><i>Stochastic hybrid systems</i>:
<a href="../ptolemy/domains/ct/demo/Spontaneous/IncreasingRatePoisson.htm">IncreasingRatePoisson</a>
(see also
<a href="../ptolemy/domains/ct/demo/Hysteresis/HysteresisWithRandomDelay.htm">HysteresisWithRandomDelay</a>,
<a href="../ptolemy/domains/ct/demo/Brownian/Brownian.htm">Brownian</a>
).
<br>
Stochastic hybrid systems add random behavior to continuous-time models mixed
with discrete events. The 
<a href="../ptolemy/domains/ct/demo/Spontaneous/IncreasingRatePoisson.htm">IncreasingRatePoisson</a>
models spontaneous mode transitions governed by a Poisson process.
The <a href="../ptolemy/domains/ct/demo/Hysteresis/HysteresisWithRandomDelay.htm">HysteresisWithRandomDelay</a>
example uses similar spontaneous mode transitions to model random delay in mode transitions.
The <a href="../ptolemy/domains/ct/demo/Brownian/Brownian.htm">Brownian</a> example
models a stochastic differential equation describing a random walk process.

<br>
<li> <i>Heterochronous Dataflow</i>:
<a href="../ptolemy/domains/hdf/demo/Fibonacci/Fibonacci.htm">Fibonacci</a>
(see also
<a href="../ptolemy/domains/hdf/demo/Merge/Merge.htm">Merge</a>).
<br>
Heterochronous dataflow (HDF) is an extension of synchronous dataflow
(SDF) that permits dynamically changing production and consumption
patterns without sacrificing static scheduling. In SDF, the production
and consumption patterns of an actor are constant.
In HDF they are allowed to change between iterations of the HDF schedule.
Modal models can be used to change these patterns.
Although HDF can express many data-dependent computations that cannot
be represented by SDF, it is not Turing complete.  Consequently, deadlock
and boundedness remain decidable.
The <a href="../ptolemy/domains/hdf/demo/Fibonacci/Fibonacci.htm">Fibonacci</a>
example uses this mechanism in a clever way to extract a Fibonacci sequence
from a counting sequence.

</ul>

<h2><a name="other">Other Key New Capabilities</a>
</h2>
<ul>

<li><i>Unbounded model time</i>: LongRuns
<br>
Version 5.0 introduces a new
<a href="../ptolemy/../doc/codeDoc/ptolemy/actor/util/Time.html">Time</a> class
that represents model time in a manner that has a specified resolution
and unbounded growth potential. Any two time values that are within the specified
resolution are treated as equal. Moreover, time can increase forever without
concern for loss of resolution or overflow.
The LongRuns
example is a discrete-event model that can be run forever, in principle,
without (significant) growth of memory requirements and without loss
of (internal) precision in model time.
The precision of time representations is given by a director parameter
whose value is shared across all directors in a model (see
<a href="../ptolemy/../doc/codeDoc/ptolemy/moml/SharedParameter.html">SharedParameter</a>).
<br>

<li><i>Synchronous Reactive Modeling</i>:
<a href="../ptolemy/domains/sr/demo/GuardedCount/GuardedCount.htm">GuardedCount</a>.
<br>
The synchronous/reactive (SR) domain,
which is inspired by the synchronous languages Esterel, Lustre, and Signal,
realizes a concurrency model where actors react instantaneously and simultaneously
at ticks of a logical clock. Version 5.0 introduces a richer set of actors
for use with this domain, as well as a bug fix permitting
SROptimizedScheduler to be used inside a composite actor.
The <a href="../ptolemy/domains/sr/demo/GuardedCount/GuardedCount.htm">GuardedCount</a>
example illustrates some of these new capabilities.
The new actors are:
<ul>
 <li> <a href="../ptolemy/../doc/codeDoc/ptolemy/domains/sr/lib/Current.html">Current</a>
 <li> <a href="../ptolemy/../doc/codeDoc/ptolemy/domains/sr/lib/Default.html">Default</a>
 <li> <a href="../ptolemy/../doc/codeDoc/ptolemy/domains/sr/lib/EnabledComposite.html">EnabledComposite</a>
 <li> <a href="../ptolemy/../doc/codeDoc/ptolemy/domains/sr/lib/Pre.html">Pre</a>
 <li> <a href="../ptolemy/../doc/codeDoc/ptolemy/domains/sr/lib/When.html">When</a>
</ul>

<li><i>Nondeterministic merge in Process Networks (PN)</i>:
<a href="../ptolemy/domains/pn/demo/NondeterministicMerge/NondeterministicMerge.htm">NondeterministicMerge</a>.
<br>
The PN domain now supports a NondeterministicMerge actor, which merges two
incoming streams nondeterministically. This new actor should be used with
caution, since determinism is one of the key features of PN. Use of this
actor is risky because any given execution is only representative of
the possible executions. Nonetheless, this offers a considerable
increment in expressiveness.

<br>

<li><i>New Parameters</i>:
<br>
A number of new parameters have been introduced.
The <a href="../ptolemy/../doc/codeDoc/ptolemy/actor/parameters/DoubleRangeParameter.html">DoubleRangeParameter</a>
limits the range and precision of a double-valued parameter,
and is supported in the user interface by providing a slider by default in parameter
editing dialogs.
The <a href="../ptolemy/../doc/codeDoc/ptolemy/actor/parameters/FilePortParameter.html">FilePortParameter</a>
is used by actors to specify a file or URL using both a
parameter and a port. The user interface supports this by offering a file browser
dialog by default when editing this parameter. The
<a href="../ptolemy/../doc/codeDoc/ptolemy/moml/SharedParameter.html">SharedParameter</a>
is a parameter
whose value is constrained to be identical to a suite of other instances of
SharedParameter in the same model. This parameter is used, for example, to
handle seeds in random number generators, as illustrated for example in
ColtRandom.

<br>
<li><i>Higher Order Components</i>:
ExecDemos
(see also
<a href="../ptolemy/actor/lib/hoc/demo/IterateOverArray/IterateOverArray.htm">IterateOverArray</a>).
<br>
The higher-order component capabilities of Ptolemy II continue to evolve.
The ExecDemos model, when executed, starts a new
Java virtual machine that then executes the
RunDemos model,
which runs all demos in a specified directory using full-screen mode.
This illustrates how to use higher-order actors to control the lifecylcle of other Ptolemy II
models. This example can be set up to automatically and repeatedly run demos
unattended by following the instructions in the
<a href="../ptolemy/demo/README.txt">README.txt</a> file.
The new higher-order actors include:
<ul>
 <li> <a href="../ptolemy/../doc/codeDoc/ptolemy/actor/lib/hoc/ApplyFilterOverArray.html">ApplyFilterOverArray</a>
 <li> <a href="../ptolemy/../doc/codeDoc/ptolemy/actor/lib/hoc/ApplyFunction.html">ApplyFunction</a>
 <li> <a href="../ptolemy/../doc/codeDoc/ptolemy/actor/lib/hoc/ApplyFunctionOverSequence.html">ApplyFunctionOverSequence</a>
 <li> <a href="../ptolemy/../doc/codeDoc/ptolemy/actor/lib/hoc/IterateOverArray.html">IterateOverArray</a>
</ul>

<li> <i>Graphics domain</i>:
<a href="../ptolemy/domains/gr/demo/SolarSystem/SolarSystem.htm">SolarSystem</a>
(see also <a href="../ptolemy/domains/gr/demo/Helen/Helen.htm">Helen</a>).
<br>
The graphics (GR) domain has been extensively revised to take better advantage of underlying
capabilities in the Java 3D package. For example, the
<a href="../ptolemy/domains/gr/demo/SolarSystem/SolarSystem.htm">SolarSystem</a>
model illustrates transparency (see the rings of Saturn), and the
<a href="../ptolemy/domains/gr/demo/Helen/Helen.htm">Helen</a> model
illustrates texture mapping and movable viewer positioning.
The following capabilities are now supported:
<ul>
 <li>transparency
 <li>texture mapping
 <li>shininess
 <li>colors use ColorAttribute
 <li>more colors can be set
 <li>settable resolution
 <li>wireframe option for shapes
 <li>flat facets option for shapes
 <li>run-time changes of parameter values
 <li>parameters in the Text3D actor
 <li>movable viewer position
</ul>

</ul>

<h2><a name="libraries">New and Enhanced Actor Libraries</a>
</h2>
A number of new and enhanced actor libraries are included in version 5.0.
You may also wish to refer to the
<a href="../ptolemy/../doc/codeDoc/ptolemy/actor/lib/package-summary.html">ptolemy.actor.lib</a>
package, where most of the domain-polymorphic actors reside (domain-polymorphic actors are
those that can be used in more than one domain).

<ul>
<li><i>New generic actors</i>:
<ul>
<li> <a href="../ptolemy/../doc/codeDoc/ptolemy/actor/lib/Sequence.html">Sequence</a>
</ul>

<li><i>Random number generators</i>:
ColtRandom.
<br>
A new library of random number generators, developed jointly with
David Bauer and Kostas Oikonomou from AT&amp;T Research, is based on the popular
Colt "Open Source Libraries for High
Performance Scientific and Technical
Computing in Java."
Colt is described at
<a href="http://hoschek.home.cern.ch/hoschek/colt/#in_browser" target="_top">
<CODE>http://hoschek.home.cern.ch/hoschek/colt/</CODE></a>.
The library supports many
commonly used probability distributions and provides
systematic management of seeds and random number generation
techniques.

<br>
<li><i>New discrete-event actors</i>:
<ul>
<li> <a href="../ptolemy/../doc/codeDoc/ptolemy/domains/de/lib/NonInterruptibleTimer.html">NonInterruptibleTimer</a>
<li> <a href="../ptolemy/../doc/codeDoc/ptolemy/domains/de/lib/Register.html">Register</a>
</ul>

<li> <i>Communications library</i>:
<br>
The <a href="../ptolemy/../doc/codeDoc/ptolemy/actor/lib/comm/package-summary.html">communications library</a>
includes a number of new actors:
<ul>
 <li> <a href="../ptolemy/../doc/codeDoc/ptolemy/actor/lib/comm/HuffmanBasic.html">HuffmanBasic</a>
 <li> <a href="../ptolemy/../doc/codeDoc/ptolemy/actor/lib/comm/HuffmanCoder.html">HuffmanCoder</a>
 <li> <a href="../ptolemy/../doc/codeDoc/ptolemy/actor/lib/comm/HuffmanDecoder.html">HuffmanDecoder</a>
 <li> <a href="../ptolemy/../doc/codeDoc/ptolemy/actor/lib/comm/LempelZivCoder.html">LempelZivCoder</a>
 <li> <a href="../ptolemy/../doc/codeDoc/ptolemy/actor/lib/comm/LempelZivDecoder.html">LempelZivDecoder</a>
</ul>

</ul>

<h2> <a name="demos">New Demonstrations</a>
</h2>
<ul>
<li>New Continuous Time demos:
<ul>
<li> <a href="../ptolemy/domains/ct/demo/Brownian/Brownian.htm">Brownian</a> 
<li> <a href="../ptolemy/domains/ct/demo/ContinuousClock/ContinuousClock.htm">Continuous Clock</a>
<li> <a href="../ptolemy/domains/ct/demo/HierarchicalExecution/HierarchicalExecution.htm">Hierarchical Execution</a>
<li> <a href="../ptolemy/domains/ct/demo/Hysteresis/Hysteresis.htm">Hysteresis</a>
<li> <a href="../ptolemy/domains/ct/demo/Hysteresis/HysteresisWithRandomDelay.htm">HysteresisWithRandomDelay</a>
<li> <a href="../ptolemy/domains/ct/demo/Hysteresis/HysteresisWithRandomLosses.htm">HysteresisWithRandomLosses</a>
<li> <a href="../ptolemy/domains/ct/demo/Spontaneous/IncreasingRatePoisson.htm">IncreasingRatePoisson</a>
<li> <a href="../ptolemy/domains/ct/demo/LevelCrossingDetectorDetectsGlitches/LevelCrossingDetectorDetectsGlitches.htm">Level Crossing Detector Detects Glitches</a>
<li> <a href="../ptolemy/domains/ct/demo/LevelCrossingDetector/LevelCrossingDetectorDetectingDirections.htm">Level Crossing Detector with Different Detecting Directions</a>
<li> <a href="../ptolemy/domains/ct/demo/NewtonsCradle/NewtonsCradle.htm">Newton's Cradle</a>
<li> <a href="../ptolemy/domains/ct/demo/NewtonsCradle/NewtonsCradleComplicated.htm">Newton's Cradle with Complicated Dynamics</a>
<li> <a href="../ptolemy/domains/ct/demo/NewtonsCradle/NewtonsCradleNondeterministic.htm">Newton's Cradle with Nondeterministic State Macine</a>
<li> <a href="../ptolemy/domains/ct/demo/Spontaneous/Poisson.htm">Poisson</a>
<li> <a href="../ptolemy/domains/ct/demo/SampledClocks/SampledClocks.htm">Sampled Clocks</a>
<li> <a href="../ptolemy/domains/ct/demo/Satellite/Satellite.htm">Satellite</a>
<li> <a href="../ptolemy/domains/ct/demo/StickyMasses/StickyMassesNewVersion.htm">Sticky Point Masses Modified Version</a>
<li> <a href="../ptolemy/domains/ct/demo/ContinuousClock/TriggeredContinuousClock.htm">Triggered Continuous Clock</a>
<li> <a href="../ptolemy/domains/ct/demo/V2V/V2V.htm">Vehicle 2 Vehicle</a>
</ul>

<li>New Discrete Event (DE) demos:
<ul>
 <li><a href="../ptolemy/domains/de/demo/AssemblyLine/AssemblyLine.htm">Assembly Line</a> 
 <li><a href="../ptolemy/domains/de/demo/HierarchicalModel/HierarchicalModel.htm">Hierarchical Model</a> 
</ul>

<li> New Dynamic Dataflow (DDF) demos:
<ul>
 <li><a href="../ptolemy/domains/ddf/demo/Eratosthenes/Eratosthenes.htm">Eratosthenes</a>
 <li><a href="../ptolemy/domains/ddf/demo/Factorial/Factorial.htm">Factorial</a>
 <li><a href="../ptolemy/domains/ddf/demo/HanoiTower/HanoiTower.htm">HanoiTower</a>
 <li><a href="../ptolemy/domains/ddf/demo/IfThenElse/IfThenElse.htm">IfThenElse</a>
 <li><a href="../ptolemy/domains/ddf/demo/Loop/Loop.htm">Loop</a>
 <li><a href="../ptolemy/domains/ddf/demo/OrderedMerge/OrderedMerge.htm">OrderedMerge</a>
 <li><a href="../ptolemy/domains/ddf/demo/RandomWalk/RandomWalk.htm">RandomWalk</a>
 <li><a href="../ptolemy/domains/ddf/demo/RijndaelEncryption/RijndaelEncryption.htm">RijndaelEncryption</a>
</ul>

<li> New Heterochronous Dataflow (HDF) demos:
<ul>
 <li><a href="../ptolemy/domains/hdf/demo/AdaptiveCoding/AdaptiveCoding.htm">AdaptiveCoding</a>
 <li><a href="../ptolemy/domains/hdf/demo/Fibonacci/Fibonacci.htm">Fibonacci</a>
 <li><a href="../ptolemy/domains/hdf/demo/Hysteresis/Hysteresis.htm">Hysteresis</a>
 <li><a href="../ptolemy/domains/hdf/demo/Merge/Merge.htm">Merge</a>
</ul>

<li>New Giotto demos:
<ul>
<li><a href="../ptolemy/domains/giotto/demo/Multimode/Multimode.htm">Multimode</a>
</ul>

<li> New Graphics (GR) demos
(requires Java 3D, see the <a href="../ptolemy/domains/gr/doc/main.htm">GR domain</a>):
<ul>
<li> <a href="../ptolemy/domains/gr/demo/Helen/Helen.htm">Helen</a>
<li> <a href="../ptolemy/domains/gr/demo/SolarSystem/SolarSystem.htm">SolarSystem</a>
</ul>

<li> New Wireless demos:
<ul>
<li> <a href="../ptolemy/domains/wireless/demo/SmartParking/SmartParking.htm">SmartParking</a>
</ul>

</ul>


<h2>Major Features that are new in Ptolemy II 4.0</h2>
Below are new features that were not present in Ptolemy II 3.x
<ul>
<li>
<a href="../ptolemy/domains/wireless/demo/WirelessSoundDetection/WirelessSoundDetection.htm">
Modeling wireless sensor networks</a> (see also
<a href="design/visualsense.pdf" target="_top">VisualSense</a>).
<br>
The wireless domain extends the DE domain with wireless channel modeling and
library of components and methodologies for modeling wireless systems.
This domain is packaged in a Ptolemy II configuration called
VisualSense, which includes
an extensive suite of demos.

<li>
<a href="../ptolemy/domains/sdf/demo/NoisySinewave/NoisySinewave.htm">
Hierarchical classes, subclasses, and inner classes</a>. (See also
<a href="../ptolemy/configs/doc/ClassesIllustrated.png">
classes illustrated visually</a> and
<a href="../ptolemy/domains/sdf/demo/RijndaelEncryption/RijndaelEncryption.htm">
Rijndael Encryption</a>).
<br>
Version 4.0 introduces actor-oriented classes, subclasses, and
inner classes with inheritance. This is a major improvement in
the modularity mechanisms available in actor-oriented design. 
A side effect of the class mechanism is that MoML files are now
much smaller since they do not duplicate information defined
in a base class.

<li>
<a href="../ptolemy/domains/sdf/demo/MultipleRuns/MultipleRuns.htm">
Lifecycle management</a> (see also
<a href="../ptolemy/actor/lib/hoc/demo/ModelReference/ModelReference.htm">
ModelReference</a>).
<br>
Version 4.0 introduces the first of a family of
<i>lifecycle management</i> actors, which are actors
that control the execution of associated models.
This example uses one model to control repeated runs of another.

</ul>

<h2>Other Features that are new in Ptolemy II 4.0</h2>
<ul>
<li>
<a href="../ptolemy/data/unit/demo/StaticUnits/NonAppletStaticUnits.htm">
Statically Checked Unit System</a> (see also the older
<a href="../ptolemy/data/unit/demo/Units/Units.htm">
Dynamically Checked Units System</a>).
<br>
The new statically checked units system associates
units with ports and checks compatibility in connections.

<li>
<a href="../ptolemy/actor/lib/hoc/demo/MobileFunction/MobileFunction.htm">
Higher-Order Components</a>.
Version 4.0 adds <i>higher-order components</i>,
which are components (like actors) that operate on other
components and functions rather than directly on data.

<li>
<a href="../ptolemy/vergil/kernel/attributes/demo/AnimateVergil/AnimateVergil.htm">
Interactive decorations in Vergil diagrams</a>.
<br>
Actors can have custom icons, diagrams can be decorated with
decorative elements, and parameters of the icons and decorative
elements can be tied to values compute by the model.

<li>
<a href="../ptolemy/domains/psdf/demo/BlindCommunication/BlindCommunication.htm">Reconfiguration analysis</a>
<br>
A new capability helps to ensure the safe use of reconfiguration.
Currently it is primarily used by the code generator to
ensure that synchronous dataflow rate parameters are constant
over the lifetime of the model.  This analysis also enables
parameterized static scheduling of some models where rate parameters
change only between iterations of a sub-model.

<li>
<a href="../ptolemy/domains/de/demo/HierarchicalModel/HierarchicalModel.htm">
Causality analysis</a> (see also
<a href="../ptolemy/domains/sr/demo/FeedbackLoop/FeedbackLoop.htm">SR FeedbackLoop</a>).
<br>
A new (and still evolving) capability unifies causality analysis
that is required by several domains. It provides a systematic
framework for determining whether events at a particular input
affect a particular output.

<li>
Copernicus
<br>
The copernicus code generator has matured significantly:
<ul>
<li>Better handling of data types, reconfiguration, and attributes other than
simple parameters.
<li>Code Generation for the Giotto domain.
<li>A primitive code generator for generating atomic actors from models.
<li>Static analysis of reachable code for generating self-contained jar files.
</ul>

<!-- FIXME: String parameters -->

</ul>

<h3>New Demonstrations</h3>

<h2>
New and Enhanced Actor Libraries
</h2>
<ul>

<li> 
<a href="codeDoc/ptolemy/actor/lib/security/package-summary.html">Security library</a>.

<li>
<a href="codeDoc/ptolemy/actor/lib/security/package-summary.html">Array manipulatoin library</a> (See also
<a href="../ptolemy/domains/sdf/demo/Array/Array.htm">
Array</a>).

<li>
<a href="codeDoc/ptolemy/actor/lib/comm/package-summary.html#package_description">
Communications library</a> (see also
   <a href="../ptolemy/actor/lib/comm/demo/ConvolutionalCoder/ConvolutionalCoder.htm">ConvolutionalCoder</a>,
   <a href="../ptolemy/actor/lib/comm/demo/Scrambler/Scrambler.htm">Scrambler</a>,
   <a href="../ptolemy/actor/lib/comm/demo/TrellisDecoder/TrellisDecoder.htm">TrellisDecoder</a>,
   <a href="../ptolemy/actor/lib/comm/demo/ViterbiDecoder/ViterbiDecoder.htm">ViterbiDecoder</a>).
   
<!-- FIXME: String library -->

</ul>
<h2>
New Demonstrations of Older Capabilities
</h2>
<ul>
<!-- "../ptolemy/domains/de/demo/SmartSender/SmartSender.htm">
Self repairing model is not a very good applet-->

<li> <a href="../ptolemy/domains/ct/demo/Transmission/Transmission.htm">
Using function closures to simplify a hybrid system model (of a car transmission)</a>.

<li> <a href="../ptolemy/domains/sdf/demo/SynthesizedVoice/SynthesizedVoice.htm">
SynthesizedVoice</a>.

</ul>
<h2>
Capabilities requiring additional software and/or hardware
</h2>

<ul>
<li>
<a href="codeDoc/ptolemy/actor/lib/io/comm/SerialComm.html">
Serial port actors</a>.

<li>
<a href="codeDoc/ptolemy/actor/lib/x10/X10Interface.html">
X10 power-line network actors</a>.

<li>
The 
<a href="codeDoc/ptolemy/matlab/Expression.html">Matlab Expression actor</a>
now takes a String Parameter instead of a  StringAttribute.
This means that you can now reference parameters in scope using the
$name or ${name} syntax.  For instance, if there is a parameter named
foo, you can specify a Matlab expression like:
<pre>
    output = fft(in, $foo)
</pre>
Before, you would have to have read foo in a Const actor and
provided it as input to the Matlab expression actor.

<li> <a href="codeDoc/ptolemy/actor/lib/jmf/package-summary.html#package_description">
Java Media Framework (JMF) actors</a>.

<li><a href="codeDoc/ptolemy/domains/gr/lib/quicktime/package-summary.html#package_description">
GR Quicktime actors</a>.

</ul>


<h2>
<a name="features">
Additional Features
</a>
</h2>
<ul>


<li> Other updates to Vergil:
	<menu>
	<li> Expert mode parameter editing
	<li><CODE>vergil -help</CODE> lists available configurations.
	<li> Full-screen mode for use in presentations (accessible from the toolbar).
	<li> <a href="codeDoc/ptolemy/vergil/kernel/attributes/DocumentationAttribute.html">DocumentationAttribute</a>
    </menu>

<li> Single Window Mode (contributed by Thales).
<br> If <code>vergil -single</code> is invoked, then a single window interface
is used.  This interface is experimental.
<br>Limitations:
<ul>
<li>The <code>-single</code> argument should be the first argument.
<li>The plot windows come up outside of the single window interface.
</ul>

<li> XMLToken.
This is a preliminary mechanism for manipulating XML data in Ptolemy II models.

<li> Sandbox support
<br>Vergil has better support for operating in a security sandbox.
For details, see the
<a href="sandbox.htm">Ptolemy II Sandbox documentation</a>.
</ul>

<h2>New Actors</h2>


<menu>
<li> <b><a href="codeDoc/ptolemy/actor/lib/package-summary.html">ptolemy.actor.lib</a></b>

<dl>
<dt><a href="codeDoc/ptolemy/actor/lib/ArrayAverage.html">ArrayAverage</a>:
<dd>(Mark Oliver, Edward A. Lee)
An actor that outputs the average of the input array.

<dt><a href="codeDoc/ptolemy/actor/lib/ArrayLevelCrossing.html">ArrayLevelCrossing</a>:
<dd>(Edward A. Lee, Steve Neuendorffer)
An actor that finds the index of the first item in an array to cross a specified threshold.

<dt><a href="codeDoc/ptolemy/actor/lib/ArrayPeakSearch.html">ArrayPeakSearch</a>:
<dd>(Edward A. Lee)
An actor that identifies peaks in an array.

<dt><a href="codeDoc/ptolemy/actor/lib/ArraySort.html">ArraySort</a>:
<dd>(Mark Oliver, Edward A. Lee)
An actor that sorts the elements of an array.

<dt><a href="codeDoc/ptolemy/actor/lib/ArrayToElements.html">ArrayToElements</a>:
<dd>(Rachel Zhou)
An actor that disassemble an ArrayToken to a multiport output.

<dt><a href="codeDoc/ptolemy/actor/lib/ComputeHistogram.html">ComputeHistogram</a>:
<dd>(Steve Neuendorffer)
Compute a histogram of input data.

<dt><a href="codeDoc/ptolemy/actor/lib/ElementsToArray.html">ElementsToArray</a>:
<dd>(Rachel Zhou)
An actor that reads a token from each input channel to assemble an ArrayToken.

<dt><a href="codeDoc/ptolemy/actor/lib/Exec.html">Exec</a>:
<dd>(Christopher Hylands Brooks, Contributor: Edward A. Lee)
Execute a command in a subprocess.

<dt><a href="codeDoc/ptolemy/actor/lib/Exit.html">Exit</a>:
<dd>(Edward A. Lee)
A simple sink actor that consumes and discards input tokens and then calls System.exit() in wrapup.

<dt><a href="codeDoc/ptolemy/actor/lib/GradientAdaptiveLattice.html">GradientAdaptiveLattice</a>:
<dd>(Steve Neuendorffer)
An IIR filter actor that uses a direct form II implementation.

<dt><a href="codeDoc/ptolemy/actor/lib/SetVariable.html">SetVariable</a>:
<dd>(Edward A. Lee, Steve Neuendorffer)
Set the value of a variable contained by the container.

</dl>

<li> <b><a href="codeDoc/ptolemy/actor/lib/comm/package-summary.html">ptolemy.actor.lib.comm</a></b>

<dl>
<dt><a href="codeDoc/ptolemy/actor/lib/comm/Slicer.html">Slicer</a>:
<dd>(Rachel Zhou)
A Slicer, which functions as a decoder of the LineCoder of complex type.

<dt><a href="codeDoc/ptolemy/actor/lib/comm/TrellisDecoder.html">TrellisDecoder</a>:
<dd>(Rachel Zhou, contributor: Edward A. Lee)
Decode convolutional code with non-antipodal constellation.

</dl>

<li> <b><a href="codeDoc/ptolemy/actor/lib/conversions/package-summary.html">ptolemy.actor.lib.conversions</a></b>

<dl>
<dt><a href="codeDoc/ptolemy/actor/lib/conversions/StringToXML.html">StringToXML</a>:
<dd>(Yang Zhao)
An actor that outputs data read from a URL.

</dl>

<li> <b><a href="codeDoc/ptolemy/actor/lib/hoc/package-summary.html">ptolemy.actor.lib.hoc</a></b>

<dt><a href="codeDoc/ptolemy/actor/lib/hoc/MobileFunction.html">MobileFunction</a>:
<dd>(Yang Zhao)
An actor that apply dynamically defined functions to its input.

<dt><a href="codeDoc/ptolemy/actor/lib/hoc/MobileModel.html">MobileModel</a>:
<dd>(Yang Zhao)
A composite actor that apply models dynamically.

<dt><a href="codeDoc/ptolemy/actor/lib/hoc/ModelReference.html">ModelReference</a>:
<dd>(Edward A. Lee)
An atomic actor that executes a model specified by a file or URL.

</dl>

<li> <b><a href="codeDoc/ptolemy/actor/lib/io/package-summary.html">ptolemy.actor.lib.io</a></b>

<dl>
<dt><a href="codeDoc/ptolemy/actor/lib/io/DirectoryListing.html">DirectoryListing</a>:
<dd>( Christopher Hylands, Edward A. Lee)
An actor that produces an array that lists the contents of a directory.

</dl>

<li> <b><a href="codeDoc/ptolemy/actor/lib/jai/package-summary.html">ptolemy.actor.lib.jai</a></b>

<dl>
<dt><a href="codeDoc/ptolemy/actor/lib/jai/AdaptiveMedian.html">AdaptiveMedian</a>:
<dd>(James Yeh)
An actor that performs adaptive median filtering on a double matrix.

<dt><a href="codeDoc/ptolemy/actor/lib/jai/ImageToJAI.html">ImageToJAI</a>:
<dd>(James Yeh)
Convert an ImageToken to a JAIImageToken.

<dt><a href="codeDoc/ptolemy/actor/lib/jai/JAIConstant.html">JAIConstant</a>:
<dd>(James Yeh, Steve Neuendorffer)
An actor that produces a JAIImageToken with constant bands.

<dt><a href="codeDoc/ptolemy/actor/lib/jai/JAIDataConvert.html">JAIDataConvert</a>:
<dd>(James Yeh)
An actor that changes the data format in a JAIImageToken.

<dt><a href="codeDoc/ptolemy/actor/lib/jai/JAIPNGWriter.html">JAIPNGWriter</a>:
<dd>(James Yeh)
An actor that writes to a PNG file.

<dt><a href="codeDoc/ptolemy/actor/lib/jai/SaltAndPepper.html">SaltAndPepper</a>:
<dd>()
package ptolemy.actor.lib.jai;

</dl>

<li> <b><a href="codeDoc/ptolemy/actor/lib/javasound/package-summary.html">ptolemy.actor.lib.javasound</a></b>

<dl>
<dt><a href="codeDoc/ptolemy/actor/lib/javasound/LiveSoundActor.html">LiveSoundActor</a>:
<dd>(Steve Neuendorffer)
An actor that reads in audio samples and plays the audio data.

</dl>

<li> <b><a href="codeDoc/ptolemy/actor/lib/jmf/package-summary.html">ptolemy.actor.lib.jmf</a></b>

<dl>
<dt><a href="codeDoc/ptolemy/actor/lib/jmf/AudioPlayer.html">AudioPlayer</a>:
<dd>(James Yeh)
An actor that plays a DataSource containing a music file.

<dt><a href="codeDoc/ptolemy/actor/lib/jmf/ImageToJMF.html">ImageToJMF</a>:
<dd>(Christopher Hylands Brooks)
Convert an ImageToken into a JMFImageToken.

<dt><a href="codeDoc/ptolemy/actor/lib/jmf/MovieReader.html">MovieReader</a>:
<dd>(James Yeh)
An actor that outputs frames from a video file.

<dt><a href="codeDoc/ptolemy/actor/lib/jmf/MovieWriter.html">MovieWriter</a>:
<dd>(James Yeh)
An actor that writes frames to a video file.

<dt><a href="codeDoc/ptolemy/actor/lib/jmf/StreamLoader.html">StreamLoader</a>:
<dd>(James Yeh)
Load a datasource from a URL.

<dt><a href="codeDoc/ptolemy/actor/lib/jmf/VideoPlayer.html">VideoPlayer</a>:
<dd>(James Yeh)
An actor that displays a AVI, Quicktime or MPEG video file.

</dl>

<li> <b><a href="codeDoc/ptolemy/actor/lib/security/package-summary.html">ptolemy.actor.lib.security</a></b>

<dl>
<dt><a href="codeDoc/ptolemy/actor/lib/security/CipherActor.html">CipherActor</a>:
<dd>(Christopher Hylands Brooks, Contributor: Rakesh Reddy)
A base class for actors that encrypt and decrypt data.

<dt><a href="codeDoc/ptolemy/actor/lib/security/CryptographyActor.html">CryptographyActor</a>:
<dd>(Christopher Hylands Brooks, Contributor: Rakesh Reddy)
A base class for cryptographic actors.

<dt><a href="codeDoc/ptolemy/actor/lib/security/KeyReader.html">KeyReader</a>:
<dd>( Christopher Hylands Brooks)
Read in a keystore from a FileParameter and output a Key.

<dt><a href="codeDoc/ptolemy/actor/lib/security/KeyStoreActor.html">KeyStoreActor</a>:
<dd>( Christopher Hylands Brooks)
A baseclass for actors that read or write keystores.

<dt><a href="codeDoc/ptolemy/actor/lib/security/KeyToken.html">KeyToken</a>:
<dd>(Christopher Hylands Brooks, Based on TestToken by Steve Neuendorffer)
Tokens that contain java.security.Keys

<dt><a href="codeDoc/ptolemy/actor/lib/security/KeyWriter.html">KeyWriter</a>:
<dd>( Christopher Brooks)
Read in a Key from the input port and write it out to a KeyStore.

<dt><a href="codeDoc/ptolemy/actor/lib/security/PrivateKeyReader.html">PrivateKeyReader</a>:
<dd>( Christopher Hylands Brooks)
Open a keystore from a FileParameter and output a PrivateKey.

<dt><a href="codeDoc/ptolemy/actor/lib/security/PublicKeyReader.html">PublicKeyReader</a>:
<dd>( Christopher Brooks)
Open a keystore from a FileParameter and output a PublicKey.

<dt><a href="codeDoc/ptolemy/actor/lib/security/SecretKey.html">SecretKey</a>:
<dd>(Christopher Hylands Brooks, Contributor: Rakesh Reddy)
Create a secret key and send it on the output.

<dt><a href="codeDoc/ptolemy/actor/lib/security/SecretKeyReader.html">SecretKeyReader</a>:
<dd>( Christopher Hylands Brooks)
Open a keystore from a FileParameter and output a SecretKey.

<dt><a href="codeDoc/ptolemy/actor/lib/security/SignatureActor.html">SignatureActor</a>:
<dd>(Christopher Hylands Brooks, Contributor: Rakesh Reddy)
A base class for signature actors.

<dt><a href="codeDoc/ptolemy/actor/lib/security/SignatureSigner.html">SignatureSigner</a>:
<dd>(Christopher Hylands Brooks, Contributor: Rakesh Reddy)
Sign the input data using a private key.

<dt><a href="codeDoc/ptolemy/actor/lib/security/SignatureVerifier.html">SignatureVerifier</a>:
<dd>(Christopher Hylands Brooks, Contributor: Rakesh Reddy)
Verify the signature of the input data.

<dt><a href="codeDoc/ptolemy/actor/lib/security/SymmetricDecryption.html">SymmetricDecryption</a>:
<dd>(Christopher Hylands Brooks, Contributor: Rakesh Reddy)
Decrypt an unsigned byte array using a symmetric algorithm.

<dt><a href="codeDoc/ptolemy/actor/lib/security/SymmetricEncryption.html">SymmetricEncryption</a>:
<dd>(Christopher Hylands Brooks, Contributor: Rakesh Reddy)
Encrypt an unsigned byte array using a symmetric algorithm.

</dl>

<li> <b><a href="codeDoc/ptolemy/actor/lib/string/package-summary.html">ptolemy.actor.lib.string</a></b>

<dl>
<dt><a href="codeDoc/ptolemy/actor/lib/string/StringCompare.html">StringCompare</a>:
<dd>(Vinay Krishnan, Daniel L\341zaro Cuadrado (contributor: Edward A. Lee))
An actor that computes a specified String comparison function on the two String inputs.

<dt><a href="codeDoc/ptolemy/actor/lib/string/StringFunction.html">StringFunction</a>:
<dd>(Mike Kofi Okyere, Ismael M. Sarmiento)
Trim a string, convert a string to uppercase, or convert a string to lowercase depending on the user's selection.

<dt><a href="codeDoc/ptolemy/actor/lib/string/StringIndexOf.html">StringIndexOf</a>:
<dd>(Rakesh Reddy, Philip Baldwin, Edward A. Lee)
Finds index of a string contained in a given text

<dt><a href="codeDoc/ptolemy/actor/lib/string/StringLength.html">StringLength</a>:
<dd>(Edward A. Lee)
Output the length of a string provided at the input.

<dt><a href="codeDoc/ptolemy/actor/lib/string/StringMatches.html">StringMatches</a>:
<dd>(Antonio Yordan-Nones, Colin Cochran (contributor Edward A. Lee))
Pattern match a string to a regular expression.

<dt><a href="codeDoc/ptolemy/actor/lib/string/StringReplace.html">StringReplace</a>:
<dd>(Antonio Yordan-Nones, Neil E. Turner, Edward A. Lee)
Replace an instance of a string with another input string according to a regular expression.

<dt><a href="codeDoc/ptolemy/actor/lib/string/StringSubstring.html">StringSubstring</a>:
<dd>(Neil E. Turner and Edward A. Lee)
Output a substring of the string provided at the input.

</dl>

<li> <b><a href="codeDoc/ptolemy/actor/lib/x10/package-summary.html">ptolemy.actor.lib.x10</a></b>

<dl>
<dt><a href="codeDoc/ptolemy/actor/lib/x10/ApplianceController.html">ApplianceController</a>:
<dd>(Colin Cochran (contributor: Edward A. Lee))
An ApplianceController actor sends x10-appliance-module commands to the x10 network.

<dt><a href="codeDoc/ptolemy/actor/lib/x10/CommandListener.html">CommandListener</a>:
<dd>(Colin Cochran and Edward A. Lee)
This actor senses specified X10 commands.

<dt><a href="codeDoc/ptolemy/actor/lib/x10/LampController.html">LampController</a>:
<dd>(Colin Cochran and Edward A. Lee)
A LampController actor sends X10-light-module commands to the X10 network.

<dt><a href="codeDoc/ptolemy/actor/lib/x10/LevelListener.html">LevelListener</a>:
<dd>(Colin Cochran and Edward A. Lee)
This actor senses specified X10 commands.

<dt><a href="codeDoc/ptolemy/actor/lib/x10/Listener.html">Listener</a>:
<dd>(Colin Cochran (contributor: Edward A. Lee))
Output X10 commands detected on the X10 network.

<dt><a href="codeDoc/ptolemy/actor/lib/x10/Receiver.html">Receiver</a>:
<dd>(Colin Cochran and Edward A. Lee)
Receive x10 commands propagating through an x10 network.

<dt><a href="codeDoc/ptolemy/actor/lib/x10/Sender.html">Sender</a>:
<dd>(Colin Cochran (contributor: Edward A. Lee))
Send commands to an x10 network.

<dt><a href="codeDoc/ptolemy/actor/lib/x10/X10Interface.html">X10Interface</a>:
<dd>(Colin Cochran and Edward A. Lee)
This class creates an x10 inteface device which can send and receive 
10 commands to and from an x10 network.
</dl>

<li> <b><a href="codeDoc/ptolemy/actor/lib/xslt/package-summary.html">ptolemy.actor.lib.xslt</a></b>

<dl>
<dt><a href="codeDoc/ptolemy/actor/lib/xslt/XSLTransformer.html">XSLTransformer</a>:
<dd>( Yang Zhao, Christopher Hylands Brooks)
An actor that read an XSLT file and apply it to its input.

</dl>


<li> <b><a href="codeDoc/ptolemy/domains/gr/lib/package-summary.html">ptolemy.domains.gr.lib</a></b>

<dl>
<dt><a href="codeDoc/ptolemy/domains/gr/lib/Box2D.html">Box2D</a>:
<dd>(Steve Neuendorffer)
A class that represents a 2D rectangle in a GR model.

<dt><a href="codeDoc/ptolemy/domains/gr/lib/Ellipse2D.html">Ellipse2D</a>:
<dd>(Ismael M. Sarmiento, Steve Neuendorffer)
Create a rectangle, rounded rectangle, or ellipse with the size and position specified by the user.

<dt><a href="codeDoc/ptolemy/domains/gr/lib/FigureInteractor.html">FigureInteractor</a>:
<dd>(Ismael M. Sarmiento)
Listen for and handle events on Diva figures.

<dt><a href="codeDoc/ptolemy/domains/gr/lib/GRShape2D.html">GRShape2D</a>:
<dd>(Steve Neuendorffer, Ismael M. Sarmiento)
An abstract base class for shaded GR Actors

<dt><a href="codeDoc/ptolemy/domains/gr/lib/GRTransform2D.html">GRTransform2D</a>:
<dd>(Steve Neuendorffer)
An abstract base class for transforming input 3D shape

<dt>IconViewScreen3D
<dd>(Steve Neuendorffer)
A GR scene viewer <i>Removed between Ptolemy II 5.0 and 6.0 because
it was unused and when it is in the configuration, it
	throws an exception because of icon problems)</i>

<dt><a href="codeDoc/ptolemy/domains/gr/lib/Image2D.html">Image2D</a>:
<dd>(Ismael M. Sarmiento, Steve Neuendorffer)
Create a figure from a user specified image file.

<dt><a href="codeDoc/ptolemy/domains/gr/lib/Line2D.html">Line2D</a>:
<dd>(Steve Neuendorffer, Ismael M. Sarmiento)
Create a line with the endpoints provided by the user.

<dt><a href="codeDoc/ptolemy/domains/gr/lib/Rectangle2D.html">Rectangle2D</a>:
<dd>(Ismael M. Sarmiento, Steve Neuendorffer)
Create a rectangle, rounded rectangle, or ellipse with the size and position specified by the user.

<dt><a href="codeDoc/ptolemy/domains/gr/lib/RectangularFigure2D.html">RectangularFigure2D</a>:
<dd>(Ismael M. Sarmiento, Steve Neuendorffer)
Create a rectangle, rounded rectangle, or ellipse with the size and position specified by the user.

<dt><a href="codeDoc/ptolemy/domains/gr/lib/Rotate2D.html">Rotate2D</a>:
<dd>(Ismael M. Sarmiento, Steve Neuendorffer)
Rotate a two-dimensional figure based on the angle and anchor point provided by the user.

<dt><a href="codeDoc/ptolemy/domains/gr/lib/Scale2D.html">Scale2D</a>:
<dd>(Ismael M. Sarmiento, Steve Neuendorffer)
Scale a two-dimensional figure based on the size provided by the user.

<dt><a href="codeDoc/ptolemy/domains/gr/lib/Translate2D.html">Translate2D</a>:
<dd>(Steve Neuendorffer)
An actor that translates the input 3D shape

<dt><a href="codeDoc/ptolemy/domains/gr/lib/ViewScreen2D.html">ViewScreen2D</a>:
<dd>(Steve Neuendorffer, Ismael M. Sarmiento)
A GR scene viewer

</dl>

<li> <b><a href="codeDoc/ptolemy/domains/sdf/lib/package-summary.html">ptolemy.domains.sdf.lib</a></b>

<dl>
<dt><a href="codeDoc/ptolemy/domains/sdf/lib/CountTrues.html">CountTrues</a>:
<dd>(Steve Neuendorffer)
An actor that counts true inputs.

</dl>

<li> <b><a href="codeDoc/ptolemy/domains/sr/lib/package-summary.html">ptolemy.domains.sr.lib</a></b>

<dl>
<dt>NonStrictTokenToExpression:
<dd>(Haiyang Zheng)
A non-strict actor that converts tokens into expressions.
<i>Removed because it is not a monotonic function.</i>
</dl>

<li> <b><a href="codeDoc/ptolemy/vergil/actor/lib/package-summary.html">ptolemy.vergil.actor.lib</a></b>

<dl>
<dt><a href="codeDoc/ptolemy/vergil/actor/lib/VisualModelReference.html">VisualModelReference</a>:
<dd>(Edward A. Lee)
An atomic actor that executes a model specified by a file or URL.

</dl>
</menu>

<h2>Major Features that were new in Ptolemy 3.0 </h2>
<menu>

<li> Continuous Time (CT) domain rework for improved mixed signal and
hybrid systems semantics
(Jie Liu, Parc, and Haiyang Zheng).

<li> <a href="../ptolemy/domains/ci/doc/body.htm" target="body">Component Interaction Domain</a>
(Yang Zhao, Xiaojun Liu) - The CI domain models systems that contain
both data-driven and demand-driven styles of computation.

<li> Rework of FSM domain to support chained transitions
and better hybrid systems semantics (Haiyang Zheng).

<li> Expression language rework to create a full-featured, functional
and higher-order expression language with extensive support for
composite types such as matrices, arrays, and records;
the expression language is also now fully integrated with the Ptolemy II
type system
 (Steve Neuendorffer, Edward A. Lee).

<li> Configurations have been reworked to make it much easier to
create standalone tools that extract portions of the Ptolemy II
infrastructure and have customized user interfaces, documentation,
and actor and director libraries.
Configurations have been refactored into
separate directories in <CODE>$PTII/ptolemy/configs</CODE>,
and one example of such a standalone tool, HyVisual, is provided.

<li> Updates to Vergil, the user interface for building models
(Steve Neuendorffer, Edward A. Lee, John Reekie):
	<menu>
	<li> Run buttons on the toolbar and hotkeys.
        <li> Persistent window sizing and placement.
	<li> Undo/Redo.
	<li> Port Parameters.
	<li><CODE>vergil -help</CODE> lists available configurations.
	<li> Full-screen mode for use in presentations.
        </menu>

<li> Other user interface improvements
(Steve Neuendorffer, Edward A. Lee):
        <menu>
        <li> Interactive shells infrastructure.
        <li> An interactive expression shell using this infrastructure.
	<li> Infrastructure for specialized token viewers.
        Files with the extension .ptd are now opened by a token viewer.
        The default token viewers is a text editor, but others can be
	added in the configuration.
	<li> A matrix token viewer.
        </menu>

<li> HSIF Support
(Haiyang Zheng).
The Hybrid System Interchange Format (HSIF), was developed by the
<a href="http://www.isis.vanderbilt.edu#in_browser">
Institute of Software Integrated Systems (ISIS) at Vanderbilt University</a>
as part of the
<a href="http://www.isis.vanderbilt.edu/Projects/mobies/default.html#in_browser">ISIS MoBIES</a> effort.
The HSIF documentation states:
<menu>
"The goal of HSIF is to define an interchange format for hybrid system
models that can be shared between modeling and analysis tools. HSIF
models represent dynamic systems, whose dynamics includes both
continuous and discrete behaviors."
</menu>
Haiyang Zheng developed a set of XSLT files that convert
HSIF into MoML, the XML format used to represent Ptolemy II Models.
See the <a href="../ptolemy/hsif/demo/index.htm">HSIF/MoML documentation</a>.
</li>

<li> A first version of higher-order components, the
<a href="codeDoc/ptolemy/actor/lib/hoc/MultiInstanceComposite.html">
MultiInstanceComposite</a> actor
(Zoltan Kemenczy and Sean Simmons, Research In Motion, Ltd.).
This actor creates a parameterized number of instances of a composite
actor.

<li>
Python integration, with a
<a href="codeDoc/ptolemy/actor/lib/python/PythonScript.html">PythonScript</a>
actor that permits definition of actors in Python (Xiaojun Liu).
This uses
<a href="http://www.jython.org/#in_browser" target="_top">Jython</a>,
a Java implementation of Python.
</menu>
<h2>Other Features that are new in Ptolemy II 3.0</h2>

<ul>

<li> Ptolemy II Matlab interface updates
(Zoltan Kemenczy and Sean Simmons, Research In Motion, Ltd.):
<menu>
<li> Logical variable support for Matlab version 6.5 (R13).
<li> Remove (the need for) ptmatlab.dll being in the user's path.
<li> Removed warnings for gcc version 3.2 (used by latest cygwins).
<li> Add support/configuration for building on Linux.
</menu>
Resources:
 <menu>
 <li> <a href="../ptolemy/matlab/matlab.htm">
Ptolemy II Matlab Interface Overview</a>
 <a href="codeDoc/ptolemy/matlab/package-summary.html">
Java class documentation</a>
 <li> <a href="../ptolemy/matlab/demo/MatlabExpression/MatlabExpression.xml">
Matlab Expression Demonstration</a>,
 <li> <a href="../ptolemy/matlab/demo/MatlabCT/MatlabCT.xml">
Matlab Continuous Time Demonstration</a>
</menu>
These demos require that Matlab be installed locally; they will not work
within an applet, but will work with Web Start.

<li> <a href="http://embedded.eecs.berkeley.edu/caltrop/index.html#in_browser" target="_top">Cal Actor Language (CAL)</a>
(J&ouml;rn W. Janneck, Chris Chang, Johan Ecker,
John Reekie, Yang Zhao, Ed Willink, Lars Wernli):

<br>The CAL actor language is a textual notation for representing the
functionality of dataflow actors. It is designed to allow low-entropy
descriptions of actors by providing statically analyzable information
about the behavior of an actor, such as the number of tokens it
produces and consumes in each firing, whether there are any conditions
on being able to fire, what those conditions depend on, etc.

<br>CAL demos:
<a href="../ptolemy/caltrop/demo/FunctionClosures/FunctionClosures.xml">Function Closures</a>,
<a href="../ptolemy/caltrop/demo/FunctionDefinition/FunctionDefinition.xml">Function Definition</a>,
<a href="../ptolemy/caltrop/demo/Primes/Primes.xml">Primes</a>,
<a href="../ptolemy/caltrop/demo/SDFDDI/SDFDDI.xml">SDFDDI</a>.

<li> <a href="codegen.htm">Code generator improvements</a>
(Steve Neuendorffer, Christopher Hylands):
The Java code generator now handles Expression actors.
The code generator now works with Java 1.4.
The applet generator has been extended to copy necessary jar
files on an as needed basis.

<li> <a href="codeDoc/ptolemy/data/FunctionToken.html">FunctionToken</a>
class (Xiaojun Liu, Steve Neuendorffer): An expression that defines a function
can be passed among actors in a function token.

<li> Transition Refinements: A transition in an FSM can have
a refinement, which is a model that executes when the refinement
is taken.

<li> <a href="codeDoc/ptolemy/kernel/attributes/FileAttribute.html">
FileAttribute</a> class
(Edward A. Lee).
This attribute makes it easy to create a parameter in an actor
that represents a file or resource. It supports specification
of files using paths relative to the model, the classpath, or
the user directory.  It also provides a convenient user interface for
selecting and accessing files on the file system.

<li> <a href="codeDoc/ptolemy/data/ImageToken.html">ImageToken</a> class
(James Yeh): An abstract token that contains images.  Derived tokens
such as 
<a href="codeDoc/ptolemy/data/AWTImageToken.html">
AWTImageToken</a>,
<a href="codeDoc/ptolemy/actor/lib/jai/JAIImageToken.html">
ptolemy.actor.lib.jai.JAIImageToken</a>
provide concrete classes.

<li> Interface to C actors using the Java Native Interface
(Vincent Arnould, Thales, contributor: Christopher Hylands):
The <a href="codeDoc/jni/package-summary.html">jni</a>
package contains a prototype of an interface between Ptolemy II actors
and C code by using the Java Native Interface (JNI).
To use this facility, you must download and install Ptolemy II 
from source.
(This interface shipped in Ptolemy II 4.0, but not in Ptolemy II 5.0).
</ul>

<h3>New Demonstrations</h3>

<menu>
<li> <a href="../ptolemy/domains/ci/doc/body.htm" target="body">CI</a>:
	Component Interaction

 <menu>
 <li> <a href="../ptolemy/domains/ci/demo/Router/Router.xml">Router</a> 
 </menu>

<li> <a href="../ptolemy/domains/ct/doc/body.htm" target="body">CT</a>:
	Continuous Time
<menu>

<li> <a href="../ptolemy/domains/ct/demo/ComparedClocks/ComparedClocks.xml">Compared Clocks</a>

<li> <a href="../ptolemy/matlab/demo/MatlabCT/MatlabCT.xml">Matlab Continuous Time Demonstration</a>

<li>HSIF Thermostat and Swimming Pool
<br> This example shows a simple thermostat modeled as a hybrid system.
The purpose of the example is to demonstrate the ability that HyVisual has
to import models defined in HSIF, the <i>Hybrid System Interchange Format</i>.
To run HSIF models, you must invoke Ptolemy II with the <CODE>-hyvisual</CODE>
command line argument or else run the HyVisual Web Edition.  These
models will not work in a standard Ptolemy II vergil or Web Edition
because to support HSIF, we need to check xml each file to see
if it is an HSIF file of a MoML file.  This check slows Ptolemy II
down slightly.

 <br>See the <a href="../ptolemy/hsif/demo/index.htm">HSIF/MoML documentation</a> for details.

<li><a href="../ptolemy/hsif/demo/SwimmingPool/SwimmingPool.xml">HSIF Swimming Pool</a>.
<br> This example shows a simple hybrid system model of a pool.

<li> <a href="../ptolemy/domains/ct/demo/LevelCrossingDetector/LevelCrossingDetector.xml">Level Crossing Detector</a>
<li> <a href="../ptolemy/domains/ct/demo/SampledClocks/SampledClocks.xml">Sampled Clocks</a>
</menu>

<li> <a href="../ptolemy/domains/de/doc/body.htm" target="body">DE</a>:
	 Discrete Event
 <menu>
 <li> <a href="../ptolemy/actor/lib/hoc/demo/HocDE/HocDE.xml">HOC DE</a>  (New in Ptolemy II 3.0.2)
 </menu>


<li><a href="../ptolemy/domains/fsm/doc/body.htm" target="body">FSM</a>:
	Finite State Machine
 <menu>
<li> <a href="../ptolemy/domains/fsm/demo/ChainedTransitions/ChainedTransitions.xml">Chained Transitions</a>
 <li> <a href="../ptolemy/domains/fsm/demo/ModalBSC/ModalBSC.xml">Modal&nbsp;Binary Symmetric Channel</a>
 <li> <a href="../ptolemy/domains/fsm/demo/StateTracker/StateTracker.xml">State&nbsp;Tracker</a>
 </menu>

<li> <a href="../ptolemy/domains/sdf/doc/body.htm" target="body">SDF</a>:
	Synchronous Dataflow
 <menu>
 <li><a href="../ptolemy/actor/lib/hoc/demo/DFTSubSet/DFTSubSet.xml">DFT Subset</a>
 <li><a href="../ptolemy/domains/sdf/demo/FourierSeries/FourierSeries.xml">Fourier Series</a>
 <li><a href="../ptolemy/domains/sdf/demo/SoundSpectrum/SoundSpectrum.xml">Sound Spectrum</a>
 </menu>
</menu>


<h3>New Actors</h3>

<ul>

<li> <a href="codeDoc/ptolemy/actor/lib/package-summary.html">ptolemy.actor.lib</a>:

<dl>

<dt> <a href="codeDoc/ptolemy/actor/lib/ArrayMaximum.html"><code>ArrayMaximum</code></a>
<dd> (Mark Oliver)
Extract maximum element from an array. (New in Ptolemy II 3.0.2)

<dt> <a href="codeDoc/ptolemy/actor/lib/ArrayMinimum.html"><code>ArrayMinimum</code></a>
<dd> (Mark Oliver, Edward A. Lee)
Extract minimum element from an array. (New in Ptolemy II 3.0.2)



<dt> <a href="codeDoc/ptolemy/actor/lib/BusAssembler.html"><code>BusAssembler</code></a>
<dd> (Zoltan Kemenczy, Research in Motion Limited)
Assemble input port channels into output bus.

<dt> <a href="codeDoc/ptolemy/actor/lib/BusDisassembler.html"><code>BusDisassembler</code></a>
<dd> (Zoltan Kemenczy, Research in Motion Limited)
split input bus channels onto output port channels.

<dt> <a href="codeDoc/ptolemy/actor/lib/Rician.html"><code>Rician</code></a>
<dd> (Ye Zhou)
An actor that outputs a random sequence with a Rician distribution.

<dt> <a href="codeDoc/ptolemy/actor/lib/Stop.html"><code>Stop</code></a>
<dd> (Edward A. Lee)
An actor that stops a model executing when it receives a true token.

<dt> <a href="codeDoc/ptolemy/actor/lib/ThrowException.html"><code>ThrowException</code></a>
<dd> (Edward A. Lee)
An actor that throws an exception when it receives a true token.

<dt> <a href="codeDoc/ptolemy/actor/lib/ThrowModelError.html"><code>ThrowModelError</code></a>
<dd> (Edward A. Lee)
An actor that throws a model error when it receives a true token.

</dl>

<li> <a href="codeDoc/ptolemy/actor/lib/comm/package-summary.html">ptolemy.actor.lib.comm</a>:

<dl>

 <dt> <a href="codeDoc/ptolemy/actor/lib/comm/ConvolutionalCoder.html"><code>ConvolutionalCoder</code></a>

<dd> (Ye Zhou) Generate a convolutional code.

 <dt> <a href="codeDoc/ptolemy/actor/lib/comm/DeScrambler.html"><code>DeScrambler</code></a>
<dd> (Ye Zhou) Descramble the input bit sequence using a feedback shift register.

 <dt> <a href="codeDoc/ptolemy/actor/lib/comm/HadamardCode.html"><code>HadamardCode</code></a>
<dd> (Ye Zhou) Produce a Hadamard codeword by selecting a row from a Hadamard matrix.

 <dt> <a href="codeDoc/ptolemy/actor/lib/comm/Scrambler.html"><code>Scrambler</code></a>
<dd> (Ye Zhou) Given an input bit sequence, scramble it in a pseudo random way.

 <dt> <a href="codeDoc/ptolemy/actor/lib/comm/ViterbiDecoder.html"><code>ViterbiDecoder</code></a>
<dd> (Ye Zhou) Viterbi Decoder.

</dl>

<li>  <a href="codeDoc/ptolemy/actor/lib/conversions/package-summary.html">ptolemy.actor.lib.conversions</a>:

<dl>

<dt> <a href="codeDoc/ptolemy/actor/lib/conversions/ExpressionToToken.html"><code>ExpressionToToken</code></a>
<dd> (Steve Neuendorffer)
An actor that reads expressions and parses them into tokens.


<dt> <a href="codeDoc/ptolemy/actor/lib/conversions/TokenToExpression.html"><code>TokenToExpression</code></a>
<dd> (Steve Neuendorffer)
An actor that converts tokens into expressions.

</dl>

<li>  <a href="codeDoc/ptolemy/actor/lib/jai/package-summary.html">ptolemy.actor.lib.jai</a>:

<dl>
<dt> Java Advanced Imaging actors
<dd> (James Yeh)
Actors that use the Java Advanced Imagining framework
</dl>

<li>  <a href="codeDoc/ptolemy/actor/lib/jmf/package-summary.html">ptolemy.actor.lib.jmf</a>:

<dl>
<dt> Java Media Framework actors
<dd> (James Yeh)
Actors that use the Java Media Framework
</dl>


</ul>


<h2>Changes between Ptolemy II 3.0.1 and 3.0.2</h2>
Ptolemy II 3.0.1 was an interim release with a narrow distribution.
<br>The following changes occurred between 3.0.1 and 3.0.2

<h3>Actors that were added between Ptolemy II 3.0.1 and 3.0.2</h3>
<dl>
<dt> <a href="codeDoc/ptolemy/actor/lib/ArrayMaximum.html"><code>ArrayMaximum</code></a>
<dd> (Mark Oliver)
Extract maximum element from an array.

<dt> <a href="codeDoc/ptolemy/actor/lib/ArrayMinimum.html"><code>ArrayMinimum</code></a>
<dd> (Mark Oliver, Edward A. Lee)
Extract minimum element from an array.

</dl>

<h3>Enhancements between Ptolemy II 3.0.1 and 3.0.2</h3>
<dl>
<dt> <code>$PTII/configure.in</code>,
<code>$PTII/configure</code>,
<code>$PTII/.classpath.in</code>,
<code>$PTII/.eclipse.epf</code>,
<code>$PTII/configs/FindClass.java</code>
<dd> Support for <a href="coding/eclipse.htm">configuring Eclipse</a>.

</dl>
<h3>Bug Fixes between Ptolemy II 3.0.1 and 3.0.2</h3>
<dl>
<dt> <code>ptolemy/domains/sdf/lib/vq/ImageSequence.java</code>
<dd> Adjusted initial value of imageURLTemplate parameter
<dt> <code>ptolemy/domains/sdf/lib/Autocorrelation.java</code>
<dd> Can now handle complex data.
<dt> <code>lib/saxon7.jar</code>
Updated to 7.6.5 of Saxon.  This was necessary to get both
the HSIF demos and the Cal demos to work.
<dt> <code>ptolemy/vergil/actor/ActorEditorGraphController.java</code>
<dd> Under MacOS look and feel, use Command-Click to create new
relations and drag new edges
<dt> <code>ptolemy/vergil/toolbox/PtolemyTransferable.java</code>
<dd> Under MacOS look and feel, change how we instantiate
the DataFlavor so as to avoid a stack trace
<dt> <code>ptolemy/actor/gui/TextEffigy.java</code>
<dd> If the user tries to open a missing file, throw a better exception.
</dl>

<h2>Major Features that are new in Ptolemy 2.0 </h2>
<menu>

<li> <a href="../ptolemy/domains/de/demo/ModalModel/ModalModel.htm">Modal Models</a>
 (Xiaojun Liu, Edward A. Lee)
<br>A model model is one whose behavior depends on its "mode"
of operation. A modal model in Ptolemy II is an FSM (finite state machine)
combined hierarchically with other models. A state in the FSM represents
a mode of operation, and can have a refinement that gives the behavior
in that model.
The refinement can be another FSM or some other model using some other
Ptolemy domain. This example combines DE, FSM, and SDF to model a
system where regularly sampled signals are perturbed by irregular
events in time.
</li>

<li> <a href="codegen.htm">Code Generation</a>
(Primary Author: Stephen Neuendorffer, Contributor: Christopher Hylands)
 <br>This release includes a limited prototype of our code generation facility
that will generate .class files for non-hierarchical SDF models.

 <br>Note that the code generator will not work in an applet, but will
work with Web Start, the Windows installer and the standard configure
and build.

<li> <a href="codeDoc/ptolemy/data/unit/package-summary.html">ptolemy.data.unit</a> -
<a href="../ptolemy/data/unit/demo/Units/Units.htm">Units Demo</a>
(Primary Authors: Yuhong Xiong, Xiaojun Liu, Contributors: Winthrop Williams, Edward A. Lee)
<br>
A major source of errors in embedded software is incorrect application
of units. Yuhong Xiong and Xiaojun Liu have created a unit system for
Ptolemy II that is quite clever. A suite of constants are defined, with
names such as "meter", "cm", "feet", "miles", "seconds", "hours", and
"days". In each unit category ("length" or "time" for example), there
is a primary unit with respect to which all the others are specified.
Thus, for example, if the primary unit of length is meters, then the
expression "1.0 * cm" will have an internal value of 0.01 * meters.
Compound units are specified by just multiplying and dividing, as in
for example "1.0 * cm/second".

<p>The way this is realized is that these unit constants are tokens just
like other Ptolemy II data, and multiplication and division are
overloaded in the base classes for numeric valued tokens.  We continue
to work on this architecture to enable users to customize the unit
system on a per-model basis.

<li> <a href="../ptolemy/domains/tm/doc/body.htm" target="body">Timed Multitasking Domain</a>
(Jie Liu) - an implementation of a model of
computation based on priority-driven multitasking, as common in
real-time operating systems (RTOSs), but with more deterministic
behavior.

<li> <a href="../ptolemy/domains/sr/doc/body.htm" target="body">Synchronous/Reactive Domain</a>:
(Primary Author: Paul Whitaker, Contributors: Elaine Cheong, John Reekie)

<li> <a href="webStartHelp.htm">Web Start</a>
 (Christopher Hylands) -  
Ptolemy II includes support to build distributions using Sun's Web Start
facility, which allows end users to download fully functional distributions
via the web.

<li> Vergil updates
(Steve Neuendorffer, Edward A. Lee, John Reekie)
 Vergil has been improved
 and the following features have been added
	<menu>
	<li> Annotations - It is now much easier to annotate a model with
	text.
	<li> Parameters - The model can display top level parameter
	names and values
	<li> Snap to grid - It is now much easier to line up actors
	<li> Panner, zoom - The panner and zoom facilities make
	it easier to navigate large
	<li> Improved FSM editor
	<li> Animation - It is now possible to show which actors are firing
	when.
	<li> Better icons - Some icons such as Const, Scale and Expression
	will display their values.  
	<li> Set data types of ports
	<li> Java Virtual Machine properties window - JVM Properties
	can be queried and garbage collection requested.
	<li> <a href="../ptolemy/domains/ct/doc/signal_types.htm">Documentation for setting CT signal types</a>
	</menu>
See <a href="design/usingVergil/index.htm"><code>$PTII/doc/design/usingVergil/index.htm</code></a> for more complete information

</menu>

<h2>Other Features that are new in Ptolemy II 2.0</h2>

<ul>


<li> <a href="../ptolemy/domains/giotto/doc/body.htm" target="body">Giotto Domain rewrite</a>: 
(Haiyang Zheng) - The Giotto scheduler was rewritten and the kernel
was updated.

<li> <a href="../ptolemy/domains/fsm/demo/MultipleRuns/MultipleRuns.htm">Multiple Runs</a>
(Xiaojun Liu, Edward A. Lee) - The FSM domain as been extended
to perform multiple runs of refinement on a model.

<li> <a href="coding/debugging.htm">Support for <code>jdb</code></a> 
(Zoltan Kemenczy, Research In Motion, Ltd.) -
The scripts that invoke Ptolemy II have been extended to support
<code>jdb</code>, the Java Debugger.

<li> Ptolemy II Matlab interface
(Zoltan Kemenczy and Sean Simmons, Research In Motion, Ltd.) -
The Matlab Expression actor uses JNI to invoke the Matlab engine, 
evaluate Matlab expressions and return the results to Ptolemy II.
The Matlab Expression actor works only under Windows, and requires
that Matlab be installed on your local machine.
 <menu>
 <li> <a href="../ptolemy/matlab/matlab.htm">Ptolemy II Matlab Interface Overview</a>
 <a href="codeDoc/ptolemy/matlab/package-summary.html">Java class documentation</a>
 <li> <a href="../ptolemy/matlab/demo/MatlabExpression/MatlabExpression.xml">Matlab Expression Demonstration</a> -
 Windows only, requires that Matlab be installed locally, will not work within
 an applet, but will work with Web Start.
 </menu>

<li> <a href="codeDoc/ptolemy/data/expr/package-summary.html">Expression improvements</a>
(Zoltan Kemenczy and Sean Simmons of Research In Motion, Ltd.)
Functions with scalar arguments applied to arrays and matrices
element-by-element (recursive argument dimension reduction); widened search
for static function (and method) signatures that includes most ptolemy.math
classes; performance improvements by caching search results; widened token to
java-type conversions for function arguments and results.


<li> <a href="codeDoc/ptolemy/graph/package-summary.html">ptolemy.graph</a>
 (Shuvra S. Bhattacharyya (University of Maryland at College Park)) -
The graph package was redesigned and reimplemented.


<li> <a href="codeDoc/ptolemy/kernel/attributes/VersionAttribute.html">VersionAttribute</a>
(Christopher Hylands, Edward A. Lee) -
Models can be annotated with the Web Start format version number of
Ptolemy II that is required to run the model.  In the future, we will
use this attribute to manage backward compatibility.

<li> <a href="codeDoc/ptolemy/data/UnsignedByteToken.html">ptolemy.data.UnsignedByteToken</a>
(Winthrop Williams, Steve Neuendorffer) - A new Token supporting
unsigned bytes.

 <!-- Tcl shell is not shipping in 2.0, it makes the download larger.-->

</ul>

<h3>New Demonstrations</h3>

<menu>
<li> <a href="../ptolemy/domains/ct/doc/body.htm" target="body">CT</a>:
	Continuous Time
 <menu>
 <li> <a href="../ptolemy/domains/ct/demo/BouncingBall/BouncingBall.htm">Bouncing Ball</a>  (Requires Java 3D, see the <a href="../ptolemy/domains/gr/doc/main.htm">GR domain</a>)
 A Continuous Time model that uses a Finite State Machine and the GR
 domain to simulate a bouncing ball.

 <li> <a href="../ptolemy/domains/ct/demo/CarTracking/CarTracking.htm">Car Tracking</a>
 A following car tracking a leading car in an unreliable 
 communication environment.

 <li> <a href="../ptolemy/domains/ct/demo/Switch/Switch.htm">Switching Continuous Signals</a>
 Shows how to handle hybrid systems with both continuous and discrete inputs
 and outputs.
 <li> <a href="../ptolemy/domains/ct/demo/Thermostat/Thermostat.htm">Modal Thermostat</a>
 A thermostat model where the refinements of the
 modes in the state machine are the same model.
 <li> <a href="../ptolemy/data/unit/demo/Units/Units.htm">Units</a>
 A demonstration of the Units facility.
 </menu>
<li> <a href="../ptolemy/domains/de/doc/body.htm" target="body">DE</a>:
	 Discrete Event
<menu>
<li> <a href="../ptolemy/domains/de/demo/ModalModel/ModalModel.htm">Modal Model</a>
This example combines DE, FSM, and SDF to model a
system where regularly sampled signals are perturbed by irregular
events in time.
</menu>


<li> <a href="../ptolemy/domains/fsm/doc/body.htm" target="body">FSM</a>:
	 Finite State Machines
 <menu>
 <li> <a href="../ptolemy/domains/fsm/demo/Blending/Blending.htm">Blending</a>
 A blending controller with two major control modes.
 <li> <a href="../ptolemy/domains/fsm/demo/MultipleRuns/MultipleRuns.htm">Multiple&nbsp;Runs</a> 
 A state machine performs multiple runs of the refinement of mode1. 
 </menu>

<li><a href="../ptolemy/domains/giotto/doc/body.htm" target="body">Giotto</a>:
	Synchronous Periodic Systems
 <menu>
 <li> <a href="../ptolemy/domains/giotto/demo/Composite/Composite.htm">Composite</a>
A composite demo with a Giotto model embedded in a DE model.

 </menu>

<li><a href="../ptolemy/domains/gr/doc/body.htm" target="body">GR</a>:
	3-D graphics (experimental)
 <menu>
 <li> <a href="../ptolemy/domains/gr/demo/FurutaPendulum/FurutaPendulum.htm">FurutaPendulum</a>
 The Furuta pendulum has a motor controlling the angle of an arm, from
 which a free-swinging pendulum hangs. The objective is to swing the
 pendulum up and then balance it.

 </menu>

<li> <a href="../ptolemy/domains/sdf/doc/body.htm" target="body">SDF</a>:
	Synchronous Dataflow
 <menu>
 <li><a href="../ptolemy/domains/sdf/demo/LMSAdaptive/LMSAdaptive.htm">LMSAdaptive</a>
 An adaptive filter.
 <li><a href="../ptolemy/domains/sdf/demo/MaximumEntropySpectrum/MaximumEntropySpectrum.htm">MaximumEntropySpectrum</a>
 A spectral estimation example.
 </menu>


<li> <a href="../ptolemy/domains/sr/doc/body.htm" target="body">SR</a>:
	Synchronous/Reactive (experimental)
 <menu>
 <li><a href="../ptolemy/domains/sr/demo/TokenRing/TokenRing.htm">TokenRing</a>
 A cyclic token-ring arbiter composed of three blocks.
 </menu>

<li> <a href="../ptolemy/domains/tm/doc/body.htm" target="body">TM</a>:
	Timed Multitasking (experimental).
 <menu>
 <li><a href="../ptolemy/domains/tm/demo/Controllers/Controllers.htm" target="main">Controllers</a>
   Two (independent) control loops whose controllers share the same CPU.
 <li><a href="../ptolemy/domains/tm/demo/FFT/FFT.htm" target="main">FFT</a>
   This model shows the use of background process for long running tasks in 
   the TM domain.
 <li><a href="../ptolemy/domains/tm/demo/MergedEvents/MergedEvents.htm" target="main">MergedEvents</a>
 <li><a href="../ptolemy/domains/tm/demo/SimpleTasks/SimpleTasks.htm" target="main">SimpleTasks</a>
  This model shows two independent tasks on a
  single CPU machine.
 </menu>


</menu>


<h3>New Actors</h3>

<ul>

<li> <a href="codeDoc/ptolemy/actor/lib/package-summary.html">ptolemy.actor.lib</a>:

<dl>

<dt> <a href="codeDoc/ptolemy/actor/lib/Accumulator.html"><code>Accumulator</code></a>
<dd> (Edward A. Lee)
An actor that outputs the sum of the inputs so far.

<dt> <a href="codeDoc/ptolemy/actor/lib/BooleanMultiplexor.html"><code>BooleanMultiplexor</code></a> 
<dd> (Steve Neuendorffer)
A polymorphic multiplexor with boolean select.

<dt> <a href="codeDoc/ptolemy/actor/lib/BooleanSelect.html"><code>BooleanSelect</code></a> 
<dd> (Steve Neuendorffer)
A polymorphic multiplexor with boolean select.

<dt> <a href="codeDoc/ptolemy/actor/lib/BooleanSwitch.html"><code>BooleanSwitch</code></a> 
<dd> (Steve Neuendorffer)
A polymorphic multiplexor with boolean select.

<dt> <a href="codeDoc/ptolemy/actor/lib/ClassWrapper.html"><code>ClassWrapper</code></a> 
An actor that wraps (an instance of) a Java class.
<dd> (Xiaojun Liu)

<dt> <a href="codeDoc/ptolemy/actor/lib/Counter.html"><code>Counter</code></a> 
An up-down counter.
<dd> (Steve Neuendorffer)

<dt> <a href="codeDoc/ptolemy/actor/lib/Differential.html"><code>Differential</code></a> 
<dd> (Edward A. Lee)
An actor that outputs the difference between successive inputs.

<dt> <a href="codeDoc/ptolemy/actor/lib/DoubleReader.html"><code>DoubleReader</code></a> 
<dd> (Jie Liu, Christopher Hylands)
An actor that outputs doubles read from a URL.

<dt> <a href="codeDoc/ptolemy/actor/lib/Limiter.html"><code>Limiter</code></a> 
<dd> (Edward A. Lee)
An actor that limits the input to a specified range.

<dt> <a href="codeDoc/ptolemy/actor/lib/LinearDifferenceEquationSystem.html"><code>LinearDifferenceEquationSystem</code></a> 
<dd> (Jie Liu, Elaine Cheong)
Linear Difference Equation System.

<dt> <a href="codeDoc/ptolemy/actor/lib/LookupTable.html"><code>LookupTable</code></a> 
<dd> (Paul Whitaker, Christopher Hylands)
A lookup table that outputs internally stored data given an index
Parameter.


<dt> <a href="codeDoc/ptolemy/actor/lib/NonStrictTest.html"><code>NonStrictTest</code></a> 
<dd> (Paul Whitaker, Christopher Hylands)
Check the input streams against a parameter value, ignoring absent values.

<dt> <a href="codeDoc/ptolemy/actor/lib/URLDirectoryReader.html"><code>URLDirectoryReader</code></a> 
<dd> (Christopher Hylands)
An actor that reads a URL naming a directory and outputs each
element of the directory one at a time.

<dt> <a href="codeDoc/ptolemy/actor/lib/VectorAssembler.html"><code>VectorAssembler</code></a> 
<dd> (Jie Liu, Elaine Cheong)
An actor that reads a token from each input channel to assemble a
DoubleMatrixToken.

<dt> <a href="codeDoc/ptolemy/actor/lib/VectorDisassembler.html"><code>VectorDisassembler</code></a> 
<dd> (Jie Liu, Elaine Cheong)
An actor that disassembles a DoubleMatrixToken to a multiport output.

<dt> <a href="codeDoc/ptolemy/actor/lib/WallClockTime.html"><code>WallClockTime</code></a> 
<dd> (Edward A. Lee)
Output the elapsed time in seconds.

</dl>

<li>  <a href="codeDoc/ptolemy/actor/lib/comm/package-summary.html">ptolemy.actor.lib.comm</a>:

<dl>
<dt> <a href="codeDoc/ptolemy/actor/lib/io/comm/SerialComm.html"><code>SerialComm</code></a> 
<dd> (Winthrop Williams)
Read and write from a serial port
</dl>

<li> 
 <a href="codeDoc/ptolemy/actor/lib/conversions/package-summary.html">ptolemy.actor.lib.conversions</a>:

<dl>
<dt> <a href="codeDoc/ptolemy/actor/lib/conversions/BooleanToAnything.html"><code>BooleanToAnything</code></a> 
<dd> (Edward A. Lee)
An actor that converts a boolean token into any other data type.

<dt> <a href="codeDoc/ptolemy/actor/lib/conversions/InUnitsOf.html"><code>InUnitsOf</code></a> 
<dd> (Yuhong Xiong, Xiaojun Liu, Edward Lee)
An actor that converts input tokens to specified units.

<dt> <a href="codeDoc/ptolemy/actor/lib/conversions/IntArrayToString.html"><code>IntArrayToString</code></a> 
<dd> (Winthrop Williams)
An actor that converts an array of integers into a string.

<dt> <a href="codeDoc/ptolemy/actor/lib/conversions/LongToDouble.html"><code>LongToDouble</code></a> 
<dd> (Christopher Hylands)
An actor that converts a LongToken into a DoubleToken.

<dt> <a href="codeDoc/ptolemy/actor/lib/conversions/StringToIntArray.html"><code>StringToIntArray</code></a> 
<dd> (Winthrop Williams)
An actor that converts a string to an array of integers.

</dl>


<li> <a href="codeDoc/ptolemy/actor/lib/gui/package-summary.html">ptolemy.actor.lib.gui</a>:

<dl>
<dt> <code>MatrixVisualizer</code>
<dd> (Neil Turner, Steve Neuendorffer)
An actor for 2-D visualization of matrices. (Removed after Ptolemy II 2.0)

<dt> <a href="codeDoc/ptolemy/actor/lib/gui/RealTimePlotter.html"><code>RealTimePlotter</code></a> 
<dd> (Edward A. Lee)
Plot input data as a function of elapsed real time.

<dt> <a href="codeDoc/ptolemy/actor/lib/gui/SliderSource.html"><code>SliderSource</code></a> 
<dd> (Xiaojun Liu)
An actor whose output is controlled by a slider in the run window.

</dl>


<li> <a href="codeDoc/ptolemy/actor/lib/logic/package-summary.html">ptolemy.actor.lib.logic</a>:

<dl>
<dt> <a href="codeDoc/ptolemy/actor/lib/logic/IsPresent.html"><code>IsPresent</code></a> 
<dd> (Edward A. Lee)
Output true if the input is present, false otherwise.
</dl>

<li> <a href="codeDoc/ptolemy/actor/lib/net/package-summary.html">ptolemy.actor.lib.net</a>:

<dl>
<dt> <a href="codeDoc/ptolemy/actor/lib/net/DatagramReader.html"><code>DatagramReader</code></a> 
<dd> (Winthrop Williams)
An actor that asynchronously reads datagram packets.
<dt> <a href="codeDoc/ptolemy/actor/lib/net/DatagramWriter.html"><code>DatagramWriter</code></a> 
<dd> (Winthrop Williams)
An actor that sends its input as a UDP datagram packet.
</dl>

<li> <a href="codeDoc/ptolemy/domains/ct/lib/package-summary.html">ptolemy.domains.ct.lib</a>:

<dl>
<dt> <a href="codeDoc/ptolemy/domains/ct/lib/EventSource.html"><code>EventSource</code></a> 
<dd> (Jie Liu)
Generate discrete events at prespecified time instants.
<dt> <a href="codeDoc/ptolemy/domains/ct/lib/FirstOrderHold.html"><code>FirstOrderHold</code></a> 
<dd> (Jie Liu)
An actor that takes a value and a derivative and does first order projection.

<dt> <a href="codeDoc/ptolemy/domains/ct/lib/LevelCrossingDetector.html"><code>LevelCrossingDetector</code></a> 
<dd> (Jie Liu)
A CT actor that detects level crossings of its trigger input signal.

</dl>

<li> <a href="codeDoc/ptolemy/domains/de/lib/package-summary.html">ptolemy.domains.de.lib</a>:

<dl>

<dt> <a href="codeDoc/ptolemy/domains/de/lib/EventButton.html"><code>EventButton</code></a> 
<dd> (Winthrop Williams, Paul Whitaker)
An actor that generates an empty token in response to a click of a button.

<dt> <a href="codeDoc/ptolemy/domains/de/lib/EventFilter.html"><code>EventFilter</code></a> 
<dd> (Steve Neuendorffer, Sonia Sachs)
An actor that filters false boolean tokens.

<dt> <a href="codeDoc/ptolemy/domains/de/lib/Inhibit.html"><code>Inhibit</code></a>
<dd> (Steve Neuendorffer)
An actor that produces a copy of the most recent input each time

<dt> <code>PreemptableTask</code>
<dd> (Elaine Cheong, Yang Zhao, Xiaojun Liu)
An actor that simulates a preemptable task.
(Removed between Ptolemy II 4.0 and 5.0)

<dt> <a href="codeDoc/ptolemy/domains/de/lib/Previous.html"><code>Previous</code></a> 
<dd> (Edward A. Lee)
An actor that outputs the previous event when it receives an event.


<dt> <a href="codeDoc/ptolemy/domains/de/lib/Queue.html"><code>Queue</code></a> 
<dd> (Steve Neuendorffer)
An actor that implements a queue of events.

<dt> <code>QueueWithNextOut</code>
<dd> (Winthrop Williams, Steve Neuendorffer)
An actor that implements a queue of events with a nextOut port
(Removed between Ptolemy II 4.0 and 5.0)

<dt> <code>SamplerWithDefault</code>
<dd> (Steve Neuendorffer, Jie Liu, Edward A. Lee)
An actor that produces a copy of the most recent input each time
(Removed between Ptolemy II 2.0 and 3.0)
</dl>

<li> <a href="codeDoc/ptolemy/domains/sdf/lib/package-summary.html">ptolemy.domains.sdf.lib</a>:


<dl>
<dt> <a href="codeDoc/ptolemy/domains/sdf/lib/DoubleToMatrix.html"><code>DoubleToMatrix</code></a> 
<dd> (Edward A. Lee)
An actor that converts a sequence of input tokens to a matrix.

<dt> <a href="codeDoc/ptolemy/domains/sdf/lib/MatrixToDouble.html"><code>MatrixToDouble</code></a> 
<dd> (Edward A. Lee)
An actor that converts a matrix to sequence of output tokens.

</dl>

</ul>


<h2>Major Features that were new in Ptolemy II 1.0.1 </h2>
<menu>
<li> Vergil - the Ptolemy II GUI
(Steve Neuendorffer and Edward A. Lee)
<li> Giotto Domain
	(Christoph M. Kirsch, Benjamin Horowitz, Thomas A. Henzinger)
<li> Java 3D Domain (GR Domain) (Chamberlain Fong)
<li> Discrete Time Domain (Chamberlain Fong)
<li> CORBA/Jini work (Jie Liu)
</menu>

<h2>Other Features that were new in Ptolemy II 1.0.1</h2>

<ul>
<li> The actor classes are more robust and have been reviewed.

<li> <a href="codeDoc/ptolemy/actor/gui/package-summary.html">User interface utilities for applets and applications</a>

<li> Live editing of models and parameters;
<li> Network integration;
<li> <a href="codeDoc/ptolemy/data/type/package-summary.html">A sophisticated type system including:</a>
     <ul>
     <li> <a href="../ptolemy/domains/sdf/demo/Type/Type.htm">Type constant propagation,</a>
     <li> <a href="codeDoc/ptolemy/data/type/RecordType.html">Record types (applet),</a>
     <li> <a href="codeDoc/ptolemy/data/type/ArrayType.html">Array types (applet),</a> and
     <li> <a href="codeDoc/ptolemy/data/FixToken.html">Fixed-point type</a>
     </ul>
<li> <a href="expressions.htm">An expression language for parameter expressions;</a>
<li> <a href="codeDoc/ptolemy/actor/lib/package-summary.html">Data and domain polymorphic component library;</a>
<li> <a href="codeDoc/ptolemy/actor/lib/Expression.html">A polymorphic expression actor;</a>
<li> <a href="codeDoc/ptolemy/moml/package-summary.html">A very simple XML file format called MoML;</a>
<li> <a href="../ptolemy/plot/doc/body.htm" target="body">A flexible signal plotter;</a>
<li> Several domains with concurrent models of computation (
<a href="../ptolemy/domains/csp/doc/body.htm" target="body">CSP</a>,
<a href="../ptolemy/domains/pn/doc/body.htm" target="body">PN</a>,
<a href="../ptolemy/domains/dde/doc/body.htm" target="body">DDE</a>
)
<li> Hierarchically interoperable domains
(<a href="../ptolemy/domains/ct/demo/SigmaDelta/SigmaDelta.htm" target="main">CT/FSM Accelerometer (applet)</a>);

<li> <a href="docbody.htm" target="body">On-line documentation (in HTML);</a>
<li> <a href="../ptolemy/actor/lib/javasound/demo/KarplusStrong/KarplusStrong.htm" target="main">Audio signal processing capabilities (applet);</a></br>
</ul>

<p><font size="2" color="#cc0000">Last Updated: $Date$</font>
 <!-- Leave a trailing p here so that there is a little space at the bottom -->
 <p>
</body>
</html>
