<!-- $Id$ -->
<html>
<head>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<link href="default.css" rel="stylesheet" type="text/css">
<title>Sandbox</title>
</head>
<body>
<h1>Sandbox</h1>

Java has the notion of a security sandbox, where code cannot perform
"unsafe" action.  For example, unsigned Java applets cannot read
arbitrary files on your local disk.  

<p>In Java 1.1 and earlier, the sandbox was an all or nothing feature,
in Java 1.2 and later it is possible to control the sandbox with
some degree of granularity.  For example, an application can
read a policy file that will allow it to load a native library, but
still not allow access to arbitrary files on the local disk.

<h2>vergil -sandbox</h2>
If the <code>$PTII/bin/vergil</code> script is invoked with 
<code>-sandbox</code>, then java will be invoked with
<a href="../bin/sandbox.policy"><code>$PTII/bin/sandbox.policy</code></a>.

<menu>
<li>allows access to port 80 so that we can download modules,
<li>allows reading of the <code>user.dir</code> property because
MoMLApplication.specToURL() calls File.getCanonicalPath(), which
reads <code>user.dir</code>
</menu>

<p> Note that the file browser does not work well in the sandbox.

<p>To run a model, specify the model on the command line:
<pre>
vergil -sandbox $PTII/ptolemy/moml/demo/modulation.xml
</pre>

<p>Note that you can use the <code>policytool</code> program that ships with 
Java to edit <code>$PTII/bin/sandbox.policy</code>, but if you do, then
any comments in the file will be removed.


<h2>vergil -policyfile filename</h2>
If the <code>$PTII/bin/vergil</code> script is invoked with 
<code>-policyfile <i>filename</i></code>, then java will be invoked with 
<code><i>filename</i></code> as the policy file.
For example:
<pre>
vergil -policyfile $PTII/bin/sandbox.policy $PTII/ptolemy/moml/demo/modulation.xml
</pre>
is the same as 
<pre>
vergil -sandbox $PTII/ptolemy/moml/demo/modulation.xml
</pre>
<p>Currently, the only two policy files that are defined are
<dl>
<dt><a href="../bin/sandbox.policy"><code>$PTII/bin/sandbox.policy</code></a>
<dd>Allows access to port 80 and to read the user.dir property.
<dt><a href="../bin/comm.policy"><code>$PTII/bin/comm.policy</code></a>
<dd>Allows access to the Java Communications API shared library.
This file is generated by <code>$PTII/configure</code> reading
in <code>$PTII/bin/comm.policy.in</code>, substituting in
installation specific values and creating <code>$PTII/bin/comm.policy</code>.
 <br>For a demo, try running
<pre>
 $PTII/bin/vergil -policyfile $PTII/bin/comm.policy ptolemy/actor/lib/io/comm/demo/SerialPort/SerialPort.xml 
</pre>

</dl>

<h2>Remote Resources</h2>
<menu>
<li> <a href="http://java.sun.com/docs/books/tutorial/applet/practical/security.html#in_browser" target="_top">Applet Security Tutorial</a>

<li> <a href="http://java.sun.com/sfaq/#in_browser" target="_top">Applet Security FAQ</a>

<li> <a href="http://utenti.tripod.it/yanorel6/2/ch03.htm#in_browser" target="_top">Java 1.2 Unleashed- Chapter 3 - The Extended Java Security Model</a>
<li> <a href="http://java.sun.com/docs/books/tutorial/security1.2/index.html#in_browser" target="_top">Javasoft Security 1.2 Tutorial</a>
<li> <a
href="http://java.sun.com/j2se/1.4.2/docs/api/java/security/Policy.html#in_browser" target="_top">java.security.Policy
documentation</a>
 <p><a
 href="http://java.sun.com/j2se/1.4.2/docs/guide/security/PolicyFiles.html#in_browser" target="_top">Policy File format</a>
</menu>

</body>
</html>
