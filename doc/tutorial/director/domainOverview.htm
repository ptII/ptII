<html>
<head>
<!-- $Id$ -->
<h1>Domain Overview</h1>
<p>
<ul>
<li><i>Synchronous Dataflow (SDF)</i>:
<a href="../../ptolemy/domains/sdf/demo/FourierSeries/FourierSeries.xml">FourierSeries</a>:
In SDF, the firing of actors is statically scheduled, and at the start of execution,
consistency and deadlock conditions are checked. SDF is suitable for applications
with simple, data-independent control flow. Actors produce and consume a fixed
number of tokens on each port on each firing. If these numbers result in either
deadlock or unbounded buffers, then you will get an error message, as illustrated
by the <a href="InconsistentModel.xml">inconsistent</a> example.

<br><br>

<li> <i>Dynamic Dataflow (DDF)</i>:
In DDF, the firing of actors is dynamically scheduled. Each actor
asserts its "firing rules," specifying the number of input tokens it requires
on each input port in order to be fired next time. This can be used to make
data-dependent control flow, mimicking
<a href="../../ptolemy/domains/ddf/demo/IfThenElse/IfThenElse.xml">if-then-else</a>,
<a href="../../ptolemy/domains/ddf/demo/Loop/Loop.xml">do-while</a>,
and even
<a href="../../ptolemy/domains/ddf/demo/HanoiTower/HanoiTower.xml">recursion</a>.
More interestingly, dynamic dataflow models balance data-driven and demand-driven
computation to get sophisticated data-dependent control flow, as illustrated
for example in 
<a href="../../ptolemy/domains/ddf/demo/OrderedMerge/OrderedMerge.xml">OrderedMerge</a>.
It can be combined with SDF to get the best of both worlds, as illustrated in
<a href="../../ptolemy/domains/ddf/demo/RandomWalk/RandomWalk.xml">RandomWalk</a>.
Unlike synchronous dataflow, the DDF model of computation is Turing
complete, and questions of deadlock and boundedness are undecidable.
Nonetheless, given a model that can execute without deadlock and with
bounded buffers, our scheduler will execute it without deadlock and with
bounded buffers.

<br><br>


<li> <i>Heterochronous Dataflow (HDF)</i>:
HDF is an extension of synchronous dataflow
(SDF) that permits dynamically changing production and consumption
patterns without sacrificing static scheduling. In SDF, the production
and consumption patterns of an actor are constant.
In HDF they are allowed to change between iterations of the HDF schedule.
Modal models can be used to change these patterns.
Although HDF can express many data-dependent computations that cannot
be represented by SDF, it is not Turing complete.  Consequently, deadlock
and boundedness remain decidable.
The <a href="../../ptolemy/domains/hdf/demo/Fibonacci/Fibonacci.xml">Fibonacci</a>
example uses this mechanism in a clever way to extract a Fibonacci sequence
from a counting sequence.

<br><br>

<li><i>Process Networks (PN)</i>:
In PN, each actor is wrapped in a thread, and all actors execute concurrently.
PN can be used whereever DDF would be used, but unlike DDF, it is harder to
control the duration of a run. The
<a href="../../ptolemy/domains/pn/demo/OrderedMerge/OrderedMerge.xml">
OrderedMerge</a> example illustrates a starvation strategy to get the model
to stop executing.
More interesting, PN can be used to achieve a
<a href="../../ptolemy/domains/pn/demo/NondeterministicMerge/NondeterministicMerge.xml">NondeterministicMerge</a>.
In PN, actors can send data at any time, and it is queued until the recipient reads it.
A sophisticated algorithm is used to ensure that queues remain bounded if this
possible given the model.

<br><br>

<li><i>Rendezvous</i>:
The Rendezvous director also wraps each actor in a thread, but unlike PN,
when a sending actor sends data, it blocks until the receiving actor
is ready to receive it. This model of computation is useful for
coordinating asynchronous actions, as in the
<a href="../../ptolemy/domains/rendezvous/demo/Barrier/Barrier.xml">Barrier</a>
example, or for modeling resource management, as in the
<a href="../../ptolemy/domains/rendezvous/demo/ResourcePool/ResourcePool.xml">ResourcePool</a>
example.

<br><br>

<li><i>Discrete-Event (DE)</i>:
In DE, communication between actors is via time-stamped events,
and events are processed in chronological order. DE is useful
for modeling timed systems, such as communication networks, computer
hardware, business processes, etc.
The
<a href="../../ptolemy/domains/de/demo/QueueAndServer/QueueAndServer.xml">QueueAndServer</a>
example gives a model of a simple queueing system.
DE has been extended to explicitly model wireless communication,
as illustrated in the
<a href="../../ptolemy/domains/wireless/demo/WirelessSoundDetection/WirelessSoundDetection.xml">
WirelessSoundDetection</a> example.

<br><br>

<li><i>Continuous-Time (CT)</i>:
In CT, communication between actors is via continuous-time signals.
CT is useful for modeling ordinary differential equations, as
illustrated in the
<a href="../../ptolemy/domains/ct/demo/Lorenz/Lorenz.xml">
Lorenz</a> example, and
<a href="../../ptolemy/domains/gr/demo/StickyMasses/StickyMasses.xml">hybrid systems</a>,
which combine CT with FSMs.

<br><br>

<!--/vergilDocs-->
<!--sr does not get included in demosPtiny.htm -->
<li><i>Synchronous/Reactive (SR)</i>:
In SR,
which is inspired by the synchronous languages Esterel, Lustre, and Signal,
actors react instantaneously and simultaneously
at ticks of a logical clock.
The <a href="../../ptolemy/domains/sr/demo/GuardedCount/GuardedCount.xml">
GuardedCount</a> example illustrates the ability to use subclocks,
in the manner of Lustre.

<br><br>

<li><i>Finite State Machines (FSM)</i>:
The FSM domain is used principally to define composite actors
as modal models.
A modal model is one whose behavior depends on its "mode"
of operation. A modal model in Ptolemy II heterogeneously combines the
<i>finite state machine</i> (FSM) domain
combined hierarchically with other models. A state in the FSM represents
a mode of operation, and can have a refinement that gives the behavior
in that mode.
The refinement can be another FSM or some other model using some other
Ptolemy domain. The <a href="../../ptolemy/domains/de/demo/ModalModel/ModalModel.xml">
ModalModel</a> example combines DE, FSM, and SDF to model a
system where regularly sampled signals are perturbed by irregular
events in time.

<br><br>

<li><i>Graphics (GR)</i>:
The GR domain provides 3-D animation capabilities based on the Java3D API.
The director optimizes the scheduling of actors so that graphics are re-generated
only when changes have been made. See the
<a href="../../ptolemy/domains/gr/demo/Helen/Helen.xml">Helen</a> example.
</ul>
</body>
</html>
