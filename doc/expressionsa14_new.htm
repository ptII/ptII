<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<meta name="GENERATOR" content="Quadralay WebWorks Publisher Standard Edition 6.0.6">
<meta name="TEMPLATEBASE" content="Portable HTML Standard Edition">
<meta name="LASTUPDATED" content="03/31/08 13:40:44">
<link href="default.css" rel="stylesheet" type="text/css">
<title>3.12 Casting and Object Types</title>
</head>

<body link="#3366CC" vlink="#9999CC" text="#000000" alink="#0000CC" bgcolor="#FFFFFF"


<table width="331" border="0" align="right" cellpadding="0" cellspacing="0">
  <tr>
    <td><a href="expressions.htm"><img src="img/navtoc.gif" width="84" height="23"
    border="0" alt="TOC"> </a></td>
    <td><a href="expressionsa9.htm"><img src="img/navprev.gif" width="81" height="23"
    border="0" alt="PREV"> </a></td>
    <td><a href="expressionsa11.htm"><img src="img/navnext.gif" width="81" height="23"
    border="0" alt="NEXT"> </a></td>

    
  </tr>
</table>




<blockquote>
<h2>
  <a name="199015"> </a>3.12   Casting and Object Types
</h2>


<h4>
  3.12.1   Casting
</h4>

<p>The cast function can be used to explicitly cast a value into a type.

<p>When the cast function is invoked with cast(type, value), where type is the target type and value is the value to be cast, a new value is returned (if a predefined casting is applicable) that is in the specified type.
For example, cast(long, 1) yields 1L, which is equal to 1 but is in the long data type, and cast(string, 1) yields "1", which is in the string data type.

<h4>
  3.12.2   Object Types
</h4>

<p>An object token encapsulates a Java object. Methods defined in the Java class of that object can be invoked in an expression. For example, in a model that contains an actor named <tt>C</tt>, <tt>C</tt> in an expression may refer to that actor in an object token.

<p>An object token has a type, which is an object type that is specific for the class of the encapsulated Java object or any class that is a superclass of that class. For example, with <tt>C</tt> being a Const actor, expression <tt>C</tt> is of an object type that is specific to the Java class ptolemy.actor.lib.Const.

<p>An object type specific to Java class <tt>A</tt> can be specified with <tt>object("A")</tt>, and its value is null. Comparison between object tokens is by reference with the Java objects that they encapsulate. Therefore, <tt>object("A") == object("B")</tt> is always true, because the values in both tokens are null.

<h4>
  3.12.3   Relationship between Object Types
</h4>

<p>An object type A is more specific than object type B if the Java class represented by A is a subclass of that represented by B.

<p>For example, <tt>object("ptolemy.actor.TypedIOPort")</tt> is more specific than <tt>object("ptolemy.actor.IOPort")</tt> and <tt>object("ptolemy.kernel.Port")</tt>.

<p>The most general object type is <tt>object</tt> (without any argument). Conceptually it encapsulates a null class (which, of course, does not exist in Java). The most specific object type is <tt>object("ptolemy.data.type.ObjectType$BottomClass")</tt> (which is not very useful in practice). The family of object types forms a lattice. 

<h4>
  3.12.4   Object Tokens
</h4>

<p>Object tokens are tokens of object types. A predefined object token is <tt>null</tt>, which has null as the value and the null class as the Java class. Its type is <tt>object</tt>. It is special in that it can be cast into any object type. For example, you can cast it into a port with <tt>cast(object("ptolemy.kernel.Port"), null)</tt>.
If you enter this in the expression evaluator, you shall see the stringification of the token as "object(null: ptolemy.kernel.Port)".

<p>(Notice that the string here is not a valid Ptolemy expression. In fact, most object tokens do not have string representations that are valid expressions, and therefore, they cannot be stored permanently in a Ptolemy model.)

<p>Except for <tt>null</tt>, for a Ptolemy expression that evaluates to an object token, the Java class represented by that token's type is always the most specific class. For example, if <tt>C</tt> is a Const actor, then <tt>C</tt> in an expression refers to an object token that has actor <tt>C</tt> as its value, and <tt>object("ptolemy.actor.lib.Const")</tt> as its type.
You can cast this type into a more general actor type by doing <tt>cast(object("ptolemy.actor.Actor"), C)</tt>. 

<h4>
  3.12.5   Casting between Object Types
</h4>

<p>An object token can be cast into a different object type, as long as the target object type represents a Java class that the encapsulated object is in. That class need not always be a superclass of the class that the object type represents.

<p>For example, again let <tt>C</tt> be a Const actor. As discussed, the following expression casts it into a more general actor type:<br>
&nbsp;&nbsp;&nbsp;&nbsp;<tt>cast(object("ptolemy.actor.Actor"), C)</tt><br>
The result of the cast is another object token with <tt>C</tt> as its value and <tt>object("ptolemy.actor.Actor")</tt> as its type. That token can be casted back into one of a more specific object type:<br>
&nbsp;&nbsp;&nbsp;&nbsp;<tt>cast(object("ptolemy.actor.TypedAtomicActor"), cast(object("ptolemy.actor.Actor"), C))</tt><br>
This is valid because the value <tt>C</tt> is in any of the mentioned classes.

<p>As mentioned, <tt>null</tt> is a special object token that can be cast into any object type. Any object token can also be cast into the most general object type, which is <tt>object</tt>. The only object that can be cast into the most specific object type, <tt>object("ptolemy.data.type.ObjectType$BottomClass")</tt>, is <tt>null</tt>.

<h4>
  3.12.6   Method Invocation
</h4>

<p>Native Java methods may be invoked on the objects encapsulated in object tokens.

<p>For example, if <tt>C</tt> is a Const actor, <tt>C.portList()</tt> returns a list of its ports. The returned list itself is a Java object in the class java.util.List, so it is encapsulated in an object token. You may further invoke <tt>C.portList().isEmpty()</tt> to test whether the list is empty. In that
case, the isEmpty method is invoked on the returned list. The isEmpty method returns a Java boolean value, and the boolean type corresponds to the Ptolemy boolean data type, so the value is converted into the latter type.

</body>
</html>
