<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<!-- Generated from latex, don't update this file, update -->
<!-- ptIIdoc/doc/design/src/tex/expression.tex -->

<meta name="LASTUPDATED" content="$Id$">
<link href="default.css" rel="stylesheet" type="text/css">
<title>13 Functions</title>
</head>

<body link="#3366CC" vlink="#9999CC" text="#000000" alink="#0000CC" bgcolor="#FFFFFF"


<table width="331" border="0" align="right" cellpadding="0" cellspacing="0">
  <tr>
    <td><a href="expressions.htm"><img src="img/navtoc.gif" width="84" height="23"
    border="0" alt="TOC"> </a></td>
    <td><a href="expressionsa12.htm"><img src="img/navprev.gif" width="81" height="23"
    border="0" alt="PREV"> </a></td>
  </tr>
</table>

<blockquote>


<div class="p"><!----></div>
 <h2><a name="tth_sEc13">
13</a>&nbsp;&nbsp;Functions</h2>
In this appendix, we tabulate the functions available in the expression language. Further explanation of many of these functions is given in section <a href="expressions8.htm">8</a> above.

<div class="p"><!----></div>
The argument and return types are the widest type that can be used. For example, acos() will take any argument that can be losslessly cast to a <em>double</em>, such as unsigned byte, short, integer, float. Long cannot be cast losslessly cast to <em>double</em>, so acos(1L) will fail.

<div class="p"><!----></div>
     <h3><a name="tth_sEc13.1">
13.1</a>&nbsp;&nbsp;Trigonometric Functions</h3>
<a name="pgfId-194547">
</a>

<div class="p"><!----></div>
<a name="tth_tAb4">
</a> <center>Table 4: Trigonometric functions.</center>
<a name="tbl:trigonometric">
</a>

<table border="1">
<tr><td width="59">function </td><td width="118">argument type(s) </td><td width="118">return type </td><td width="237">description </td></tr><tr><td></td></tr>
<tr><td width="59">acos </td><td width="118">double in the range [-1.0, 1.0] or <em>complex</em> </td><td width="118">double in
the range [0.0, pi] or NaN if out of range or <em>complex</em> </td><td width="237">arc
cosine

<div class="p"><!----></div>
 <em>complex</em> case: acos(z) = &#8722;i log(z + i &#8730;{i&#8722;z<sup>2</sup>}) </td></tr>
<tr><td width="59">asin </td><td width="118">double in the range [-1.0, 1.0] or <em>complex</em> </td><td width="118">double in
the range [-pi/2, pi/2] or NaN if out of range or <em>complex</em> </td><td width="237">arc
sine 

<div class="p"><!----></div>
 <em>complex</em> case: asin(z) = &#8722;i log(iz + &#8730;{i&#8722;z<sup>2</sup>}) </td></tr>
<tr><td width="59">atan </td><td width="118">double or <em>complex</em> </td><td width="118">double in the range [-pi/2, pi/2] or
<em>complex</em> </td><td width="237">arc tangent 

<div class="p"><!----></div>
 <em>complex</em> case: atan(z) = &#8722; [i/2]log[(i&#8722;z)/(i+z)] </td></tr>
<tr><td width="59">atan2 </td><td width="118"><em>double</em>, <em>double</em> </td><td width="118">double in the range [-pi, pi] </td><td width="237">angle of a vector (note: the arguments are (y, x), not (x, y) as one might expect). </td></tr>
<tr><td width="59">acosh </td><td width="118">double greater than 1 or <em>complex</em> </td><td width="118">double or
<em>complex</em> </td><td width="237">hyperbolic arc cosine, defined for both <em>double</em>
and <em>complex</em> case by: acosh(z) = logz+&#8730;{z<sup>2</sup> &#8722;1}</td></tr>
<tr><td width="59">asinh </td><td width="118">double or <em>complex</em> </td><td width="118">double or <em>complex</em> </td><td width="237">hyperbolic arc sine <em>complex</em> case: 
asinh(z) = logz+&#8730;{z<sup>2</sup> +1}</td></tr>
<tr><td width="59">cos </td><td width="118">double or <em>complex</em> </td><td width="118">double in the range , or <em>complex</em> </td><td width="237">cosine 

<div class="p"><!----></div>
 <em>complex</em> case: 
cos(z) = [(exp(iz) + exp(&#8722;iz))/2] </td></tr>
<tr><td width="59">cosh </td><td width="118">double or <em>complex</em> </td><td width="118">double or <em>complex</em> </td><td width="237">hyperbolic cosine, defined for <em>double</em> or <em>complex</em> by:
cosh(z) = [(exp(z) + exp(&#8722;z))/2] </td></tr>
<tr><td width="59">sin </td><td width="118">double or <em>complex</em> </td><td width="118">double or <em>complex</em> </td><td width="237">sine
function <em>complex</em> case: 
sin(z) = [(exp(iz) &#8722; exp(&#8722;iz))/2i] </td></tr>
<tr><td width="59">sinh </td><td width="118">double or <em>complex</em> </td><td width="118">double or <em>complex</em> </td><td width="237">hyperbolic sine, defined for <em>double</em> or <em>complex</em> by: 
sinh(z) = [(exp(z) &#8722; exp(&#8722;z))/2]</td></tr>
<tr><td width="59">tan </td><td width="118">double or <em>complex</em> </td><td width="118">double or <em>complex</em> </td><td width="237">tangent function, defined for <em>double</em> or <em>complex</em> by: 
tan(z) = [sin(z)/cos(z)] </td></tr>
<tr><td width="59">tanh </td><td width="118">double or <em>complex</em> </td><td width="118">double or <em>complex</em> </td><td width="237">hyperbolic tangent, defined for <em>double</em> or <em>complex</em> by:
tanh(z) = [sinh(z)/cosh(z)] </td></tr></table>


<div class="p"><!----></div>
     <h3><a name="tth_sEc13.2">
13.2</a>&nbsp;&nbsp;Basic Mathematical Functions</h3>
<a name="pgfId-195076">
</a>

<div class="p"><!----></div>
<a name="tth_tAb5">
</a> <center>Table 5: Basic mathematical functions, part 1.</center>

<table border="1">
<tr><td width="59">function </td><td width="118">argument type(s) </td><td width="118">return type </td><td width="197">description </td></tr><tr><td></td></tr>
<tr><td width="59">abs </td><td width="118">double or <em>complex</em> </td><td width="118">double or <em>int</em> or long (complex
returns double) </td><td width="197">absolute value

<div class="p"><!----></div>
 <em>complex</em> case: abs(a+ib) = &#124;z&#124; = &#8730;{a<sup>2</sup> + b<sup>2</sup>}</td></tr>
<tr><td width="59">angle </td><td width="118"><em>complex</em> </td><td width="118">double in the range [-pi, pi] </td><td width="197">angle or
argument of the <em>complex</em> number: &#8736;z </td></tr>
<tr><td width="59">ceil </td><td width="118">double or float </td><td width="118">double </td><td width="197">ceiling function, which returns the
smallest (closest to negative infinity) <em>double</em> value that is
not less than the argument and is an integer. </td></tr>
<tr><td width="59">compare </td><td width="118"><em>double</em>, <em>double</em> </td><td width="118">int </td><td width="197">compare two numbers,
returning -1, 0, or 1 if the first argument is less than, equal to, or
greater than the second. </td></tr>
<tr><td width="59">conjugate </td><td width="118"><em>complex</em> </td><td width="118"><em>complex</em> </td><td width="197"><em>complex</em> conjugate </td></tr>
<tr><td width="59">exp </td><td width="118">double or <em>complex</em> </td><td width="118">double in the range [0.0, infinity] or
complex </td><td width="197">exponential function (e&#226;rgument)
complex case: e<sup>a+ib</sup> = e<sup>a</sup>(cosb + isinb)</td></tr>
<tr><td width="59">floor </td><td width="118">double </td><td width="118">double </td><td width="197">floor function, which is the largest
(closest to positive infinity) value not greater than the argument
that is an integer. </td></tr>
<tr><td width="59">gaussian </td><td width="118"><em>double</em>, <em>double</em> or
<em>double</em>, <em>double</em>, <em>int</em>, or
<em>double</em>, <em>double</em>, <em>int</em>, int </td><td width="118">double or double or
[double] </td><td width="197">one or more Gaussian random variables with the specified
mean and standard deviation (see <a href="expressionsa8.htm#random">8.0.2</a>). </td></tr>
<tr><td width="59">imag </td><td width="118"><em>complex</em> </td><td width="118">double </td><td width="197">imaginary part </td></tr>
<tr><td width="59">isInfinite </td><td width="118">double </td><td width="118">boolean </td><td width="197">return true if the argument is
infinite </td></tr>
<tr><td width="59">isNaN </td><td width="118">double </td><td width="118">boolean </td><td width="197">return true if the argument is "not a
number" </td></tr>
<tr><td width="59">log </td><td width="118">double or <em>complex</em> </td><td width="118">double or <em>complex</em> </td><td width="197">natural
logarithm <em>complex</em> case: log(z) = log(abs(z) +i &#8736;z)</td></tr>
<tr><td width="59">log10 </td><td width="118">double </td><td width="118">double </td><td width="197">log base 10 </td></tr>
<tr><td width="59">log2 </td><td width="118">double </td><td width="118">double </td><td width="197">log base 2 </td></tr></table>


<div class="p"><!----></div>

<div class="p"><!----></div>
<a name="tth_tAb6">
</a> <center>Table 6: Basic mathematical functions, part 2.</center>

<table border="1">
<tr><td width="71">function </td><td width="118">argument type(s) </td><td width="118">return type </td><td width="197">description </td></tr><tr><td></td></tr>
<tr><td width="71">max </td><td width="118"><em>double</em>, <em>double</em> or
double </td><td width="118">a scalar of the same type as the arguments </td><td width="197">maximum </td></tr>
<tr><td width="71">min </td><td width="118"><em>double</em>, <em>double</em> or
double </td><td width="118">a scalar of the same type as the arguments </td><td width="197">minimum </td></tr>
<tr><td width="71">pow </td><td width="118"><em>double</em>, <em>double</em> or
<em>complex</em>,  <em>complex</em> </td><td width="118">double or
complex </td><td width="197">first argument to the power of the second </td></tr>
<tr><td width="71">random </td><td width="118">no arguments or
int or
<em>int</em>, int </td><td width="118">double or
double or
[double] </td><td width="197">one or more random numbers between 0.0 and 1.0 (see
<a href="expressionsa8.htm#random">8.0.2</a>) </td></tr>
<tr><td width="71">real </td><td width="118"><em>complex</em> </td><td width="118">double </td><td width="197">real part </td></tr>
<tr><td width="71">remainder </td><td width="118"><em>double</em>, double </td><td width="118">double </td><td width="197">remainder after division,
according to the IEEE 754 floating-point standard (see
<a href="expressionsa8.htm#remainder">8.0.4</a>. </td></tr>
<tr><td width="71">round </td><td width="118">double </td><td width="118">long </td><td width="197">round to the nearest long, choosing the next
greater integer when exactly in between, and throwing an exception if
out of range. If the argument is NaN, the result is 0L. If the
argument is out of range, the result is either MaxLong or MinLong,
depending on the sign. </td></tr>
<tr><td width="71">roundToInt </td><td width="118">double </td><td width="118">int </td><td width="197">round to the nearest <em>int</em>, choosing
the next greater integer when exactly in between, and throwing an
exception if out of range. If the argument is NaN, the result is 0. If
the argument is out of range, the result is either MaxInt or MinInt,
depending on the sign. </td></tr>
<tr><td width="71">sgn </td><td width="118">double </td><td width="118">int </td><td width="197">-1 if the argument is negative, 1 otherwise </td></tr>
<tr><td width="71">sqrt </td><td width="118">double or
complex </td><td width="118">double or
complex </td><td width="197">square root. If the argument is <em>double</em> with value less than zero, then the result is NaN.
complex case:
sqrt(z) = &#8730;{&#124;z&#124;}(cos[(&#8736;z)/2] + isin[(&#8736;z)/2]) </td></tr></table>


<div class="p"><!----></div>

<div class="p"><!----></div>
<a name="tth_tAb7">
</a> <center>Table 7: Basic mathematical functions, part 3.</center>

<table border="1">
<tr><td width="59">function </td><td width="118">argument type(s) </td><td width="118">return type </td><td width="197">description </td></tr><tr><td></td></tr>
<tr><td width="59">toDegrees </td><td width="118">double </td><td width="118">double </td><td width="197">convert radians to degrees </td></tr>
<tr><td width="59">toRadians </td><td width="118">double </td><td width="118">double </td><td width="197">convert degrees to radians </td></tr>
<tr><td width="59">within </td><td width="118">type, type, double </td><td width="118">boolean </td><td width="197">return true if the first
argument is in the neighborhood of the second, meaning that the
distance is less than or equal to the third argument. The first two
arguments can be any type for which such a distance is defined. For
composite types, arrays, records, and matrices, then return true if
the first two arguments have the same structure, and each
corresponding element is in the neighborhood. </td></tr></table>


<div class="p"><!----></div>
     <h3><a name="tth_sEc13.3">
13.3</a>&nbsp;&nbsp;Matrix, Array, and Record Function.</h3>

<div class="p"><!----></div>
<a name="tth_tAb8">
</a> <center>Table 8: Functions that take or return matrices, arrays, or records,
part 1.</center>
<a name="tbl:matrix">
</a>

<table border="1">
<tr><td width="118">function </td><td width="98">argument type(s) </td><td width="79">return type </td><td width="237">description </td></tr><tr><td></td></tr>
<tr><td width="118">arrayToMatrix </td><td width="98">type, <em>int</em>, int </td><td width="79">[type] </td><td width="237">Create a matrix
from the specified array with the specified number of rows and columns </td></tr>
<tr><td width="118">concatenate </td><td width="98">type, type </td><td width="79">type </td><td width="237">Concatenate two arrays. </td></tr>
<tr><td width="118">concatenate </td><td width="98">type </td><td width="79">type </td><td width="237">Concatenate arrays in an array of
arrays. </td></tr>
<tr><td width="118">conjugateTranspose </td><td width="98">[complex] </td><td width="79">[complex] </td><td width="237">Return the conjugate
transpose of the specified matrix. </td></tr>
<tr><td width="118">createSequence </td><td width="98">type, type, int </td><td width="79">type </td><td width="237">Create an array with
values starting with the first argument, incremented by the second
argument, of length given by the third argument. </td></tr>
<tr><td width="118">crop </td><td width="98">[int], <em>int</em>, <em>int</em>, <em>int</em>, <em>int</em> or
[double], <em>int</em>, <em>int</em>, <em>int</em>, <em>int</em> or
[complex], <em>int</em>, <em>int</em>, <em>int</em>, <em>int</em> or
[long], <em>int</em>, <em>int</em>, <em>int</em>, <em>int</em> or </td><td width="79">[int] or
[double] or
[complex] or
[long] or </td><td width="237">Given a matrix of any type, return a submatrix starting at the specified row and column with the specified number of rows and columns.</td></tr>
<tr><td width="118">determinant </td><td width="98">[double] or 
[complex] </td><td width="79">double or
complex </td><td width="237">Return the determinant of the specified matrix. </td></tr>
<tr><td width="118">diag </td><td width="98">type </td><td width="79">[type] </td><td width="237">Return a diagonal matrix with the values
along the diagonal given by the specified array. </td></tr>
<tr><td width="118">divideElements </td><td width="98">[type], [type] </td><td width="79">[type] </td><td width="237">Return the
element-by-element division of two matrices </td></tr>
<tr><td width="118">emptyArray </td><td width="98">type </td><td width="79">type </td><td width="237">Return an empty array whose element type
matches the specified token. </td></tr>
<tr><td width="118">emptyRecord </td><td width="98"></td><td width="79"><em>record</em> </td><td width="237">Return an empty record. </td></tr>
<tr><td width="118">find </td><td width="98">type, type </td><td width="79">int </td><td width="237">Return an array of the indices where
elements of the specified array match the specified token. </td></tr></table>


<div class="p"><!----></div>

<div class="p"><!----></div>
<a name="tth_tAb9">
</a> <center>Table 9: Functions that take or return matrices, arrays, or records,
part 2.</center>
<a name="tbl:matrix">
</a>

<table border="1">
<tr><td width="146">function </td><td width="110">argument type(s) </td><td width="79">return type </td><td width="197">description </td></tr><tr><td></td></tr>
<tr><td width="146">find </td><td width="110">boolean </td><td width="79">int </td><td width="197">Return an array of the indices where
elements of the specified array have value true. </td></tr>
<tr><td width="146">hilbert </td><td width="110">int </td><td width="79">[double] </td><td width="197">Return a square Hilbert matrix, where 
A<sub>ij</sub> = [1/(i + j + 1)].
A Hilbert matrix is nearly, but not quite singular. </td></tr>
<tr><td width="146">identityMatrixComplex </td><td width="110">int </td><td width="79">[complex] </td><td width="197">Return an identity matrix
with the specified dimension. </td></tr>
<tr><td width="146">identityMatrixDouble </td><td width="110">int </td><td width="79">[double] </td><td width="197">Return an identity matrix with
the specified dimension. </td></tr>
<tr><td width="146">identityMatrixInt </td><td width="110">int </td><td width="79">[int] </td><td width="197">Return an identity matrix with the
specified dimension. </td></tr>
<tr><td width="146">identityMatrixLong </td><td width="110">int </td><td width="79">[long] </td><td width="197">Return an identity matrix with the
specified dimension. </td></tr>
<tr><td width="146">intersect </td><td width="110">record, record </td><td width="79">record </td><td width="197">Return a record that contains
only fields that are present in both arguments, where the value of the
field is taken from the first record. </td></tr>
<tr><td width="146">inverse </td><td width="110">[double] or 
[complex] </td><td width="79">[double] or
[complex] </td><td width="197">Return the inverse of the specified matrix, or throw an
exception if it is singular. </td></tr>
<tr><td width="146">matrixToArray </td><td width="110">[type] </td><td width="79">type </td><td width="197">Create an array containing the
values in the matrix </td></tr>
<tr><td width="146">merge </td><td width="110">record, record </td><td width="79">record </td><td width="197">Merge two records, giving priority
to the first one when they have matching record labels. </td></tr>
<tr><td width="146">multiplyElements </td><td width="110">[type], [type] </td><td width="79">[type] </td><td width="197">Multiply element wise the
two specified matrices. </td></tr>
<tr><td width="146">orthogonalizeColumns </td><td width="110">[double] or [complex] </td><td width="79">[double] or [complex] </td><td width="197">Return a similar matrix with orthogonal columns.</td></tr>
<tr><td width="146">orthogonalizeRows </td><td width="110">[double] or [complex] </td><td width="79">[double] or [complex] </td><td width="197">Return a similar matrix with orthogonal rows. </td></tr>
<tr><td width="146">orthonormalizeColumns </td><td width="110">[double] or [complex] </td><td width="79">[double] or [complex] </td><td width="197">Return a similar matrix with orthonormal columns. </td></tr>
<tr><td width="146">orthonormalizeRows </td><td width="110">[double] or [complex] </td><td width="79">[double] or
[complex] </td><td width="197">Return a similar matrix with orthonormal rows. </td></tr>
<tr><td width="146">repeat </td><td width="110"><em>int</em>, type </td><td width="79">type </td><td width="197">Create an array by repeating the
specified token the specified number of times.</td></tr></table>


<div class="p"><!----></div>

<div class="p"><!----></div>
<a name="tth_tAb10">
</a> <center>Table 10: Functions that take or return matrices, arrays, or records,
part 3.</center>
<a name="tbl:matrix">
</a>

<table border="1">
<tr><td width="118">function </td><td width="79">argument type(s) </td><td width="79">return type </td><td width="237">description </td></tr><tr><td></td></tr>
<tr><td width="118">sort </td><td width="79">stringor realScalar </td><td width="79">string or realScalar </td><td width="237">Return the
specified array, but sorted in ascending order. realScalar is any
scalar token except <em>complex</em>. </td></tr>
<tr><td width="118">sortAscending </td><td width="79">stringor realScalar </td><td width="79">string or realScalar </td><td width="237">Return the specified array, but sorted in ascending order. realScalar
is any scalar token except <em>complex</em>. </td></tr>
<tr><td width="118">sortDescending </td><td width="79">stringor
realScalar </td><td width="79">string or
realScalar </td><td width="237">Return the specified array, but sorted in descending
order. realScalar is any scalar token except <em>complex</em>. </td></tr>
<tr><td width="118">subarray </td><td width="79">type, <em>int</em>, int </td><td width="79">type </td><td width="237">Extract a subarray
starting at the specified index with the specified length. </td></tr>
<tr><td width="118">sum </td><td width="79">type or [type] </td><td width="79">type </td><td width="237">Sum the elements of the specified
array or matrix. This throws an exception if the elements do not
support addition or if the array is empty (an empty matrix will return
zero). </td></tr>
<tr><td width="118">trace </td><td width="79">[type] </td><td width="79">type </td><td width="237">Return the trace of the specified matrix. </td></tr>
<tr><td width="118">transpose </td><td width="79">[type] </td><td width="79">[type] </td><td width="237">Return the transpose of the specified
matrix. </td></tr>
<tr><td width="118">zeroMatrixComplex </td><td width="79"><em>int</em>, int </td><td width="79">[complex] </td><td width="237">Return a zero matrix
with the specified number of rows and columns. </td></tr>
<tr><td width="118">zeroMatrixDouble </td><td width="79"><em>int</em>, int </td><td width="79">[double] </td><td width="237">Return a zero matrix
with the specified number of rows and columns. </td></tr>
<tr><td width="118">zeroMatrixInt </td><td width="79"><em>int</em>, int </td><td width="79">[int] </td><td width="237">Return a zero matrix with
the specified number of rows and columns. </td></tr>
<tr><td width="118">zeroMatrixLong </td><td width="79"><em>int</em>, int </td><td width="79">[long] </td><td width="237">Return a zero matrix with
the specified number of rows and columns. </td></tr></table>


<div class="p"><!----></div>
     <h3><a name="tth_sEc13.4">
13.4</a>&nbsp;&nbsp;Functions for Evaluating Expressions</h3>
<a name="pgfId-195928">
</a>

<div class="p"><!----></div>
<a name="tth_tAb11">
</a> <center>Table 11: Utility functions for evaluating expressions</center>
<a name="tbl:eval">
</a>

<table border="1">
<tr><td width="118">function </td><td width="98">argument type(s) </td><td width="79">return type </td><td width="237">description </td></tr><tr><td></td></tr>
<tr><td width="118">eval </td><td width="98">string </td><td width="79">any type </td><td width="237">evaluate the specified expression (see
<a href="expressionsa8.htm#eval">8.0.1</a>). </td></tr>
<tr><td width="118">parseInt </td><td width="98">string or string, int </td><td width="79">int </td><td width="237">return an <em>int</em> read
from a string, using the given radix if a second argument is
provided. </td></tr>
<tr><td width="118">parseLong </td><td width="98">string or string, int </td><td width="79">int </td><td width="237">return a long read from a
string, using the given radix if a second argument is provided. </td></tr>
<tr><td width="118">toBinaryString </td><td width="98">int or long </td><td width="79">string </td><td width="237">return a binary representation
of the argument </td></tr>
<tr><td width="118">toOctalString </td><td width="98">int or long </td><td width="79">string </td><td width="237">return an octal representation
of the argument </td></tr>
<tr><td width="118">toString </td><td width="98">double or int or <em>int</em>, <em>int</em> or long or long,
int </td><td width="79">string </td><td width="237">return a string representation of the argument, using
the given radix if a second argument is provided. </td></tr>
<tr><td width="118">traceEvaluation </td><td width="98">string </td><td width="79">string </td><td width="237">evaluate the specified expression
and report details on how it was evaluated (see <a href="expressionsa8.htm#traceEvaluation">8.0.1</a>). </td></tr></table>


<div class="p"><!----></div>
     <h3><a name="tth_sEc13.5">
13.5</a>&nbsp;&nbsp;Signal Processing Functions</h3>
<a name="pgfId-195809">
</a>

<div class="p"><!----></div>
<a name="tth_tAb12">
</a> <center>Table 12: Functions performing signal processing operations, part 1.</center>

<table border="1">
<tr><td width="79">function </td><td width="118">argument type(s) </td><td width="79">return type </td><td width="197">description </td></tr><tr><td></td></tr>
<tr><td width="79">close </td><td width="118"><em>double</em>, double </td><td width="79">boolean
? </td><td width="197">Return true if the first argument is close to the second (within
EPSILON, where EPSILON is a static public variable of this class). </td></tr>
<tr><td width="79">convolve </td><td width="118">double, double or
complex, complex </td><td width="79">double or 
complex </td><td width="197">Convolve two arrays and return an array whose length is
sum of the lengths of the two arguments minus one. Convolution of two
arrays is the same as  polynomial
multiplication. </td></tr>
<tr><td width="79">DCT </td><td width="118">double or
double, <em>int</em> or
double, <em>int</em>, int </td><td width="79">double </td><td width="197">Return the discrete cosine
transform of the specified array, using the specified (optional)
length and normalization strategy (see <a href="expressionsa8.htm#dct">8.0.5</a>). </td></tr>
<tr><td width="79">downsample </td><td width="118">double, <em>int</em> or
double, <em>int</em>, int </td><td width="79">double </td><td width="197">Return a new array with every 
n-th element of the argument array, where n is the second
argument. If a third argument is given, then it must be between 0 and
n &#8722; 1, and it specifies an offset into the array (by giving the
index of the first output). </td></tr>
<tr><td width="79">FFT </td><td width="118">double or
complex or
double, int
complex, int </td><td width="79">complex </td><td width="197">Return the fast 
Fourier transform of the specified array. If the second argument is
given with value n, then the length of the transform is
2<sup>n</sup>. Otherwise, the length is the next power of two greater than or
equal to the length of the input array. If the input length does not match
this length, then input is padded with zeros. </td></tr></table>


<div class="p"><!----></div>

<div class="p"><!----></div>
<a name="tth_tAb13">
</a> <center>Table 13: Functions performing signal processing operations, part 2.</center>

<table border="1">

<tr>
  <td width="197">function </td><td width="79">argument type(s)</td>
  <td width="79">return type </td><td width="197">description</td>
</tr>
<tr><td></td></tr>

<tr>
  <td width="197">generateBartlettWindow </td>
  <td width="79">int </td>
  <td width="79">double </td>
  <td width="197">Bartlett (
rectangular) window with the specified length. The end points have
value 0.0, and if the length is odd, the center point has value
1.0. For length M + 1, the formula is:
w(n) =  2[n/M]; 

<br>if 0  &#8804; n  &#8804; [M/2]

<br>2 &#8722; 2[n/M];

<br>if [M/2]  &#8804; n  &#8804; M
  </td>
</tr>
<tr>
  <td width="197">generateBlackmanWindow </td>
  <td width="79">int </td>
  <td width="79">double </td><td width="197">Return a 
Blackman window with the specified length. For length M + 1, the formula is:
w(n) = 0.42 + 0.5 cos[(2 &#960;n)/M] + 0.08 cos[(4 &#960;n)/M] </td></tr>

<tr>
  <td width="197">generateBlackmanHarrisWindow </td>
  <td width="79">int </td>
  <td width="79">double </td>
  <td width="197">Return a Blackman-Harris window with the specified length. For length M + 1, the formula is: 
w(n) = 0.35875 + 0.48829 cosfrac2 &#960;nM + 0.14128 cos[(4
  &#960;n)/M] + 0.01168 cos[(6 &#960;n)/M] </td>
</tr>

<tr><td width="197">generateGaussianCurve </td><td width="79"><em>double</em>, <em>double</em>, int </td><td width="79">double </td><td width="197">Return a Gaussian curve with the specified standard deviation, extent,
and length. The extent is a multiple of the standard deviation. For
instance, to get 100 samples of a Gaussian curve with standard
deviation 1.0 out to four standard deviations, use
generateGaussianCurve(1.0, 4.0, 100). </td></tr></table>


<div class="p"><!----></div>

<div class="p"><!----></div>
<a name="tth_tAb14">
</a> <center>Table 14: Functions performing signal processing operations, part 3.</center>

<table border="1">
<tr><td width="197">function </td><td width="79">argument type(s) </td><td width="59">return type </td><td width="197">description </td></tr><tr><td></td></tr>
<tr><td width="197">generateHammingWindow </td><td width="79">int </td><td width="59">double </td><td width="197">Return a 
Hamming window with the specified length. For length M + 1, the formula is:
w(n) = 0.54 &#8722; 0.46 cos[(2 &#960;n )/M] </td></tr>
<tr><td width="197">generateHanningWindow </td><td width="79">int </td><td width="59">double </td><td width="197">Return a 
Hanning window with the specified length. For length M + 1, the
formula is: w(n) = 0.5 &#8722; 0.5 cos[(2 &#960;n)/(/)]M </td></tr>
<tr><td width="197">generatePolynomialCurve </td><td width="79">double, <em>double</em>, <em>double</em>, int
</td><td width="59">double </td><td width="197">Return samples of a curve specified by a polynomial. The
first argument is an array with the polynomial coefficients, beginning
with the constant term, the linear term, the squared term, etc. The
second argument is the value of the polynomial variable at which to
begin, and the third argument is the increment on this variable for
each successive sample. The final argument is the length of the
returned array. </td></tr></table>


<div class="p"><!----></div>

<div class="p"><!----></div>
<a name="tth_tAb15">
</a> <center>Table 15: Functions performing signal processing operations, part 4.</center>

<table border="1">
<tr><td width="197">function </td><td width="79">argument type(s) </td><td width="79">return type </td><td width="197">description </td></tr><tr><td></td></tr>
<tr><td width="197">generateRaisedCosinePulse </td><td width="79"><em>double</em>, <em>double</em>, int </td><td width="79">double </td><td width="197">Return an array containing a symmetric raised-cosine
pulse. This pulse is widely used in communication systems, and is
called a "raised cosine pulse" because the magnitude its Fourier
transform has a shape that ranges from rectangular (if the excess
bandwidth is zero) to a cosine curved that has been raised to be
non-negative (for excess bandwidth of 1.0). The elements of the
returned array are samples of the function:  
h(t) = [(sin[(&#960;t)/T][(&#960;t)/T])/(&times;)] [(cosfracx &#960;tT)/(1&#8722;([2xt/T])<sup>2</sup>)],
where x is the excess bandwidth (the first argument) and T is the
number of samples from the center of the pulse to the first zero
crossing (the second argument). The samples are taken with a sampling
interval of 1.0, and the returned array is symmetric and has a length
equal to the third argument. With an excessBandwidth of 0.0, this
pulse is a sinc pulse. </td></tr>
<tr><td width="197">generateRectangularWindow </td><td width="79">int </td><td width="79">double </td><td width="197">Return an array filled with 1.0 of the specified length. This is a

rectangular window.</td></tr></table>


<div class="p"><!----></div>

<div class="p"><!----></div>
<a name="tth_tAb16">
</a> <center>Table 16: Functions performing signal processing operations, part 5.</center>

<table border="1">
<tr><td width="165">function </td><td width="79">argument type(s) </td><td width="79">return type </td><td width="197">description </td></tr><tr><td></td></tr>
<tr><td width="165">IDCT </td><td width="79">double or
double, <em>int</em> or
double, <em>int</em>, int </td><td width="79">double </td><td width="197">Return the inverse discrete
cosine transform of the specified array, using the specified
(optional) length and normalization strategy (see <a href="expressionsa8.htm#dct">8.0.5</a>). </td></tr>
<tr><td width="165">IFFT </td><td width="79">double or
complex or
double, int
complex, int </td><td width="79">complex </td><td width="197">inverse fast 
Fourier transform of the specified array. If the second argument is
given with value n, then the length of the transform is
2<sup>n</sup>. Otherwise, the length is the next power of two greater than or
equal to the length of the input array. If the input length does not match
this length, then input is padded with zeros. </td></tr>
<tr><td width="165">nextPowerOfTwo </td><td width="79">double </td><td width="79">int </td><td width="197">Return the next power of two larger
than or equal to the argument. </td></tr>
<tr><td width="165">poleZeroToFrequency </td><td width="79">complex, complex, <em>complex</em>,
<em>int</em> </td><td width="79">complex </td><td width="197">Given an array of pole locations, an array of
zero locations, a gain term, and a size, return an array of the
specified size representing the frequency response specified by these
poles, zeros, and gain. This is calculated by walking around the unit
circle and forming the product of the distances to the zeros, dividing
by the product of the distances to the poles, and multiplying by the
gain. </td></tr></table>


<div class="p"><!----></div>

<div class="p"><!----></div>
<a name="tth_tAb17">
</a> <center>Table 17: Functions performing signal processing operations, part 4.</center>

<table border="1">
<tr><td width="197">function </td><td width="79">argument type(s) </td><td width="59">return type </td><td width="197">description </td></tr><tr><td></td></tr>
<tr><td width="197">sinc </td><td width="79">double </td><td width="59">double </td><td width="197">Return the sinc function, 
sin(x)/x, where special care is taken to ensure that 1.0 is returned if the
argument is 0.0. </td></tr>
<tr><td width="197">toDecibels </td><td width="79">double </td><td width="59">double </td><td width="197">Return 
20 &times;log<sub>10</sub>z, where z is the argument. </td></tr>
<tr><td width="197">unwrap </td><td width="79">double </td><td width="59">double </td><td width="197">Modify the specified array to unwrap
the angles. That is, if the difference between successive values is
greater than &#960; in magnitude, then the second value is modified by
multiples of 2&#960; until the difference is less than or equal to
&#960;. In addition, the first element is modified so that its
difference from zero is less than or equal to &#960; in magnitude.   </td></tr>
<tr><td width="197">upsample </td><td width="79">double, int </td><td width="59"><em>double</em> </td><td width="197">Return a new array that
is the result of inserting n&#8722;1 zeroes between each successive sample
in the input array, where n is the second argument. The returned array has length 
nL, where L is the length of the argument array. It is required that 
n &gt; 0. </td></tr></table>


<div class="p"><!----></div>
     <h3><a name="tth_sEc13.6">
13.6</a>&nbsp;&nbsp;I/O Functions and Other Miscellaneous Functions</h3>

<div class="p"><!----></div>
<a name="tth_tAb18">
</a> <center>Table 18: Miscellaneous functions, part 1.</center>
<a name="tbl:miscellaneous">
</a>

<table border="1">
<tr><td width="98">function </td><td width="118">argument type(s) </td><td width="79">return type </td><td width="197">description </td></tr><tr><td></td></tr>
<tr><td width="98">asURL </td><td width="118">string </td><td width="79">string </td><td width="197">Return a URL representation of the
argument. </td></tr>
<tr><td width="98">cast </td><td width="118">type1, type2 </td><td width="79">type1 </td><td width="197">Return the second argument converted to
the type of the first, or throw an exception if the conversion is
invalid. </td></tr>
<tr><td width="98">constants </td><td width="118">none </td><td width="79">record </td><td width="197">Return a record identifying all the
globally defined constants in the expression language. </td></tr>
<tr><td width="98">findFile </td><td width="118">string </td><td width="79">string </td><td width="197">Given a file name relative to the user
directory, current directory, or classpath, return the absolute file
name of the first match, or return the name unchanged if no match is
found. </td></tr>
<tr><td width="98">filter </td><td width="118">function, type </td><td width="79">type </td><td width="197">Extract a sub-array consisting of
all of the elements of an array for which the given predicate function
returns true. </td></tr>
<tr><td width="98">filter </td><td width="118">function, type, int </td><td width="79">type </td><td width="197">Extract a sub-array with a
limited size consisting of all of the elements of an array for which
the given predicate function returns true. </td></tr>
<tr><td width="98">freeMemory </td><td width="118">none </td><td width="79">long </td><td width="197">Return the approximate number of bytes
available for future memory allocation. </td></tr>
<tr><td width="98">iterate </td><td width="118">function, <em>int</em>, type </td><td width="79">type </td><td width="197">Return an array that
results from first applying the specified function to the third
argument, then applying it to the result of that application, and
repeating to get an array whose length is given by the second
argument. </td></tr></table>


<div class="p"><!----></div>

<div class="p"><!----></div>
<a name="tth_tAb19">
</a> <center>Table 19: Miscellaneous functions, part 2.</center>
<a name="tbl:miscellaneous">
</a>

<table border="1">
<tr><td width="98">function </td><td width="118">argument type(s) </td><td width="79">return type </td><td width="197">description </td></tr><tr><td></td></tr>
<tr><td width="98">map </td><td width="118">function, type </td><td width="79">type </td><td width="197">Return an array that results from
applying the specified function to the elements of the specified
array. </td></tr>
<tr><td width="98">property </td><td width="118">string </td><td width="79">string </td><td width="197">Return a system property with the
specified name from the environment, or an empty string if there is
none. Some useful properties are java.version, ptolemy.ptII.dir,
ptolemy.ptII.dirAsURL, and user.dir. </td></tr>
<tr><td width="98">readFile </td><td width="118">string </td><td width="79">string </td><td width="197">Get the string text in the specified
file, or throw an exception if the file cannot be found. The file can
be absolute, or relative to the current working directory (user.dir),
the user's home directory (user.home), or the classpath. </td></tr>
<tr><td width="98">readResource </td><td width="118">string </td><td width="79">string </td><td width="197">Get the string text in the specified
resource (which is a file found relative to the classpath), or throw
an exception if the file cannot be found. </td></tr>
<tr><td width="98">totalMemory </td><td width="118">none </td><td width="79">long </td><td width="197">Return the approximate number of bytes
used by current objects plus those available for future object
allocation. </td></tr></table>


<div class="p"><!----></div>

</blockquote>

<table width="331" border="0" cellpadding="0" cellspacing="0">
<tr>
  <td><a href="expressions.htm"><img src="img/navtoc.gif" width="84" height="23"
  border="0" alt="TOC"> </a></td>
  <td><a href="expressionsa12.htm"><img src="img/navprev.gif" width="81" height="23"
  border="0" alt="PREV"> </a></td>
</tr>
</table>

<br /><br /><hr /><small>File translated from
T<sub><font size="-1">E</font></sub>X
by <a href="http://hutchinson.belmont.ma.us/tth/">
T<sub><font size="-1">T</font></sub>H</a>,
version 3.87.<br />On 16 Apr 2010, 11:15.</small>
</html>



</body>
</html>
