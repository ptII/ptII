// cpp(meta datanetwork format) source file ECSL_DP.cpp generated from diagram ECSL_DP
// generated on Mon Aug 09 15:08:35 2004

#include "ECSL_DP.h"
#include "UmlExt.h"

#include "UdmStatic.h"

namespace ECSL_DP {

	Uml::Diagram umldiagram;

	Uml::Class Block::meta;
	Uml::Class Primitive::meta;
	Uml::Class TriggerPort::meta;
	Uml::Class Parameter::meta;
	Uml::Class Port::meta;
	Uml::Class Reference::meta;
	Uml::Class Annotation::meta;
	Uml::Class Line::meta;
	Uml::Class InputPort::meta;
	Uml::Class OutputPort::meta;
	Uml::Class Dataflow::meta;
	Uml::Class EnablePort::meta;
	Uml::Class System::meta;
	Uml::Class State::meta;
	Uml::Class Transition::meta;
	Uml::Class Event::meta;
	Uml::Class History::meta;
	Uml::Class TransStart::meta;
	Uml::Class Junction::meta;
	Uml::Class Stateflow::meta;
	Uml::Class Data::meta;
	Uml::Class TransConnector::meta;
	Uml::Class ConnectorRef::meta;
	Uml::Class RTConstraint::meta;
	Uml::Class RTCOut::meta;
	Uml::Class RTCIn::meta;
	Uml::Class SystemRef::meta;
	Uml::Class InPortMapping::meta;
	Uml::Class ComponentShortcut::meta;
	Uml::Class ComponentSheet::meta;
	Uml::Class Signal::meta;
	Uml::Class COutPort::meta;
	Uml::Class CInPort::meta;
	Uml::Class ComponentModels::meta;
	Uml::Class OutPortMapping::meta;
	Uml::Class CPort::meta;
	Uml::Class Component::meta;
	Uml::Class COM::meta;
	Uml::Class FirmwareLink::meta;
	Uml::Class FirmwareModule::meta;
	Uml::Class OS::meta;
	Uml::Class Wire::meta;
	Uml::Class Bus::meta;
	Uml::Class BusChan::meta;
	Uml::Class CommElement::meta;
	Uml::Class HWElement::meta;
	Uml::Class HardwareSheet::meta;
	Uml::Class HardwareModels::meta;
	Uml::Class Channel::meta;
	Uml::Class ECU::meta;
	Uml::Class IChan::meta;
	Uml::Class OChan::meta;
	Uml::Class BusMessage::meta;
	Uml::Class BusMessageRef::meta;
	Uml::Class OutCommMapping::meta;
	Uml::Class Task::meta;
	Uml::Class ComponentRef::meta;
	Uml::Class Order::meta;
	Uml::Class CommDst::meta;
	Uml::Class CommMapping::meta;
	Uml::Class InCommMapping::meta;
	Uml::Class RootFolder::meta;
	Uml::Class MgaObject::meta;
	Uml::Attribute Block::meta_Tag;
	Uml::Attribute Block::meta_BlockType;
	Uml::Attribute Block::meta_Name;
	Uml::Attribute Block::meta_Description;
	Uml::Attribute Block::meta_Priority;
	Uml::Attribute Block::meta_SampleTime;
	Uml::Attribute Primitive::meta_Deadline;
	Uml::Attribute Primitive::meta_ExecutionTime;
	Uml::Attribute Primitive::meta_Period;
	Uml::Attribute TriggerPort::meta_TriggerType;
	Uml::Attribute Parameter::meta_Value;
	Uml::Attribute Reference::meta_SourceBlock;
	Uml::Attribute Reference::meta_SourceType;
	Uml::Attribute Annotation::meta_Text;
	Uml::Attribute Line::meta_Name;
	Uml::Attribute InputPort::meta_Number;
	Uml::Attribute OutputPort::meta_Number;
	Uml::Attribute Dataflow::meta_name;
	Uml::Attribute EnablePort::meta_StatesWhenEnabling;
	Uml::Attribute State::meta_Name;
	Uml::Attribute State::meta_Decomposition;
	Uml::Attribute State::meta_EnterAction;
	Uml::Attribute State::meta_DuringAction;
	Uml::Attribute State::meta_ExitAction;
	Uml::Attribute State::meta_Order;
	Uml::Attribute Transition::meta_Guard;
	Uml::Attribute Transition::meta_Trigger;
	Uml::Attribute Transition::meta_Action;
	Uml::Attribute Transition::meta_ConditionAction;
	Uml::Attribute Transition::meta_Order;
	Uml::Attribute Event::meta_Name;
	Uml::Attribute Event::meta_Trigger;
	Uml::Attribute Event::meta_Scope;
	Uml::Attribute Event::meta_Description;
	Uml::Attribute Stateflow::meta_name;
	Uml::Attribute Data::meta_ArrayFirstIndex;
	Uml::Attribute Data::meta_ArraySize;
	Uml::Attribute Data::meta_InitialValue;
	Uml::Attribute Data::meta_Min;
	Uml::Attribute Data::meta_Max;
	Uml::Attribute Data::meta_Units;
	Uml::Attribute Data::meta_DataType;
	Uml::Attribute Data::meta_Name;
	Uml::Attribute Data::meta_Scope;
	Uml::Attribute Data::meta_Description;
	Uml::Attribute RTConstraint::meta_Latency;
	Uml::Attribute ComponentModels::meta_name;
	Uml::Attribute CPort::meta_Min;
	Uml::Attribute CPort::meta_Max;
	Uml::Attribute CPort::meta_CName;
	Uml::Attribute CPort::meta_DataOffset;
	Uml::Attribute CPort::meta_DataScale;
	Uml::Attribute CPort::meta_DataInit;
	Uml::Attribute CPort::meta_DataSign;
	Uml::Attribute CPort::meta_DataSize;
	Uml::Attribute CPort::meta_DataType;
	Uml::Attribute Component::meta_CName;
	Uml::Attribute COM::meta_HandleRX;
	Uml::Attribute COM::meta_HandleTX;
	Uml::Attribute COM::meta_HandleCCL;
	Uml::Attribute COM::meta_HandleNM;
	Uml::Attribute COM::meta_CycleTime;
	Uml::Attribute COM::meta_GenerateTask;
	Uml::Attribute FirmwareModule::meta_EventPublished;
	Uml::Attribute FirmwareModule::meta_WriteAccessor;
	Uml::Attribute FirmwareModule::meta_ReadAccessor;
	Uml::Attribute FirmwareModule::meta_SourceFile;
	Uml::Attribute FirmwareModule::meta_ISR;
	Uml::Attribute FirmwareModule::meta_LibraryFile;
	Uml::Attribute FirmwareModule::meta_OSBinding;
	Uml::Attribute OS::meta_Compiler;
	Uml::Attribute OS::meta_Conformance;
	Uml::Attribute OS::meta_Schedule;
	Uml::Attribute OS::meta_TickTime;
	Uml::Attribute OS::meta_Status;
	Uml::Attribute Bus::meta_NM;
	Uml::Attribute Bus::meta_CName;
	Uml::Attribute Bus::meta_Medium;
	Uml::Attribute Bus::meta_FrameSize;
	Uml::Attribute Bus::meta_BitRate;
	Uml::Attribute HardwareModels::meta_name;
	Uml::Attribute Channel::meta_InterruptNum;
	Uml::Attribute Channel::meta_CName;
	Uml::Attribute ECU::meta_Simulator;
	Uml::Attribute ECU::meta_CName;
	Uml::Attribute ECU::meta_ROM;
	Uml::Attribute ECU::meta_RAM;
	Uml::Attribute ECU::meta_Speed;
	Uml::Attribute ECU::meta_CPU;
	Uml::Attribute BusMessage::meta_CycleTime;
	Uml::Attribute BusMessage::meta_CName;
	Uml::Attribute BusMessage::meta_SendType;
	Uml::Attribute BusMessage::meta_Size;
	Uml::Attribute BusMessage::meta_ID;
	Uml::Attribute Task::meta_CycleTime;
	Uml::Attribute Task::meta_Activation;
	Uml::Attribute Task::meta_Cyclic;
	Uml::Attribute Task::meta_Type;
	Uml::Attribute Task::meta_Preemption;
	Uml::Attribute Task::meta_Comment;
	Uml::Attribute Task::meta_AutoStart;
	Uml::Attribute Task::meta_Priority;
	Uml::Attribute CommMapping::meta_StartBit;
	Uml::Attribute CommMapping::meta_NumBits;
	Uml::Attribute RootFolder::meta_name;
	Uml::Attribute MgaObject::meta_position;
	Uml::Attribute MgaObject::meta_name;
	Uml::AssociationRole Port::meta_srcLine, Port::meta_srcLine_rev;
	Uml::AssociationRole Port::meta_dstLine, Port::meta_dstLine_rev;
	Uml::AssociationRole Line::meta_dstLine_end_;
	Uml::AssociationRole Line::meta_srcLine_end_;
	Uml::AssociationRole InputPort::meta_srcInPortMapping, InputPort::meta_srcInPortMapping_rev;
	Uml::AssociationRole OutputPort::meta_dstOutPortMapping, OutputPort::meta_dstOutPortMapping_rev;
	Uml::AssociationRole System::meta_referedbySystemRef;
	Uml::AssociationRole Transition::meta_dstTransition_end_;
	Uml::AssociationRole Transition::meta_srcTransition_end_;
	Uml::AssociationRole TransConnector::meta_srcTransition, TransConnector::meta_srcTransition_rev;
	Uml::AssociationRole TransConnector::meta_dstTransition, TransConnector::meta_dstTransition_rev;
	Uml::AssociationRole TransConnector::meta_referedbyConnectorRef;
	Uml::AssociationRole ConnectorRef::meta_ref;
	Uml::AssociationRole RTConstraint::meta_srcRTCOut, RTConstraint::meta_srcRTCOut_rev;
	Uml::AssociationRole RTConstraint::meta_dstRTCIn, RTConstraint::meta_dstRTCIn_rev;
	Uml::AssociationRole RTCOut::meta_dstRTCOut_end_;
	Uml::AssociationRole RTCOut::meta_srcRTCOut_end_;
	Uml::AssociationRole RTCIn::meta_srcRTCIn_end_;
	Uml::AssociationRole RTCIn::meta_dstRTCIn_end_;
	Uml::AssociationRole SystemRef::meta_ref;
	Uml::AssociationRole InPortMapping::meta_dstInPortMapping_end_;
	Uml::AssociationRole InPortMapping::meta_srcInPortMapping_end_;
	Uml::AssociationRole ComponentShortcut::meta_ref;
	Uml::AssociationRole Signal::meta_srcSignal_end_;
	Uml::AssociationRole Signal::meta_dstSignal_end_;
	Uml::AssociationRole COutPort::meta_srcOutPortMapping, COutPort::meta_srcOutPortMapping_rev;
	Uml::AssociationRole COutPort::meta_srcRTCIn, COutPort::meta_srcRTCIn_rev;
	Uml::AssociationRole COutPort::meta_dstSignal, COutPort::meta_dstSignal_rev;
	Uml::AssociationRole CInPort::meta_dstInPortMapping, CInPort::meta_dstInPortMapping_rev;
	Uml::AssociationRole CInPort::meta_dstRTCOut, CInPort::meta_dstRTCOut_rev;
	Uml::AssociationRole CInPort::meta_srcSignal, CInPort::meta_srcSignal_rev;
	Uml::AssociationRole OutPortMapping::meta_dstOutPortMapping_end_;
	Uml::AssociationRole OutPortMapping::meta_srcOutPortMapping_end_;
	Uml::AssociationRole CPort::meta_srcInCommMapping, CPort::meta_srcInCommMapping_rev;
	Uml::AssociationRole CPort::meta_dstOutCommMapping, CPort::meta_dstOutCommMapping_rev;
	Uml::AssociationRole Component::meta_referedbyComponentShortcut;
	Uml::AssociationRole Component::meta_referedbyComponentRef;
	Uml::AssociationRole FirmwareLink::meta_dstFirmwareLink_end_;
	Uml::AssociationRole FirmwareLink::meta_srcFirmwareLink_end_;
	Uml::AssociationRole FirmwareModule::meta_dstFirmwareLink, FirmwareModule::meta_dstFirmwareLink_rev;
	Uml::AssociationRole Wire::meta_dstWire_end_;
	Uml::AssociationRole Wire::meta_srcWire_end_;
	Uml::AssociationRole BusChan::meta_members;
	Uml::AssociationRole CommElement::meta_srcWire, CommElement::meta_srcWire_rev;
	Uml::AssociationRole CommElement::meta_dstWire, CommElement::meta_dstWire_rev;
	Uml::AssociationRole Channel::meta_srcFirmwareLink, Channel::meta_srcFirmwareLink_rev;
	Uml::AssociationRole BusMessage::meta_BusChan;
	Uml::AssociationRole BusMessage::meta_referedbyBusMessageRef;
	Uml::AssociationRole BusMessageRef::meta_ref;
	Uml::AssociationRole OutCommMapping::meta_srcOutCommMapping_end_;
	Uml::AssociationRole OutCommMapping::meta_dstOutCommMapping_end_;
	Uml::AssociationRole Task::meta_members;
	Uml::AssociationRole ComponentRef::meta_ref;
	Uml::AssociationRole ComponentRef::meta_Task;
	Uml::AssociationRole ComponentRef::meta_dstOrder, ComponentRef::meta_dstOrder_rev;
	Uml::AssociationRole ComponentRef::meta_srcOrder, ComponentRef::meta_srcOrder_rev;
	Uml::AssociationRole Order::meta_srcOrder_end_;
	Uml::AssociationRole Order::meta_dstOrder_end_;
	Uml::AssociationRole CommDst::meta_dstInCommMapping, CommDst::meta_dstInCommMapping_rev;
	Uml::AssociationRole CommDst::meta_srcOutCommMapping, CommDst::meta_srcOutCommMapping_rev;
	Uml::AssociationRole InCommMapping::meta_dstInCommMapping_end_;
	Uml::AssociationRole InCommMapping::meta_srcInCommMapping_end_;
	Uml::CompositionParentRole Block::meta_System_parent;
	Uml::CompositionParentRole Parameter::meta_Parameter_Block_parent;
	Uml::CompositionParentRole Port::meta_Block_parent;
	Uml::CompositionParentRole Annotation::meta_Block_parent;
	Uml::CompositionParentRole Line::meta_Line_Block_parent;
	Uml::CompositionParentRole Dataflow::meta_RootFolder_parent;
	Uml::CompositionParentRole System::meta_Dataflow_parent;
	Uml::CompositionParentRole State::meta_Stateflow_parent;
	Uml::CompositionParentRole Transition::meta_Transition_State_parent;
	Uml::CompositionParentRole Event::meta_State_parent;
	Uml::CompositionParentRole Stateflow::meta_RootFolder_parent;
	Uml::CompositionParentRole Data::meta_State_parent;
	Uml::CompositionParentRole TransConnector::meta_State_parent;
	Uml::CompositionParentRole ConnectorRef::meta_Block_parent;
	Uml::CompositionParentRole RTConstraint::meta_Component_parent;
	Uml::CompositionParentRole RTCOut::meta_Component_parent;
	Uml::CompositionParentRole RTCIn::meta_Component_parent;
	Uml::CompositionParentRole SystemRef::meta_Component_parent;
	Uml::CompositionParentRole InPortMapping::meta_Component_parent;
	Uml::CompositionParentRole ComponentShortcut::meta_ComponentSheet_parent;
	Uml::CompositionParentRole ComponentSheet::meta_ComponentModels_parent;
	Uml::CompositionParentRole Signal::meta_ComponentSheet_parent;
	Uml::CompositionParentRole ComponentModels::meta_RootFolder_parent;
	Uml::CompositionParentRole OutPortMapping::meta_Component_parent;
	Uml::CompositionParentRole CPort::meta_Component_parent;
	Uml::CompositionParentRole Component::meta_ComponentSheet_parent;
	Uml::CompositionParentRole COM::meta_ECU_parent;
	Uml::CompositionParentRole FirmwareLink::meta_ECU_parent;
	Uml::CompositionParentRole FirmwareModule::meta_ECU_parent;
	Uml::CompositionParentRole OS::meta_ECU_parent;
	Uml::CompositionParentRole HWElement::meta_HardwareSheet_parent;
	Uml::CompositionParentRole HardwareSheet::meta_HardwareModels_parent;
	Uml::CompositionParentRole HardwareModels::meta_RootFolder_parent;
	Uml::CompositionParentRole Channel::meta_ECU_parent;
	Uml::CompositionParentRole BusMessage::meta_ECU_parent;
	Uml::CompositionParentRole BusMessageRef::meta_ECU_parent;
	Uml::CompositionParentRole Task::meta_ECU_parent;
	Uml::CompositionParentRole ComponentRef::meta_ECU_parent;
	Uml::CompositionParentRole Order::meta_ECU_parent;
	Uml::CompositionParentRole CommMapping::meta_ECU_parent;
	Uml::CompositionParentRole RootFolder::meta_RootFolder_parent;
	Uml::CompositionChildRole Block::meta_Annotation_children;
	Uml::CompositionChildRole Block::meta_ConnectorRef_children;
	Uml::CompositionChildRole Block::meta_Line;
	Uml::CompositionChildRole Block::meta_Port_children;
	Uml::CompositionChildRole Block::meta_Parameter;
	Uml::CompositionChildRole Dataflow::meta_System_child;
	Uml::CompositionChildRole System::meta_Block_children;
	Uml::CompositionChildRole State::meta_Event_children;
	Uml::CompositionChildRole State::meta_Transition;
	Uml::CompositionChildRole State::meta_Data_children;
	Uml::CompositionChildRole State::meta_TransConnector_children;
	Uml::CompositionChildRole Stateflow::meta_State_children;
	Uml::CompositionChildRole ComponentSheet::meta_Component_children;
	Uml::CompositionChildRole ComponentSheet::meta_ComponentShortcut_children;
	Uml::CompositionChildRole ComponentSheet::meta_Signal_children;
	Uml::CompositionChildRole ComponentModels::meta_ComponentSheet_children;
	Uml::CompositionChildRole Component::meta_CPort_children;
	Uml::CompositionChildRole Component::meta_SystemRef_child;
	Uml::CompositionChildRole Component::meta_RTConstraint_children;
	Uml::CompositionChildRole Component::meta_RTCIn_children;
	Uml::CompositionChildRole Component::meta_RTCOut_children;
	Uml::CompositionChildRole Component::meta_OutPortMapping_children;
	Uml::CompositionChildRole Component::meta_InPortMapping_children;
	Uml::CompositionChildRole HardwareSheet::meta_HWElement_children;
	Uml::CompositionChildRole HardwareModels::meta_HardwareSheet_children;
	Uml::CompositionChildRole ECU::meta_OS_child;
	Uml::CompositionChildRole ECU::meta_COM_children;
	Uml::CompositionChildRole ECU::meta_Channel_children;
	Uml::CompositionChildRole ECU::meta_FirmwareModule_children;
	Uml::CompositionChildRole ECU::meta_ComponentRef_children;
	Uml::CompositionChildRole ECU::meta_Task_children;
	Uml::CompositionChildRole ECU::meta_CommMapping_children;
	Uml::CompositionChildRole ECU::meta_Order_children;
	Uml::CompositionChildRole ECU::meta_FirmwareLink_children;
	Uml::CompositionChildRole ECU::meta_BusMessage_children;
	Uml::CompositionChildRole ECU::meta_BusMessageRef_children;
	Uml::CompositionChildRole RootFolder::meta_Stateflow_children;
	Uml::CompositionChildRole RootFolder::meta_Dataflow_children;
	Uml::CompositionChildRole RootFolder::meta_ComponentModels_children;
	Uml::CompositionChildRole RootFolder::meta_HardwareModels_children;
	Uml::CompositionChildRole RootFolder::meta_RootFolder_children;
	void Creates()
	{
		Block::meta = Uml::Class::Create(umldiagram);
		Primitive::meta = Uml::Class::Create(umldiagram);
		TriggerPort::meta = Uml::Class::Create(umldiagram);
		Parameter::meta = Uml::Class::Create(umldiagram);
		Port::meta = Uml::Class::Create(umldiagram);
		Reference::meta = Uml::Class::Create(umldiagram);
		Annotation::meta = Uml::Class::Create(umldiagram);
		Line::meta = Uml::Class::Create(umldiagram);
		InputPort::meta = Uml::Class::Create(umldiagram);
		OutputPort::meta = Uml::Class::Create(umldiagram);
		Dataflow::meta = Uml::Class::Create(umldiagram);
		EnablePort::meta = Uml::Class::Create(umldiagram);
		System::meta = Uml::Class::Create(umldiagram);
		State::meta = Uml::Class::Create(umldiagram);
		Transition::meta = Uml::Class::Create(umldiagram);
		Event::meta = Uml::Class::Create(umldiagram);
		History::meta = Uml::Class::Create(umldiagram);
		TransStart::meta = Uml::Class::Create(umldiagram);
		Junction::meta = Uml::Class::Create(umldiagram);
		Stateflow::meta = Uml::Class::Create(umldiagram);
		Data::meta = Uml::Class::Create(umldiagram);
		TransConnector::meta = Uml::Class::Create(umldiagram);
		ConnectorRef::meta = Uml::Class::Create(umldiagram);
		RTConstraint::meta = Uml::Class::Create(umldiagram);
		RTCOut::meta = Uml::Class::Create(umldiagram);
		RTCIn::meta = Uml::Class::Create(umldiagram);
		SystemRef::meta = Uml::Class::Create(umldiagram);
		InPortMapping::meta = Uml::Class::Create(umldiagram);
		ComponentShortcut::meta = Uml::Class::Create(umldiagram);
		ComponentSheet::meta = Uml::Class::Create(umldiagram);
		Signal::meta = Uml::Class::Create(umldiagram);
		COutPort::meta = Uml::Class::Create(umldiagram);
		CInPort::meta = Uml::Class::Create(umldiagram);
		ComponentModels::meta = Uml::Class::Create(umldiagram);
		OutPortMapping::meta = Uml::Class::Create(umldiagram);
		CPort::meta = Uml::Class::Create(umldiagram);
		Component::meta = Uml::Class::Create(umldiagram);
		COM::meta = Uml::Class::Create(umldiagram);
		FirmwareLink::meta = Uml::Class::Create(umldiagram);
		FirmwareModule::meta = Uml::Class::Create(umldiagram);
		OS::meta = Uml::Class::Create(umldiagram);
		Wire::meta = Uml::Class::Create(umldiagram);
		Bus::meta = Uml::Class::Create(umldiagram);
		BusChan::meta = Uml::Class::Create(umldiagram);
		CommElement::meta = Uml::Class::Create(umldiagram);
		HWElement::meta = Uml::Class::Create(umldiagram);
		HardwareSheet::meta = Uml::Class::Create(umldiagram);
		HardwareModels::meta = Uml::Class::Create(umldiagram);
		Channel::meta = Uml::Class::Create(umldiagram);
		ECU::meta = Uml::Class::Create(umldiagram);
		IChan::meta = Uml::Class::Create(umldiagram);
		OChan::meta = Uml::Class::Create(umldiagram);
		BusMessage::meta = Uml::Class::Create(umldiagram);
		BusMessageRef::meta = Uml::Class::Create(umldiagram);
		OutCommMapping::meta = Uml::Class::Create(umldiagram);
		Task::meta = Uml::Class::Create(umldiagram);
		ComponentRef::meta = Uml::Class::Create(umldiagram);
		Order::meta = Uml::Class::Create(umldiagram);
		CommDst::meta = Uml::Class::Create(umldiagram);
		CommMapping::meta = Uml::Class::Create(umldiagram);
		InCommMapping::meta = Uml::Class::Create(umldiagram);
		RootFolder::meta = Uml::Class::Create(umldiagram);
		MgaObject::meta = Uml::Class::Create(umldiagram);
		Block::meta_Tag = Uml::Attribute::Create(Block::meta);
		Block::meta_BlockType = Uml::Attribute::Create(Block::meta);
		Block::meta_Name = Uml::Attribute::Create(Block::meta);
		Block::meta_Description = Uml::Attribute::Create(Block::meta);
		Block::meta_Priority = Uml::Attribute::Create(Block::meta);
		Block::meta_SampleTime = Uml::Attribute::Create(Block::meta);
		Primitive::meta_Deadline = Uml::Attribute::Create(Primitive::meta);
		Primitive::meta_ExecutionTime = Uml::Attribute::Create(Primitive::meta);
		Primitive::meta_Period = Uml::Attribute::Create(Primitive::meta);
		TriggerPort::meta_TriggerType = Uml::Attribute::Create(TriggerPort::meta);
		Parameter::meta_Value = Uml::Attribute::Create(Parameter::meta);
		Reference::meta_SourceBlock = Uml::Attribute::Create(Reference::meta);
		Reference::meta_SourceType = Uml::Attribute::Create(Reference::meta);
		Annotation::meta_Text = Uml::Attribute::Create(Annotation::meta);
		Line::meta_Name = Uml::Attribute::Create(Line::meta);
		InputPort::meta_Number = Uml::Attribute::Create(InputPort::meta);
		OutputPort::meta_Number = Uml::Attribute::Create(OutputPort::meta);
		Dataflow::meta_name = Uml::Attribute::Create(Dataflow::meta);
		EnablePort::meta_StatesWhenEnabling = Uml::Attribute::Create(EnablePort::meta);
		State::meta_Name = Uml::Attribute::Create(State::meta);
		State::meta_Decomposition = Uml::Attribute::Create(State::meta);
		State::meta_EnterAction = Uml::Attribute::Create(State::meta);
		State::meta_DuringAction = Uml::Attribute::Create(State::meta);
		State::meta_ExitAction = Uml::Attribute::Create(State::meta);
		State::meta_Order = Uml::Attribute::Create(State::meta);
		Transition::meta_Guard = Uml::Attribute::Create(Transition::meta);
		Transition::meta_Trigger = Uml::Attribute::Create(Transition::meta);
		Transition::meta_Action = Uml::Attribute::Create(Transition::meta);
		Transition::meta_ConditionAction = Uml::Attribute::Create(Transition::meta);
		Transition::meta_Order = Uml::Attribute::Create(Transition::meta);
		Event::meta_Name = Uml::Attribute::Create(Event::meta);
		Event::meta_Trigger = Uml::Attribute::Create(Event::meta);
		Event::meta_Scope = Uml::Attribute::Create(Event::meta);
		Event::meta_Description = Uml::Attribute::Create(Event::meta);
		Stateflow::meta_name = Uml::Attribute::Create(Stateflow::meta);
		Data::meta_ArrayFirstIndex = Uml::Attribute::Create(Data::meta);
		Data::meta_ArraySize = Uml::Attribute::Create(Data::meta);
		Data::meta_InitialValue = Uml::Attribute::Create(Data::meta);
		Data::meta_Min = Uml::Attribute::Create(Data::meta);
		Data::meta_Max = Uml::Attribute::Create(Data::meta);
		Data::meta_Units = Uml::Attribute::Create(Data::meta);
		Data::meta_DataType = Uml::Attribute::Create(Data::meta);
		Data::meta_Name = Uml::Attribute::Create(Data::meta);
		Data::meta_Scope = Uml::Attribute::Create(Data::meta);
		Data::meta_Description = Uml::Attribute::Create(Data::meta);
		RTConstraint::meta_Latency = Uml::Attribute::Create(RTConstraint::meta);
		ComponentModels::meta_name = Uml::Attribute::Create(ComponentModels::meta);
		CPort::meta_Min = Uml::Attribute::Create(CPort::meta);
		CPort::meta_Max = Uml::Attribute::Create(CPort::meta);
		CPort::meta_CName = Uml::Attribute::Create(CPort::meta);
		CPort::meta_DataOffset = Uml::Attribute::Create(CPort::meta);
		CPort::meta_DataScale = Uml::Attribute::Create(CPort::meta);
		CPort::meta_DataInit = Uml::Attribute::Create(CPort::meta);
		CPort::meta_DataSign = Uml::Attribute::Create(CPort::meta);
		CPort::meta_DataSize = Uml::Attribute::Create(CPort::meta);
		CPort::meta_DataType = Uml::Attribute::Create(CPort::meta);
		Component::meta_CName = Uml::Attribute::Create(Component::meta);
		COM::meta_HandleRX = Uml::Attribute::Create(COM::meta);
		COM::meta_HandleTX = Uml::Attribute::Create(COM::meta);
		COM::meta_HandleCCL = Uml::Attribute::Create(COM::meta);
		COM::meta_HandleNM = Uml::Attribute::Create(COM::meta);
		COM::meta_CycleTime = Uml::Attribute::Create(COM::meta);
		COM::meta_GenerateTask = Uml::Attribute::Create(COM::meta);
		FirmwareModule::meta_EventPublished = Uml::Attribute::Create(FirmwareModule::meta);
		FirmwareModule::meta_WriteAccessor = Uml::Attribute::Create(FirmwareModule::meta);
		FirmwareModule::meta_ReadAccessor = Uml::Attribute::Create(FirmwareModule::meta);
		FirmwareModule::meta_SourceFile = Uml::Attribute::Create(FirmwareModule::meta);
		FirmwareModule::meta_ISR = Uml::Attribute::Create(FirmwareModule::meta);
		FirmwareModule::meta_LibraryFile = Uml::Attribute::Create(FirmwareModule::meta);
		FirmwareModule::meta_OSBinding = Uml::Attribute::Create(FirmwareModule::meta);
		OS::meta_Compiler = Uml::Attribute::Create(OS::meta);
		OS::meta_Conformance = Uml::Attribute::Create(OS::meta);
		OS::meta_Schedule = Uml::Attribute::Create(OS::meta);
		OS::meta_TickTime = Uml::Attribute::Create(OS::meta);
		OS::meta_Status = Uml::Attribute::Create(OS::meta);
		Bus::meta_NM = Uml::Attribute::Create(Bus::meta);
		Bus::meta_CName = Uml::Attribute::Create(Bus::meta);
		Bus::meta_Medium = Uml::Attribute::Create(Bus::meta);
		Bus::meta_FrameSize = Uml::Attribute::Create(Bus::meta);
		Bus::meta_BitRate = Uml::Attribute::Create(Bus::meta);
		HardwareModels::meta_name = Uml::Attribute::Create(HardwareModels::meta);
		Channel::meta_InterruptNum = Uml::Attribute::Create(Channel::meta);
		Channel::meta_CName = Uml::Attribute::Create(Channel::meta);
		ECU::meta_Simulator = Uml::Attribute::Create(ECU::meta);
		ECU::meta_CName = Uml::Attribute::Create(ECU::meta);
		ECU::meta_ROM = Uml::Attribute::Create(ECU::meta);
		ECU::meta_RAM = Uml::Attribute::Create(ECU::meta);
		ECU::meta_Speed = Uml::Attribute::Create(ECU::meta);
		ECU::meta_CPU = Uml::Attribute::Create(ECU::meta);
		BusMessage::meta_CycleTime = Uml::Attribute::Create(BusMessage::meta);
		BusMessage::meta_CName = Uml::Attribute::Create(BusMessage::meta);
		BusMessage::meta_SendType = Uml::Attribute::Create(BusMessage::meta);
		BusMessage::meta_Size = Uml::Attribute::Create(BusMessage::meta);
		BusMessage::meta_ID = Uml::Attribute::Create(BusMessage::meta);
		Task::meta_CycleTime = Uml::Attribute::Create(Task::meta);
		Task::meta_Activation = Uml::Attribute::Create(Task::meta);
		Task::meta_Cyclic = Uml::Attribute::Create(Task::meta);
		Task::meta_Type = Uml::Attribute::Create(Task::meta);
		Task::meta_Preemption = Uml::Attribute::Create(Task::meta);
		Task::meta_Comment = Uml::Attribute::Create(Task::meta);
		Task::meta_AutoStart = Uml::Attribute::Create(Task::meta);
		Task::meta_Priority = Uml::Attribute::Create(Task::meta);
		CommMapping::meta_StartBit = Uml::Attribute::Create(CommMapping::meta);
		CommMapping::meta_NumBits = Uml::Attribute::Create(CommMapping::meta);
		RootFolder::meta_name = Uml::Attribute::Create(RootFolder::meta);
		MgaObject::meta_position = Uml::Attribute::Create(MgaObject::meta);
		MgaObject::meta_name = Uml::Attribute::Create(MgaObject::meta);
	}
	void InitClassesAttributes()
	{
		Block::meta.name() = "Block";
		Block::meta.isAbstract() = true;
		Block::meta.stereotype() = "Model";
		Primitive::meta.name() = "Primitive";
		Primitive::meta.isAbstract() = false;
		Primitive::meta.stereotype() = "Model";
		TriggerPort::meta.name() = "TriggerPort";
		TriggerPort::meta.isAbstract() = false;
		TriggerPort::meta.stereotype() = "Atom";
		Parameter::meta.name() = "Parameter";
		Parameter::meta.isAbstract() = false;
		Parameter::meta.stereotype() = "Atom";
		Port::meta.name() = "Port";
		Port::meta.isAbstract() = true;
		Port::meta.stereotype() = "Atom";
		Reference::meta.name() = "Reference";
		Reference::meta.isAbstract() = false;
		Reference::meta.stereotype() = "Model";
		Annotation::meta.name() = "Annotation";
		Annotation::meta.isAbstract() = false;
		Annotation::meta.stereotype() = "Atom";
		Line::meta.name() = "Line";
		Line::meta.isAbstract() = false;
		Line::meta.stereotype() = "Connection";
		InputPort::meta.name() = "InputPort";
		InputPort::meta.isAbstract() = false;
		InputPort::meta.stereotype() = "Atom";
		OutputPort::meta.name() = "OutputPort";
		OutputPort::meta.isAbstract() = false;
		OutputPort::meta.stereotype() = "Atom";
		Dataflow::meta.name() = "Dataflow";
		Dataflow::meta.isAbstract() = false;
		Dataflow::meta.stereotype() = "Folder";
		EnablePort::meta.name() = "EnablePort";
		EnablePort::meta.isAbstract() = false;
		EnablePort::meta.stereotype() = "Atom";
		System::meta.name() = "System";
		System::meta.isAbstract() = false;
		System::meta.stereotype() = "Model";
		State::meta.name() = "State";
		State::meta.isAbstract() = false;
		State::meta.stereotype() = "Model";
		Transition::meta.name() = "Transition";
		Transition::meta.isAbstract() = false;
		Transition::meta.stereotype() = "Connection";
		Event::meta.name() = "Event";
		Event::meta.isAbstract() = false;
		Event::meta.stereotype() = "Atom";
		History::meta.name() = "History";
		History::meta.isAbstract() = false;
		History::meta.stereotype() = "Atom";
		TransStart::meta.name() = "TransStart";
		TransStart::meta.isAbstract() = false;
		TransStart::meta.stereotype() = "Atom";
		Junction::meta.name() = "Junction";
		Junction::meta.isAbstract() = false;
		Junction::meta.stereotype() = "Atom";
		Stateflow::meta.name() = "Stateflow";
		Stateflow::meta.isAbstract() = false;
		Stateflow::meta.stereotype() = "Folder";
		Data::meta.name() = "Data";
		Data::meta.isAbstract() = false;
		Data::meta.stereotype() = "Atom";
		TransConnector::meta.name() = "TransConnector";
		TransConnector::meta.isAbstract() = true;
		TransConnector::meta.stereotype() = "FCO";
		ConnectorRef::meta.name() = "ConnectorRef";
		ConnectorRef::meta.isAbstract() = false;
		ConnectorRef::meta.stereotype() = "Reference";
		RTConstraint::meta.name() = "RTConstraint";
		RTConstraint::meta.isAbstract() = false;
		RTConstraint::meta.stereotype() = "Atom";
		RTCOut::meta.name() = "RTCOut";
		RTCOut::meta.isAbstract() = false;
		RTCOut::meta.stereotype() = "Connection";
		RTCIn::meta.name() = "RTCIn";
		RTCIn::meta.isAbstract() = false;
		RTCIn::meta.stereotype() = "Connection";
		SystemRef::meta.name() = "SystemRef";
		SystemRef::meta.isAbstract() = false;
		SystemRef::meta.stereotype() = "Reference";
		InPortMapping::meta.name() = "InPortMapping";
		InPortMapping::meta.isAbstract() = false;
		InPortMapping::meta.stereotype() = "Connection";
		ComponentShortcut::meta.name() = "ComponentShortcut";
		ComponentShortcut::meta.isAbstract() = false;
		ComponentShortcut::meta.stereotype() = "Reference";
		ComponentSheet::meta.name() = "ComponentSheet";
		ComponentSheet::meta.isAbstract() = false;
		ComponentSheet::meta.stereotype() = "Model";
		Signal::meta.name() = "Signal";
		Signal::meta.isAbstract() = false;
		Signal::meta.stereotype() = "Connection";
		COutPort::meta.name() = "COutPort";
		COutPort::meta.isAbstract() = false;
		COutPort::meta.stereotype() = "Atom";
		CInPort::meta.name() = "CInPort";
		CInPort::meta.isAbstract() = false;
		CInPort::meta.stereotype() = "Atom";
		ComponentModels::meta.name() = "ComponentModels";
		ComponentModels::meta.isAbstract() = false;
		ComponentModels::meta.stereotype() = "Folder";
		OutPortMapping::meta.name() = "OutPortMapping";
		OutPortMapping::meta.isAbstract() = false;
		OutPortMapping::meta.stereotype() = "Connection";
		CPort::meta.name() = "CPort";
		CPort::meta.isAbstract() = true;
		CPort::meta.stereotype() = "Atom";
		Component::meta.name() = "Component";
		Component::meta.isAbstract() = false;
		Component::meta.stereotype() = "Model";
		COM::meta.name() = "COM";
		COM::meta.isAbstract() = false;
		COM::meta.stereotype() = "Atom";
		FirmwareLink::meta.name() = "FirmwareLink";
		FirmwareLink::meta.isAbstract() = false;
		FirmwareLink::meta.stereotype() = "Connection";
		FirmwareModule::meta.name() = "FirmwareModule";
		FirmwareModule::meta.isAbstract() = false;
		FirmwareModule::meta.stereotype() = "Atom";
		OS::meta.name() = "OS";
		OS::meta.isAbstract() = false;
		OS::meta.stereotype() = "Atom";
		Wire::meta.name() = "Wire";
		Wire::meta.isAbstract() = false;
		Wire::meta.stereotype() = "Connection";
		Bus::meta.name() = "Bus";
		Bus::meta.isAbstract() = false;
		Bus::meta.stereotype() = "Atom";
		BusChan::meta.name() = "BusChan";
		BusChan::meta.isAbstract() = false;
		BusChan::meta.stereotype() = "Set";
		CommElement::meta.name() = "CommElement";
		CommElement::meta.isAbstract() = true;
		CommElement::meta.stereotype() = "FCO";
		HWElement::meta.name() = "HWElement";
		HWElement::meta.isAbstract() = true;
		HWElement::meta.stereotype() = "FCO";
		HardwareSheet::meta.name() = "HardwareSheet";
		HardwareSheet::meta.isAbstract() = false;
		HardwareSheet::meta.stereotype() = "Model";
		HardwareModels::meta.name() = "HardwareModels";
		HardwareModels::meta.isAbstract() = false;
		HardwareModels::meta.stereotype() = "Folder";
		Channel::meta.name() = "Channel";
		Channel::meta.isAbstract() = true;
		Channel::meta.stereotype() = "FCO";
		ECU::meta.name() = "ECU";
		ECU::meta.isAbstract() = false;
		ECU::meta.stereotype() = "Model";
		IChan::meta.name() = "IChan";
		IChan::meta.isAbstract() = false;
		IChan::meta.stereotype() = "Atom";
		OChan::meta.name() = "OChan";
		OChan::meta.isAbstract() = false;
		OChan::meta.stereotype() = "Atom";
		BusMessage::meta.name() = "BusMessage";
		BusMessage::meta.isAbstract() = false;
		BusMessage::meta.stereotype() = "Atom";
		BusMessageRef::meta.name() = "BusMessageRef";
		BusMessageRef::meta.isAbstract() = false;
		BusMessageRef::meta.stereotype() = "Reference";
		OutCommMapping::meta.name() = "OutCommMapping";
		OutCommMapping::meta.isAbstract() = false;
		OutCommMapping::meta.stereotype() = "Connection";
		Task::meta.name() = "Task";
		Task::meta.isAbstract() = false;
		Task::meta.stereotype() = "Set";
		ComponentRef::meta.name() = "ComponentRef";
		ComponentRef::meta.isAbstract() = false;
		ComponentRef::meta.stereotype() = "Reference";
		Order::meta.name() = "Order";
		Order::meta.isAbstract() = false;
		Order::meta.stereotype() = "Connection";
		CommDst::meta.name() = "CommDst";
		CommDst::meta.isAbstract() = true;
		CommDst::meta.stereotype() = "FCO";
		CommMapping::meta.name() = "CommMapping";
		CommMapping::meta.isAbstract() = true;
		CommMapping::meta.stereotype() = "FCO";
		InCommMapping::meta.name() = "InCommMapping";
		InCommMapping::meta.isAbstract() = false;
		InCommMapping::meta.stereotype() = "Connection";
		RootFolder::meta.name() = "RootFolder";
		RootFolder::meta.isAbstract() = false;
		RootFolder::meta.stereotype() = "Folder";
		MgaObject::meta.name() = "MgaObject";
		MgaObject::meta.isAbstract() = true;
		
		Block::meta_Tag.name() = "Tag";
		Block::meta_Tag.type() = "String";
		Block::meta_Tag.min() = 1;
		Block::meta_Tag.max() = 1;
		Block::meta_Tag.nonpersistent() = false;
		Block::meta_Tag.registry() = false;
		Block::meta_Tag.ordered() = false;
		Block::meta_Tag.visibility() = "public";
		Block::meta_Tag.defvalue() = vector<string>();
		Block::meta_BlockType.name() = "BlockType";
		Block::meta_BlockType.type() = "String";
		Block::meta_BlockType.min() = 1;
		Block::meta_BlockType.max() = 1;
		Block::meta_BlockType.nonpersistent() = false;
		Block::meta_BlockType.registry() = false;
		Block::meta_BlockType.ordered() = false;
		Block::meta_BlockType.visibility() = "public";
		Block::meta_BlockType.defvalue() = vector<string>();
		Block::meta_Name.name() = "Name";
		Block::meta_Name.type() = "String";
		Block::meta_Name.min() = 1;
		Block::meta_Name.max() = 1;
		Block::meta_Name.nonpersistent() = false;
		Block::meta_Name.registry() = false;
		Block::meta_Name.ordered() = false;
		Block::meta_Name.visibility() = "public";
		Block::meta_Name.defvalue() = vector<string>();
		Block::meta_Description.name() = "Description";
		Block::meta_Description.type() = "String";
		Block::meta_Description.min() = 1;
		Block::meta_Description.max() = 1;
		Block::meta_Description.nonpersistent() = false;
		Block::meta_Description.registry() = false;
		Block::meta_Description.ordered() = false;
		Block::meta_Description.visibility() = "public";
		Block::meta_Description.defvalue() = vector<string>();
		Block::meta_Priority.name() = "Priority";
		Block::meta_Priority.type() = "Integer";
		Block::meta_Priority.min() = 1;
		Block::meta_Priority.max() = 1;
		Block::meta_Priority.nonpersistent() = false;
		Block::meta_Priority.registry() = false;
		Block::meta_Priority.ordered() = false;
		Block::meta_Priority.visibility() = "public";
		Block::meta_Priority.defvalue() = vector<string>();
		Block::meta_SampleTime.name() = "SampleTime";
		Block::meta_SampleTime.type() = "Real";
		Block::meta_SampleTime.min() = 1;
		Block::meta_SampleTime.max() = 1;
		Block::meta_SampleTime.nonpersistent() = false;
		Block::meta_SampleTime.registry() = false;
		Block::meta_SampleTime.ordered() = false;
		Block::meta_SampleTime.visibility() = "public";
		Block::meta_SampleTime.defvalue() = vector<string>();
		Primitive::meta_Deadline.name() = "Deadline";
		Primitive::meta_Deadline.type() = "Integer";
		Primitive::meta_Deadline.min() = 1;
		Primitive::meta_Deadline.max() = 1;
		Primitive::meta_Deadline.nonpersistent() = false;
		Primitive::meta_Deadline.registry() = false;
		Primitive::meta_Deadline.ordered() = false;
		Primitive::meta_Deadline.visibility() = "public";
		Primitive::meta_Deadline.defvalue() = vector<string>();
		Primitive::meta_ExecutionTime.name() = "ExecutionTime";
		Primitive::meta_ExecutionTime.type() = "Integer";
		Primitive::meta_ExecutionTime.min() = 1;
		Primitive::meta_ExecutionTime.max() = 1;
		Primitive::meta_ExecutionTime.nonpersistent() = false;
		Primitive::meta_ExecutionTime.registry() = false;
		Primitive::meta_ExecutionTime.ordered() = false;
		Primitive::meta_ExecutionTime.visibility() = "public";
		Primitive::meta_ExecutionTime.defvalue() = vector<string>();
		Primitive::meta_Period.name() = "Period";
		Primitive::meta_Period.type() = "Integer";
		Primitive::meta_Period.min() = 1;
		Primitive::meta_Period.max() = 1;
		Primitive::meta_Period.nonpersistent() = false;
		Primitive::meta_Period.registry() = false;
		Primitive::meta_Period.ordered() = false;
		Primitive::meta_Period.visibility() = "public";
		Primitive::meta_Period.defvalue() = vector<string>();
		vector<string> TriggerPort_TriggerType_dva;
		TriggerPort_TriggerType_dva.push_back("rising");
		TriggerPort::meta_TriggerType.name() = "TriggerType";
		TriggerPort::meta_TriggerType.type() = "String";
		TriggerPort::meta_TriggerType.min() = 1;
		TriggerPort::meta_TriggerType.max() = 1;
		TriggerPort::meta_TriggerType.nonpersistent() = false;
		TriggerPort::meta_TriggerType.registry() = false;
		TriggerPort::meta_TriggerType.ordered() = false;
		TriggerPort::meta_TriggerType.visibility() = "public";
		TriggerPort::meta_TriggerType.defvalue() = TriggerPort_TriggerType_dva;
		Parameter::meta_Value.name() = "Value";
		Parameter::meta_Value.type() = "String";
		Parameter::meta_Value.min() = 1;
		Parameter::meta_Value.max() = 1;
		Parameter::meta_Value.nonpersistent() = false;
		Parameter::meta_Value.registry() = false;
		Parameter::meta_Value.ordered() = false;
		Parameter::meta_Value.visibility() = "public";
		Parameter::meta_Value.defvalue() = vector<string>();
		Reference::meta_SourceBlock.name() = "SourceBlock";
		Reference::meta_SourceBlock.type() = "String";
		Reference::meta_SourceBlock.min() = 1;
		Reference::meta_SourceBlock.max() = 1;
		Reference::meta_SourceBlock.nonpersistent() = false;
		Reference::meta_SourceBlock.registry() = false;
		Reference::meta_SourceBlock.ordered() = false;
		Reference::meta_SourceBlock.visibility() = "public";
		Reference::meta_SourceBlock.defvalue() = vector<string>();
		Reference::meta_SourceType.name() = "SourceType";
		Reference::meta_SourceType.type() = "String";
		Reference::meta_SourceType.min() = 1;
		Reference::meta_SourceType.max() = 1;
		Reference::meta_SourceType.nonpersistent() = false;
		Reference::meta_SourceType.registry() = false;
		Reference::meta_SourceType.ordered() = false;
		Reference::meta_SourceType.visibility() = "public";
		Reference::meta_SourceType.defvalue() = vector<string>();
		Annotation::meta_Text.name() = "Text";
		Annotation::meta_Text.type() = "String";
		Annotation::meta_Text.min() = 1;
		Annotation::meta_Text.max() = 1;
		Annotation::meta_Text.nonpersistent() = false;
		Annotation::meta_Text.registry() = false;
		Annotation::meta_Text.ordered() = false;
		Annotation::meta_Text.visibility() = "public";
		Annotation::meta_Text.defvalue() = vector<string>();
		Line::meta_Name.name() = "Name";
		Line::meta_Name.type() = "String";
		Line::meta_Name.min() = 1;
		Line::meta_Name.max() = 1;
		Line::meta_Name.nonpersistent() = false;
		Line::meta_Name.registry() = false;
		Line::meta_Name.ordered() = false;
		Line::meta_Name.visibility() = "public";
		Line::meta_Name.defvalue() = vector<string>();
		InputPort::meta_Number.name() = "Number";
		InputPort::meta_Number.type() = "Integer";
		InputPort::meta_Number.min() = 1;
		InputPort::meta_Number.max() = 1;
		InputPort::meta_Number.nonpersistent() = false;
		InputPort::meta_Number.registry() = false;
		InputPort::meta_Number.ordered() = false;
		InputPort::meta_Number.visibility() = "public";
		InputPort::meta_Number.defvalue() = vector<string>();
		OutputPort::meta_Number.name() = "Number";
		OutputPort::meta_Number.type() = "Integer";
		OutputPort::meta_Number.min() = 1;
		OutputPort::meta_Number.max() = 1;
		OutputPort::meta_Number.nonpersistent() = false;
		OutputPort::meta_Number.registry() = false;
		OutputPort::meta_Number.ordered() = false;
		OutputPort::meta_Number.visibility() = "public";
		OutputPort::meta_Number.defvalue() = vector<string>();
		Dataflow::meta_name.name() = "name";
		Dataflow::meta_name.type() = "String";
		Dataflow::meta_name.min() = 0;
		Dataflow::meta_name.max() = 1;
		Dataflow::meta_name.nonpersistent() = false;
		Dataflow::meta_name.registry() = false;
		Dataflow::meta_name.ordered() = false;
		Dataflow::meta_name.visibility() = "public";
		Dataflow::meta_name.defvalue() = vector<string>();
		vector<string> EnablePort_StatesWhenEnabling_dva;
		EnablePort_StatesWhenEnabling_dva.push_back("held");
		EnablePort::meta_StatesWhenEnabling.name() = "StatesWhenEnabling";
		EnablePort::meta_StatesWhenEnabling.type() = "String";
		EnablePort::meta_StatesWhenEnabling.min() = 1;
		EnablePort::meta_StatesWhenEnabling.max() = 1;
		EnablePort::meta_StatesWhenEnabling.nonpersistent() = false;
		EnablePort::meta_StatesWhenEnabling.registry() = false;
		EnablePort::meta_StatesWhenEnabling.ordered() = false;
		EnablePort::meta_StatesWhenEnabling.visibility() = "public";
		EnablePort::meta_StatesWhenEnabling.defvalue() = EnablePort_StatesWhenEnabling_dva;
		State::meta_Name.name() = "Name";
		State::meta_Name.type() = "String";
		State::meta_Name.min() = 1;
		State::meta_Name.max() = 1;
		State::meta_Name.nonpersistent() = false;
		State::meta_Name.registry() = false;
		State::meta_Name.ordered() = false;
		State::meta_Name.visibility() = "public";
		State::meta_Name.defvalue() = vector<string>();
		vector<string> State_Decomposition_dva;
		State_Decomposition_dva.push_back("OR_STATE");
		State::meta_Decomposition.name() = "Decomposition";
		State::meta_Decomposition.type() = "String";
		State::meta_Decomposition.min() = 1;
		State::meta_Decomposition.max() = 1;
		State::meta_Decomposition.nonpersistent() = false;
		State::meta_Decomposition.registry() = false;
		State::meta_Decomposition.ordered() = false;
		State::meta_Decomposition.visibility() = "public";
		State::meta_Decomposition.defvalue() = State_Decomposition_dva;
		State::meta_EnterAction.name() = "EnterAction";
		State::meta_EnterAction.type() = "String";
		State::meta_EnterAction.min() = 1;
		State::meta_EnterAction.max() = 1;
		State::meta_EnterAction.nonpersistent() = false;
		State::meta_EnterAction.registry() = false;
		State::meta_EnterAction.ordered() = false;
		State::meta_EnterAction.visibility() = "public";
		State::meta_EnterAction.defvalue() = vector<string>();
		State::meta_DuringAction.name() = "DuringAction";
		State::meta_DuringAction.type() = "String";
		State::meta_DuringAction.min() = 1;
		State::meta_DuringAction.max() = 1;
		State::meta_DuringAction.nonpersistent() = false;
		State::meta_DuringAction.registry() = false;
		State::meta_DuringAction.ordered() = false;
		State::meta_DuringAction.visibility() = "public";
		State::meta_DuringAction.defvalue() = vector<string>();
		State::meta_ExitAction.name() = "ExitAction";
		State::meta_ExitAction.type() = "String";
		State::meta_ExitAction.min() = 1;
		State::meta_ExitAction.max() = 1;
		State::meta_ExitAction.nonpersistent() = false;
		State::meta_ExitAction.registry() = false;
		State::meta_ExitAction.ordered() = false;
		State::meta_ExitAction.visibility() = "public";
		State::meta_ExitAction.defvalue() = vector<string>();
		State::meta_Order.name() = "Order";
		State::meta_Order.type() = "String";
		State::meta_Order.min() = 1;
		State::meta_Order.max() = 1;
		State::meta_Order.nonpersistent() = false;
		State::meta_Order.registry() = false;
		State::meta_Order.ordered() = false;
		State::meta_Order.visibility() = "public";
		State::meta_Order.defvalue() = vector<string>();
		Transition::meta_Guard.name() = "Guard";
		Transition::meta_Guard.type() = "String";
		Transition::meta_Guard.min() = 1;
		Transition::meta_Guard.max() = 1;
		Transition::meta_Guard.nonpersistent() = false;
		Transition::meta_Guard.registry() = false;
		Transition::meta_Guard.ordered() = false;
		Transition::meta_Guard.visibility() = "public";
		Transition::meta_Guard.defvalue() = vector<string>();
		Transition::meta_Trigger.name() = "Trigger";
		Transition::meta_Trigger.type() = "String";
		Transition::meta_Trigger.min() = 1;
		Transition::meta_Trigger.max() = 1;
		Transition::meta_Trigger.nonpersistent() = false;
		Transition::meta_Trigger.registry() = false;
		Transition::meta_Trigger.ordered() = false;
		Transition::meta_Trigger.visibility() = "public";
		Transition::meta_Trigger.defvalue() = vector<string>();
		Transition::meta_Action.name() = "Action";
		Transition::meta_Action.type() = "String";
		Transition::meta_Action.min() = 1;
		Transition::meta_Action.max() = 1;
		Transition::meta_Action.nonpersistent() = false;
		Transition::meta_Action.registry() = false;
		Transition::meta_Action.ordered() = false;
		Transition::meta_Action.visibility() = "public";
		Transition::meta_Action.defvalue() = vector<string>();
		Transition::meta_ConditionAction.name() = "ConditionAction";
		Transition::meta_ConditionAction.type() = "String";
		Transition::meta_ConditionAction.min() = 1;
		Transition::meta_ConditionAction.max() = 1;
		Transition::meta_ConditionAction.nonpersistent() = false;
		Transition::meta_ConditionAction.registry() = false;
		Transition::meta_ConditionAction.ordered() = false;
		Transition::meta_ConditionAction.visibility() = "public";
		Transition::meta_ConditionAction.defvalue() = vector<string>();
		Transition::meta_Order.name() = "Order";
		Transition::meta_Order.type() = "String";
		Transition::meta_Order.min() = 1;
		Transition::meta_Order.max() = 1;
		Transition::meta_Order.nonpersistent() = false;
		Transition::meta_Order.registry() = false;
		Transition::meta_Order.ordered() = false;
		Transition::meta_Order.visibility() = "public";
		Transition::meta_Order.defvalue() = vector<string>();
		Event::meta_Name.name() = "Name";
		Event::meta_Name.type() = "String";
		Event::meta_Name.min() = 1;
		Event::meta_Name.max() = 1;
		Event::meta_Name.nonpersistent() = false;
		Event::meta_Name.registry() = false;
		Event::meta_Name.ordered() = false;
		Event::meta_Name.visibility() = "public";
		Event::meta_Name.defvalue() = vector<string>();
		vector<string> Event_Trigger_dva;
		Event_Trigger_dva.push_back("EITHER_EDGE_EVENT");
		Event::meta_Trigger.name() = "Trigger";
		Event::meta_Trigger.type() = "String";
		Event::meta_Trigger.min() = 1;
		Event::meta_Trigger.max() = 1;
		Event::meta_Trigger.nonpersistent() = false;
		Event::meta_Trigger.registry() = false;
		Event::meta_Trigger.ordered() = false;
		Event::meta_Trigger.visibility() = "public";
		Event::meta_Trigger.defvalue() = Event_Trigger_dva;
		vector<string> Event_Scope_dva;
		Event_Scope_dva.push_back("LOCAL_EVENT");
		Event::meta_Scope.name() = "Scope";
		Event::meta_Scope.type() = "String";
		Event::meta_Scope.min() = 1;
		Event::meta_Scope.max() = 1;
		Event::meta_Scope.nonpersistent() = false;
		Event::meta_Scope.registry() = false;
		Event::meta_Scope.ordered() = false;
		Event::meta_Scope.visibility() = "public";
		Event::meta_Scope.defvalue() = Event_Scope_dva;
		Event::meta_Description.name() = "Description";
		Event::meta_Description.type() = "String";
		Event::meta_Description.min() = 1;
		Event::meta_Description.max() = 1;
		Event::meta_Description.nonpersistent() = false;
		Event::meta_Description.registry() = false;
		Event::meta_Description.ordered() = false;
		Event::meta_Description.visibility() = "public";
		Event::meta_Description.defvalue() = vector<string>();
		Stateflow::meta_name.name() = "name";
		Stateflow::meta_name.type() = "String";
		Stateflow::meta_name.min() = 0;
		Stateflow::meta_name.max() = 1;
		Stateflow::meta_name.nonpersistent() = false;
		Stateflow::meta_name.registry() = false;
		Stateflow::meta_name.ordered() = false;
		Stateflow::meta_name.visibility() = "public";
		Stateflow::meta_name.defvalue() = vector<string>();
		Data::meta_ArrayFirstIndex.name() = "ArrayFirstIndex";
		Data::meta_ArrayFirstIndex.type() = "Integer";
		Data::meta_ArrayFirstIndex.min() = 1;
		Data::meta_ArrayFirstIndex.max() = 1;
		Data::meta_ArrayFirstIndex.nonpersistent() = false;
		Data::meta_ArrayFirstIndex.registry() = false;
		Data::meta_ArrayFirstIndex.ordered() = false;
		Data::meta_ArrayFirstIndex.visibility() = "public";
		Data::meta_ArrayFirstIndex.defvalue() = vector<string>();
		Data::meta_ArraySize.name() = "ArraySize";
		Data::meta_ArraySize.type() = "Integer";
		Data::meta_ArraySize.min() = 1;
		Data::meta_ArraySize.max() = 1;
		Data::meta_ArraySize.nonpersistent() = false;
		Data::meta_ArraySize.registry() = false;
		Data::meta_ArraySize.ordered() = false;
		Data::meta_ArraySize.visibility() = "public";
		Data::meta_ArraySize.defvalue() = vector<string>();
		Data::meta_InitialValue.name() = "InitialValue";
		Data::meta_InitialValue.type() = "String";
		Data::meta_InitialValue.min() = 1;
		Data::meta_InitialValue.max() = 1;
		Data::meta_InitialValue.nonpersistent() = false;
		Data::meta_InitialValue.registry() = false;
		Data::meta_InitialValue.ordered() = false;
		Data::meta_InitialValue.visibility() = "public";
		Data::meta_InitialValue.defvalue() = vector<string>();
		Data::meta_Min.name() = "Min";
		Data::meta_Min.type() = "String";
		Data::meta_Min.min() = 1;
		Data::meta_Min.max() = 1;
		Data::meta_Min.nonpersistent() = false;
		Data::meta_Min.registry() = false;
		Data::meta_Min.ordered() = false;
		Data::meta_Min.visibility() = "public";
		Data::meta_Min.defvalue() = vector<string>();
		Data::meta_Max.name() = "Max";
		Data::meta_Max.type() = "String";
		Data::meta_Max.min() = 1;
		Data::meta_Max.max() = 1;
		Data::meta_Max.nonpersistent() = false;
		Data::meta_Max.registry() = false;
		Data::meta_Max.ordered() = false;
		Data::meta_Max.visibility() = "public";
		Data::meta_Max.defvalue() = vector<string>();
		Data::meta_Units.name() = "Units";
		Data::meta_Units.type() = "String";
		Data::meta_Units.min() = 1;
		Data::meta_Units.max() = 1;
		Data::meta_Units.nonpersistent() = false;
		Data::meta_Units.registry() = false;
		Data::meta_Units.ordered() = false;
		Data::meta_Units.visibility() = "public";
		Data::meta_Units.defvalue() = vector<string>();
		Data::meta_DataType.name() = "DataType";
		Data::meta_DataType.type() = "String";
		Data::meta_DataType.min() = 1;
		Data::meta_DataType.max() = 1;
		Data::meta_DataType.nonpersistent() = false;
		Data::meta_DataType.registry() = false;
		Data::meta_DataType.ordered() = false;
		Data::meta_DataType.visibility() = "public";
		Data::meta_DataType.defvalue() = vector<string>();
		Data::meta_Name.name() = "Name";
		Data::meta_Name.type() = "String";
		Data::meta_Name.min() = 1;
		Data::meta_Name.max() = 1;
		Data::meta_Name.nonpersistent() = false;
		Data::meta_Name.registry() = false;
		Data::meta_Name.ordered() = false;
		Data::meta_Name.visibility() = "public";
		Data::meta_Name.defvalue() = vector<string>();
		vector<string> Data_Scope_dva;
		Data_Scope_dva.push_back("LOCAL_DATA");
		Data::meta_Scope.name() = "Scope";
		Data::meta_Scope.type() = "String";
		Data::meta_Scope.min() = 1;
		Data::meta_Scope.max() = 1;
		Data::meta_Scope.nonpersistent() = false;
		Data::meta_Scope.registry() = false;
		Data::meta_Scope.ordered() = false;
		Data::meta_Scope.visibility() = "public";
		Data::meta_Scope.defvalue() = Data_Scope_dva;
		Data::meta_Description.name() = "Description";
		Data::meta_Description.type() = "String";
		Data::meta_Description.min() = 1;
		Data::meta_Description.max() = 1;
		Data::meta_Description.nonpersistent() = false;
		Data::meta_Description.registry() = false;
		Data::meta_Description.ordered() = false;
		Data::meta_Description.visibility() = "public";
		Data::meta_Description.defvalue() = vector<string>();
		RTConstraint::meta_Latency.name() = "Latency";
		RTConstraint::meta_Latency.type() = "Integer";
		RTConstraint::meta_Latency.min() = 1;
		RTConstraint::meta_Latency.max() = 1;
		RTConstraint::meta_Latency.nonpersistent() = false;
		RTConstraint::meta_Latency.registry() = false;
		RTConstraint::meta_Latency.ordered() = false;
		RTConstraint::meta_Latency.visibility() = "public";
		RTConstraint::meta_Latency.defvalue() = vector<string>();
		ComponentModels::meta_name.name() = "name";
		ComponentModels::meta_name.type() = "String";
		ComponentModels::meta_name.min() = 0;
		ComponentModels::meta_name.max() = 1;
		ComponentModels::meta_name.nonpersistent() = false;
		ComponentModels::meta_name.registry() = false;
		ComponentModels::meta_name.ordered() = false;
		ComponentModels::meta_name.visibility() = "public";
		ComponentModels::meta_name.defvalue() = vector<string>();
		CPort::meta_Min.name() = "Min";
		CPort::meta_Min.type() = "Integer";
		CPort::meta_Min.min() = 1;
		CPort::meta_Min.max() = 1;
		CPort::meta_Min.nonpersistent() = false;
		CPort::meta_Min.registry() = false;
		CPort::meta_Min.ordered() = false;
		CPort::meta_Min.visibility() = "public";
		CPort::meta_Min.defvalue() = vector<string>();
		CPort::meta_Max.name() = "Max";
		CPort::meta_Max.type() = "Integer";
		CPort::meta_Max.min() = 1;
		CPort::meta_Max.max() = 1;
		CPort::meta_Max.nonpersistent() = false;
		CPort::meta_Max.registry() = false;
		CPort::meta_Max.ordered() = false;
		CPort::meta_Max.visibility() = "public";
		CPort::meta_Max.defvalue() = vector<string>();
		CPort::meta_CName.name() = "CName";
		CPort::meta_CName.type() = "String";
		CPort::meta_CName.min() = 1;
		CPort::meta_CName.max() = 1;
		CPort::meta_CName.nonpersistent() = false;
		CPort::meta_CName.registry() = false;
		CPort::meta_CName.ordered() = false;
		CPort::meta_CName.visibility() = "public";
		CPort::meta_CName.defvalue() = vector<string>();
		CPort::meta_DataOffset.name() = "DataOffset";
		CPort::meta_DataOffset.type() = "Real";
		CPort::meta_DataOffset.min() = 1;
		CPort::meta_DataOffset.max() = 1;
		CPort::meta_DataOffset.nonpersistent() = false;
		CPort::meta_DataOffset.registry() = false;
		CPort::meta_DataOffset.ordered() = false;
		CPort::meta_DataOffset.visibility() = "public";
		CPort::meta_DataOffset.defvalue() = vector<string>();
		vector<string> CPort_DataScale_dva;
		CPort_DataScale_dva.push_back("1");
		CPort::meta_DataScale.name() = "DataScale";
		CPort::meta_DataScale.type() = "Real";
		CPort::meta_DataScale.min() = 1;
		CPort::meta_DataScale.max() = 1;
		CPort::meta_DataScale.nonpersistent() = false;
		CPort::meta_DataScale.registry() = false;
		CPort::meta_DataScale.ordered() = false;
		CPort::meta_DataScale.visibility() = "public";
		CPort::meta_DataScale.defvalue() = CPort_DataScale_dva;
		CPort::meta_DataInit.name() = "DataInit";
		CPort::meta_DataInit.type() = "String";
		CPort::meta_DataInit.min() = 1;
		CPort::meta_DataInit.max() = 1;
		CPort::meta_DataInit.nonpersistent() = false;
		CPort::meta_DataInit.registry() = false;
		CPort::meta_DataInit.ordered() = false;
		CPort::meta_DataInit.visibility() = "public";
		CPort::meta_DataInit.defvalue() = vector<string>();
		vector<string> CPort_DataSign_dva;
		CPort_DataSign_dva.push_back("false");
		CPort::meta_DataSign.name() = "DataSign";
		CPort::meta_DataSign.type() = "Boolean";
		CPort::meta_DataSign.min() = 1;
		CPort::meta_DataSign.max() = 1;
		CPort::meta_DataSign.nonpersistent() = false;
		CPort::meta_DataSign.registry() = false;
		CPort::meta_DataSign.ordered() = false;
		CPort::meta_DataSign.visibility() = "public";
		CPort::meta_DataSign.defvalue() = CPort_DataSign_dva;
		CPort::meta_DataSize.name() = "DataSize";
		CPort::meta_DataSize.type() = "String";
		CPort::meta_DataSize.min() = 1;
		CPort::meta_DataSize.max() = 1;
		CPort::meta_DataSize.nonpersistent() = false;
		CPort::meta_DataSize.registry() = false;
		CPort::meta_DataSize.ordered() = false;
		CPort::meta_DataSize.visibility() = "public";
		CPort::meta_DataSize.defvalue() = vector<string>();
		CPort::meta_DataType.name() = "DataType";
		CPort::meta_DataType.type() = "String";
		CPort::meta_DataType.min() = 1;
		CPort::meta_DataType.max() = 1;
		CPort::meta_DataType.nonpersistent() = false;
		CPort::meta_DataType.registry() = false;
		CPort::meta_DataType.ordered() = false;
		CPort::meta_DataType.visibility() = "public";
		CPort::meta_DataType.defvalue() = vector<string>();
		Component::meta_CName.name() = "CName";
		Component::meta_CName.type() = "String";
		Component::meta_CName.min() = 1;
		Component::meta_CName.max() = 1;
		Component::meta_CName.nonpersistent() = false;
		Component::meta_CName.registry() = false;
		Component::meta_CName.ordered() = false;
		Component::meta_CName.visibility() = "public";
		Component::meta_CName.defvalue() = vector<string>();
		vector<string> COM_HandleRX_dva;
		COM_HandleRX_dva.push_back("false");
		COM::meta_HandleRX.name() = "HandleRX";
		COM::meta_HandleRX.type() = "Boolean";
		COM::meta_HandleRX.min() = 1;
		COM::meta_HandleRX.max() = 1;
		COM::meta_HandleRX.nonpersistent() = false;
		COM::meta_HandleRX.registry() = false;
		COM::meta_HandleRX.ordered() = false;
		COM::meta_HandleRX.visibility() = "public";
		COM::meta_HandleRX.defvalue() = COM_HandleRX_dva;
		vector<string> COM_HandleTX_dva;
		COM_HandleTX_dva.push_back("false");
		COM::meta_HandleTX.name() = "HandleTX";
		COM::meta_HandleTX.type() = "Boolean";
		COM::meta_HandleTX.min() = 1;
		COM::meta_HandleTX.max() = 1;
		COM::meta_HandleTX.nonpersistent() = false;
		COM::meta_HandleTX.registry() = false;
		COM::meta_HandleTX.ordered() = false;
		COM::meta_HandleTX.visibility() = "public";
		COM::meta_HandleTX.defvalue() = COM_HandleTX_dva;
		vector<string> COM_HandleCCL_dva;
		COM_HandleCCL_dva.push_back("false");
		COM::meta_HandleCCL.name() = "HandleCCL";
		COM::meta_HandleCCL.type() = "Boolean";
		COM::meta_HandleCCL.min() = 1;
		COM::meta_HandleCCL.max() = 1;
		COM::meta_HandleCCL.nonpersistent() = false;
		COM::meta_HandleCCL.registry() = false;
		COM::meta_HandleCCL.ordered() = false;
		COM::meta_HandleCCL.visibility() = "public";
		COM::meta_HandleCCL.defvalue() = COM_HandleCCL_dva;
		vector<string> COM_HandleNM_dva;
		COM_HandleNM_dva.push_back("false");
		COM::meta_HandleNM.name() = "HandleNM";
		COM::meta_HandleNM.type() = "Boolean";
		COM::meta_HandleNM.min() = 1;
		COM::meta_HandleNM.max() = 1;
		COM::meta_HandleNM.nonpersistent() = false;
		COM::meta_HandleNM.registry() = false;
		COM::meta_HandleNM.ordered() = false;
		COM::meta_HandleNM.visibility() = "public";
		COM::meta_HandleNM.defvalue() = COM_HandleNM_dva;
		COM::meta_CycleTime.name() = "CycleTime";
		COM::meta_CycleTime.type() = "String";
		COM::meta_CycleTime.min() = 1;
		COM::meta_CycleTime.max() = 1;
		COM::meta_CycleTime.nonpersistent() = false;
		COM::meta_CycleTime.registry() = false;
		COM::meta_CycleTime.ordered() = false;
		COM::meta_CycleTime.visibility() = "public";
		COM::meta_CycleTime.defvalue() = vector<string>();
		vector<string> COM_GenerateTask_dva;
		COM_GenerateTask_dva.push_back("false");
		COM::meta_GenerateTask.name() = "GenerateTask";
		COM::meta_GenerateTask.type() = "Boolean";
		COM::meta_GenerateTask.min() = 1;
		COM::meta_GenerateTask.max() = 1;
		COM::meta_GenerateTask.nonpersistent() = false;
		COM::meta_GenerateTask.registry() = false;
		COM::meta_GenerateTask.ordered() = false;
		COM::meta_GenerateTask.visibility() = "public";
		COM::meta_GenerateTask.defvalue() = COM_GenerateTask_dva;
		FirmwareModule::meta_EventPublished.name() = "EventPublished";
		FirmwareModule::meta_EventPublished.type() = "String";
		FirmwareModule::meta_EventPublished.min() = 1;
		FirmwareModule::meta_EventPublished.max() = 1;
		FirmwareModule::meta_EventPublished.nonpersistent() = false;
		FirmwareModule::meta_EventPublished.registry() = false;
		FirmwareModule::meta_EventPublished.ordered() = false;
		FirmwareModule::meta_EventPublished.visibility() = "public";
		FirmwareModule::meta_EventPublished.defvalue() = vector<string>();
		FirmwareModule::meta_WriteAccessor.name() = "WriteAccessor";
		FirmwareModule::meta_WriteAccessor.type() = "String";
		FirmwareModule::meta_WriteAccessor.min() = 1;
		FirmwareModule::meta_WriteAccessor.max() = 1;
		FirmwareModule::meta_WriteAccessor.nonpersistent() = false;
		FirmwareModule::meta_WriteAccessor.registry() = false;
		FirmwareModule::meta_WriteAccessor.ordered() = false;
		FirmwareModule::meta_WriteAccessor.visibility() = "public";
		FirmwareModule::meta_WriteAccessor.defvalue() = vector<string>();
		FirmwareModule::meta_ReadAccessor.name() = "ReadAccessor";
		FirmwareModule::meta_ReadAccessor.type() = "String";
		FirmwareModule::meta_ReadAccessor.min() = 1;
		FirmwareModule::meta_ReadAccessor.max() = 1;
		FirmwareModule::meta_ReadAccessor.nonpersistent() = false;
		FirmwareModule::meta_ReadAccessor.registry() = false;
		FirmwareModule::meta_ReadAccessor.ordered() = false;
		FirmwareModule::meta_ReadAccessor.visibility() = "public";
		FirmwareModule::meta_ReadAccessor.defvalue() = vector<string>();
		FirmwareModule::meta_SourceFile.name() = "SourceFile";
		FirmwareModule::meta_SourceFile.type() = "String";
		FirmwareModule::meta_SourceFile.min() = 1;
		FirmwareModule::meta_SourceFile.max() = 1;
		FirmwareModule::meta_SourceFile.nonpersistent() = false;
		FirmwareModule::meta_SourceFile.registry() = false;
		FirmwareModule::meta_SourceFile.ordered() = false;
		FirmwareModule::meta_SourceFile.visibility() = "public";
		FirmwareModule::meta_SourceFile.defvalue() = vector<string>();
		FirmwareModule::meta_ISR.name() = "ISR";
		FirmwareModule::meta_ISR.type() = "String";
		FirmwareModule::meta_ISR.min() = 1;
		FirmwareModule::meta_ISR.max() = 1;
		FirmwareModule::meta_ISR.nonpersistent() = false;
		FirmwareModule::meta_ISR.registry() = false;
		FirmwareModule::meta_ISR.ordered() = false;
		FirmwareModule::meta_ISR.visibility() = "public";
		FirmwareModule::meta_ISR.defvalue() = vector<string>();
		FirmwareModule::meta_LibraryFile.name() = "LibraryFile";
		FirmwareModule::meta_LibraryFile.type() = "String";
		FirmwareModule::meta_LibraryFile.min() = 1;
		FirmwareModule::meta_LibraryFile.max() = 1;
		FirmwareModule::meta_LibraryFile.nonpersistent() = false;
		FirmwareModule::meta_LibraryFile.registry() = false;
		FirmwareModule::meta_LibraryFile.ordered() = false;
		FirmwareModule::meta_LibraryFile.visibility() = "public";
		FirmwareModule::meta_LibraryFile.defvalue() = vector<string>();
		vector<string> FirmwareModule_OSBinding_dva;
		FirmwareModule_OSBinding_dva.push_back("Library");
		FirmwareModule::meta_OSBinding.name() = "OSBinding";
		FirmwareModule::meta_OSBinding.type() = "String";
		FirmwareModule::meta_OSBinding.min() = 1;
		FirmwareModule::meta_OSBinding.max() = 1;
		FirmwareModule::meta_OSBinding.nonpersistent() = false;
		FirmwareModule::meta_OSBinding.registry() = false;
		FirmwareModule::meta_OSBinding.ordered() = false;
		FirmwareModule::meta_OSBinding.visibility() = "public";
		FirmwareModule::meta_OSBinding.defvalue() = FirmwareModule_OSBinding_dva;
		OS::meta_Compiler.name() = "Compiler";
		OS::meta_Compiler.type() = "String";
		OS::meta_Compiler.min() = 1;
		OS::meta_Compiler.max() = 1;
		OS::meta_Compiler.nonpersistent() = false;
		OS::meta_Compiler.registry() = false;
		OS::meta_Compiler.ordered() = false;
		OS::meta_Compiler.visibility() = "public";
		OS::meta_Compiler.defvalue() = vector<string>();
		vector<string> OS_Conformance_dva;
		OS_Conformance_dva.push_back("AUTO");
		OS::meta_Conformance.name() = "Conformance";
		OS::meta_Conformance.type() = "String";
		OS::meta_Conformance.min() = 1;
		OS::meta_Conformance.max() = 1;
		OS::meta_Conformance.nonpersistent() = false;
		OS::meta_Conformance.registry() = false;
		OS::meta_Conformance.ordered() = false;
		OS::meta_Conformance.visibility() = "public";
		OS::meta_Conformance.defvalue() = OS_Conformance_dva;
		vector<string> OS_Schedule_dva;
		OS_Schedule_dva.push_back("AUTO");
		OS::meta_Schedule.name() = "Schedule";
		OS::meta_Schedule.type() = "String";
		OS::meta_Schedule.min() = 1;
		OS::meta_Schedule.max() = 1;
		OS::meta_Schedule.nonpersistent() = false;
		OS::meta_Schedule.registry() = false;
		OS::meta_Schedule.ordered() = false;
		OS::meta_Schedule.visibility() = "public";
		OS::meta_Schedule.defvalue() = OS_Schedule_dva;
		OS::meta_TickTime.name() = "TickTime";
		OS::meta_TickTime.type() = "Integer";
		OS::meta_TickTime.min() = 1;
		OS::meta_TickTime.max() = 1;
		OS::meta_TickTime.nonpersistent() = false;
		OS::meta_TickTime.registry() = false;
		OS::meta_TickTime.ordered() = false;
		OS::meta_TickTime.visibility() = "public";
		OS::meta_TickTime.defvalue() = vector<string>();
		vector<string> OS_Status_dva;
		OS_Status_dva.push_back("EXTENDED");
		OS::meta_Status.name() = "Status";
		OS::meta_Status.type() = "String";
		OS::meta_Status.min() = 1;
		OS::meta_Status.max() = 1;
		OS::meta_Status.nonpersistent() = false;
		OS::meta_Status.registry() = false;
		OS::meta_Status.ordered() = false;
		OS::meta_Status.visibility() = "public";
		OS::meta_Status.defvalue() = OS_Status_dva;
		vector<string> Bus_NM_dva;
		Bus_NM_dva.push_back("false");
		Bus::meta_NM.name() = "NM";
		Bus::meta_NM.type() = "Boolean";
		Bus::meta_NM.min() = 1;
		Bus::meta_NM.max() = 1;
		Bus::meta_NM.nonpersistent() = false;
		Bus::meta_NM.registry() = false;
		Bus::meta_NM.ordered() = false;
		Bus::meta_NM.visibility() = "public";
		Bus::meta_NM.defvalue() = Bus_NM_dva;
		Bus::meta_CName.name() = "CName";
		Bus::meta_CName.type() = "String";
		Bus::meta_CName.min() = 1;
		Bus::meta_CName.max() = 1;
		Bus::meta_CName.nonpersistent() = false;
		Bus::meta_CName.registry() = false;
		Bus::meta_CName.ordered() = false;
		Bus::meta_CName.visibility() = "public";
		Bus::meta_CName.defvalue() = vector<string>();
		Bus::meta_Medium.name() = "Medium";
		Bus::meta_Medium.type() = "String";
		Bus::meta_Medium.min() = 1;
		Bus::meta_Medium.max() = 1;
		Bus::meta_Medium.nonpersistent() = false;
		Bus::meta_Medium.registry() = false;
		Bus::meta_Medium.ordered() = false;
		Bus::meta_Medium.visibility() = "public";
		Bus::meta_Medium.defvalue() = vector<string>();
		Bus::meta_FrameSize.name() = "FrameSize";
		Bus::meta_FrameSize.type() = "Integer";
		Bus::meta_FrameSize.min() = 1;
		Bus::meta_FrameSize.max() = 1;
		Bus::meta_FrameSize.nonpersistent() = false;
		Bus::meta_FrameSize.registry() = false;
		Bus::meta_FrameSize.ordered() = false;
		Bus::meta_FrameSize.visibility() = "public";
		Bus::meta_FrameSize.defvalue() = vector<string>();
		Bus::meta_BitRate.name() = "BitRate";
		Bus::meta_BitRate.type() = "Integer";
		Bus::meta_BitRate.min() = 1;
		Bus::meta_BitRate.max() = 1;
		Bus::meta_BitRate.nonpersistent() = false;
		Bus::meta_BitRate.registry() = false;
		Bus::meta_BitRate.ordered() = false;
		Bus::meta_BitRate.visibility() = "public";
		Bus::meta_BitRate.defvalue() = vector<string>();
		HardwareModels::meta_name.name() = "name";
		HardwareModels::meta_name.type() = "String";
		HardwareModels::meta_name.min() = 0;
		HardwareModels::meta_name.max() = 1;
		HardwareModels::meta_name.nonpersistent() = false;
		HardwareModels::meta_name.registry() = false;
		HardwareModels::meta_name.ordered() = false;
		HardwareModels::meta_name.visibility() = "public";
		HardwareModels::meta_name.defvalue() = vector<string>();
		Channel::meta_InterruptNum.name() = "InterruptNum";
		Channel::meta_InterruptNum.type() = "String";
		Channel::meta_InterruptNum.min() = 1;
		Channel::meta_InterruptNum.max() = 1;
		Channel::meta_InterruptNum.nonpersistent() = false;
		Channel::meta_InterruptNum.registry() = false;
		Channel::meta_InterruptNum.ordered() = false;
		Channel::meta_InterruptNum.visibility() = "public";
		Channel::meta_InterruptNum.defvalue() = vector<string>();
		Channel::meta_CName.name() = "CName";
		Channel::meta_CName.type() = "String";
		Channel::meta_CName.min() = 1;
		Channel::meta_CName.max() = 1;
		Channel::meta_CName.nonpersistent() = false;
		Channel::meta_CName.registry() = false;
		Channel::meta_CName.ordered() = false;
		Channel::meta_CName.visibility() = "public";
		Channel::meta_CName.defvalue() = vector<string>();
		ECU::meta_Simulator.name() = "Simulator";
		ECU::meta_Simulator.type() = "String";
		ECU::meta_Simulator.min() = 1;
		ECU::meta_Simulator.max() = 1;
		ECU::meta_Simulator.nonpersistent() = false;
		ECU::meta_Simulator.registry() = false;
		ECU::meta_Simulator.ordered() = false;
		ECU::meta_Simulator.visibility() = "public";
		ECU::meta_Simulator.defvalue() = vector<string>();
		ECU::meta_CName.name() = "CName";
		ECU::meta_CName.type() = "String";
		ECU::meta_CName.min() = 1;
		ECU::meta_CName.max() = 1;
		ECU::meta_CName.nonpersistent() = false;
		ECU::meta_CName.registry() = false;
		ECU::meta_CName.ordered() = false;
		ECU::meta_CName.visibility() = "public";
		ECU::meta_CName.defvalue() = vector<string>();
		ECU::meta_ROM.name() = "ROM";
		ECU::meta_ROM.type() = "Integer";
		ECU::meta_ROM.min() = 1;
		ECU::meta_ROM.max() = 1;
		ECU::meta_ROM.nonpersistent() = false;
		ECU::meta_ROM.registry() = false;
		ECU::meta_ROM.ordered() = false;
		ECU::meta_ROM.visibility() = "public";
		ECU::meta_ROM.defvalue() = vector<string>();
		ECU::meta_RAM.name() = "RAM";
		ECU::meta_RAM.type() = "Integer";
		ECU::meta_RAM.min() = 1;
		ECU::meta_RAM.max() = 1;
		ECU::meta_RAM.nonpersistent() = false;
		ECU::meta_RAM.registry() = false;
		ECU::meta_RAM.ordered() = false;
		ECU::meta_RAM.visibility() = "public";
		ECU::meta_RAM.defvalue() = vector<string>();
		ECU::meta_Speed.name() = "Speed";
		ECU::meta_Speed.type() = "Integer";
		ECU::meta_Speed.min() = 1;
		ECU::meta_Speed.max() = 1;
		ECU::meta_Speed.nonpersistent() = false;
		ECU::meta_Speed.registry() = false;
		ECU::meta_Speed.ordered() = false;
		ECU::meta_Speed.visibility() = "public";
		ECU::meta_Speed.defvalue() = vector<string>();
		ECU::meta_CPU.name() = "CPU";
		ECU::meta_CPU.type() = "String";
		ECU::meta_CPU.min() = 1;
		ECU::meta_CPU.max() = 1;
		ECU::meta_CPU.nonpersistent() = false;
		ECU::meta_CPU.registry() = false;
		ECU::meta_CPU.ordered() = false;
		ECU::meta_CPU.visibility() = "public";
		ECU::meta_CPU.defvalue() = vector<string>();
		BusMessage::meta_CycleTime.name() = "CycleTime";
		BusMessage::meta_CycleTime.type() = "Integer";
		BusMessage::meta_CycleTime.min() = 1;
		BusMessage::meta_CycleTime.max() = 1;
		BusMessage::meta_CycleTime.nonpersistent() = false;
		BusMessage::meta_CycleTime.registry() = false;
		BusMessage::meta_CycleTime.ordered() = false;
		BusMessage::meta_CycleTime.visibility() = "public";
		BusMessage::meta_CycleTime.defvalue() = vector<string>();
		BusMessage::meta_CName.name() = "CName";
		BusMessage::meta_CName.type() = "String";
		BusMessage::meta_CName.min() = 1;
		BusMessage::meta_CName.max() = 1;
		BusMessage::meta_CName.nonpersistent() = false;
		BusMessage::meta_CName.registry() = false;
		BusMessage::meta_CName.ordered() = false;
		BusMessage::meta_CName.visibility() = "public";
		BusMessage::meta_CName.defvalue() = vector<string>();
		BusMessage::meta_SendType.name() = "SendType";
		BusMessage::meta_SendType.type() = "String";
		BusMessage::meta_SendType.min() = 1;
		BusMessage::meta_SendType.max() = 1;
		BusMessage::meta_SendType.nonpersistent() = false;
		BusMessage::meta_SendType.registry() = false;
		BusMessage::meta_SendType.ordered() = false;
		BusMessage::meta_SendType.visibility() = "public";
		BusMessage::meta_SendType.defvalue() = vector<string>();
		BusMessage::meta_Size.name() = "Size";
		BusMessage::meta_Size.type() = "String";
		BusMessage::meta_Size.min() = 1;
		BusMessage::meta_Size.max() = 1;
		BusMessage::meta_Size.nonpersistent() = false;
		BusMessage::meta_Size.registry() = false;
		BusMessage::meta_Size.ordered() = false;
		BusMessage::meta_Size.visibility() = "public";
		BusMessage::meta_Size.defvalue() = vector<string>();
		BusMessage::meta_ID.name() = "ID";
		BusMessage::meta_ID.type() = "String";
		BusMessage::meta_ID.min() = 1;
		BusMessage::meta_ID.max() = 1;
		BusMessage::meta_ID.nonpersistent() = false;
		BusMessage::meta_ID.registry() = false;
		BusMessage::meta_ID.ordered() = false;
		BusMessage::meta_ID.visibility() = "public";
		BusMessage::meta_ID.defvalue() = vector<string>();
		Task::meta_CycleTime.name() = "CycleTime";
		Task::meta_CycleTime.type() = "Integer";
		Task::meta_CycleTime.min() = 1;
		Task::meta_CycleTime.max() = 1;
		Task::meta_CycleTime.nonpersistent() = false;
		Task::meta_CycleTime.registry() = false;
		Task::meta_CycleTime.ordered() = false;
		Task::meta_CycleTime.visibility() = "public";
		Task::meta_CycleTime.defvalue() = vector<string>();
		vector<string> Task_Activation_dva;
		Task_Activation_dva.push_back("1");
		Task::meta_Activation.name() = "Activation";
		Task::meta_Activation.type() = "Integer";
		Task::meta_Activation.min() = 1;
		Task::meta_Activation.max() = 1;
		Task::meta_Activation.nonpersistent() = false;
		Task::meta_Activation.registry() = false;
		Task::meta_Activation.ordered() = false;
		Task::meta_Activation.visibility() = "public";
		Task::meta_Activation.defvalue() = Task_Activation_dva;
		vector<string> Task_Cyclic_dva;
		Task_Cyclic_dva.push_back("false");
		Task::meta_Cyclic.name() = "Cyclic";
		Task::meta_Cyclic.type() = "Boolean";
		Task::meta_Cyclic.min() = 1;
		Task::meta_Cyclic.max() = 1;
		Task::meta_Cyclic.nonpersistent() = false;
		Task::meta_Cyclic.registry() = false;
		Task::meta_Cyclic.ordered() = false;
		Task::meta_Cyclic.visibility() = "public";
		Task::meta_Cyclic.defvalue() = Task_Cyclic_dva;
		vector<string> Task_Type_dva;
		Task_Type_dva.push_back("AUTO");
		Task::meta_Type.name() = "Type";
		Task::meta_Type.type() = "String";
		Task::meta_Type.min() = 1;
		Task::meta_Type.max() = 1;
		Task::meta_Type.nonpersistent() = false;
		Task::meta_Type.registry() = false;
		Task::meta_Type.ordered() = false;
		Task::meta_Type.visibility() = "public";
		Task::meta_Type.defvalue() = Task_Type_dva;
		vector<string> Task_Preemption_dva;
		Task_Preemption_dva.push_back("FULL");
		Task::meta_Preemption.name() = "Preemption";
		Task::meta_Preemption.type() = "String";
		Task::meta_Preemption.min() = 1;
		Task::meta_Preemption.max() = 1;
		Task::meta_Preemption.nonpersistent() = false;
		Task::meta_Preemption.registry() = false;
		Task::meta_Preemption.ordered() = false;
		Task::meta_Preemption.visibility() = "public";
		Task::meta_Preemption.defvalue() = Task_Preemption_dva;
		Task::meta_Comment.name() = "Comment";
		Task::meta_Comment.type() = "String";
		Task::meta_Comment.min() = 1;
		Task::meta_Comment.max() = 1;
		Task::meta_Comment.nonpersistent() = false;
		Task::meta_Comment.registry() = false;
		Task::meta_Comment.ordered() = false;
		Task::meta_Comment.visibility() = "public";
		Task::meta_Comment.defvalue() = vector<string>();
		vector<string> Task_AutoStart_dva;
		Task_AutoStart_dva.push_back("true");
		Task::meta_AutoStart.name() = "AutoStart";
		Task::meta_AutoStart.type() = "Boolean";
		Task::meta_AutoStart.min() = 1;
		Task::meta_AutoStart.max() = 1;
		Task::meta_AutoStart.nonpersistent() = false;
		Task::meta_AutoStart.registry() = false;
		Task::meta_AutoStart.ordered() = false;
		Task::meta_AutoStart.visibility() = "public";
		Task::meta_AutoStart.defvalue() = Task_AutoStart_dva;
		Task::meta_Priority.name() = "Priority";
		Task::meta_Priority.type() = "Integer";
		Task::meta_Priority.min() = 1;
		Task::meta_Priority.max() = 1;
		Task::meta_Priority.nonpersistent() = false;
		Task::meta_Priority.registry() = false;
		Task::meta_Priority.ordered() = false;
		Task::meta_Priority.visibility() = "public";
		Task::meta_Priority.defvalue() = vector<string>();
		CommMapping::meta_StartBit.name() = "StartBit";
		CommMapping::meta_StartBit.type() = "String";
		CommMapping::meta_StartBit.min() = 1;
		CommMapping::meta_StartBit.max() = 1;
		CommMapping::meta_StartBit.nonpersistent() = false;
		CommMapping::meta_StartBit.registry() = false;
		CommMapping::meta_StartBit.ordered() = false;
		CommMapping::meta_StartBit.visibility() = "public";
		CommMapping::meta_StartBit.defvalue() = vector<string>();
		CommMapping::meta_NumBits.name() = "NumBits";
		CommMapping::meta_NumBits.type() = "String";
		CommMapping::meta_NumBits.min() = 1;
		CommMapping::meta_NumBits.max() = 1;
		CommMapping::meta_NumBits.nonpersistent() = false;
		CommMapping::meta_NumBits.registry() = false;
		CommMapping::meta_NumBits.ordered() = false;
		CommMapping::meta_NumBits.visibility() = "public";
		CommMapping::meta_NumBits.defvalue() = vector<string>();
		RootFolder::meta_name.name() = "name";
		RootFolder::meta_name.type() = "String";
		RootFolder::meta_name.min() = 0;
		RootFolder::meta_name.max() = 1;
		RootFolder::meta_name.nonpersistent() = false;
		RootFolder::meta_name.registry() = false;
		RootFolder::meta_name.ordered() = false;
		RootFolder::meta_name.visibility() = "public";
		RootFolder::meta_name.defvalue() = vector<string>();
		MgaObject::meta_position.name() = "position";
		MgaObject::meta_position.type() = "String";
		MgaObject::meta_position.min() = 0;
		MgaObject::meta_position.max() = 1;
		MgaObject::meta_position.nonpersistent() = false;
		MgaObject::meta_position.registry() = false;
		MgaObject::meta_position.ordered() = false;
		MgaObject::meta_position.visibility() = "public";
		MgaObject::meta_position.defvalue() = vector<string>();
		MgaObject::meta_name.name() = "name";
		MgaObject::meta_name.type() = "String";
		MgaObject::meta_name.min() = 0;
		MgaObject::meta_name.max() = 1;
		MgaObject::meta_name.nonpersistent() = false;
		MgaObject::meta_name.registry() = false;
		MgaObject::meta_name.ordered() = false;
		MgaObject::meta_name.visibility() = "public";
		MgaObject::meta_name.defvalue() = vector<string>();
		
	}
	void InitAssociation0()
	{
		Uml::Association ass = Uml::Association::Create(umldiagram);
		ass.name() = "Line";
		ass.assocClass() = Line::meta;
		Port::meta_srcLine = Uml::AssociationRole::Create(ass);
		Port::meta_srcLine.name() = "srcLine";
		Port::meta_srcLine.min() = 0;
		Port::meta_srcLine.max() = -1;
		Port::meta_srcLine.isNavigable() = true;
		Port::meta_srcLine.isPrimary() = false;
		Port::meta_srcLine.target() = Port::meta;
		Line::meta_srcLine_end_ = Port::meta_dstLine_rev = Port::meta_srcLine;
		Port::meta_dstLine = Uml::AssociationRole::Create(ass);
		Port::meta_dstLine.name() = "dstLine";
		Port::meta_dstLine.min() = 0;
		Port::meta_dstLine.max() = -1;
		Port::meta_dstLine.isNavigable() = true;
		Port::meta_dstLine.isPrimary() = false;
		Port::meta_dstLine.target() = Port::meta;
		Line::meta_dstLine_end_ = Port::meta_srcLine_rev = Port::meta_dstLine;
	};
	void InitAssociation1()
	{
		Uml::Association ass = Uml::Association::Create(umldiagram);
		ass.name() = "InPortMapping";
		ass.assocClass() = InPortMapping::meta;
		InputPort::meta_srcInPortMapping = Uml::AssociationRole::Create(ass);
		InputPort::meta_srcInPortMapping.name() = "srcInPortMapping";
		InputPort::meta_srcInPortMapping.min() = 0;
		InputPort::meta_srcInPortMapping.max() = -1;
		InputPort::meta_srcInPortMapping.isNavigable() = true;
		InputPort::meta_srcInPortMapping.isPrimary() = false;
		InputPort::meta_srcInPortMapping.target() = CInPort::meta;
		InPortMapping::meta_srcInPortMapping_end_ = CInPort::meta_dstInPortMapping_rev = InputPort::meta_srcInPortMapping;
		CInPort::meta_dstInPortMapping = Uml::AssociationRole::Create(ass);
		CInPort::meta_dstInPortMapping.name() = "dstInPortMapping";
		CInPort::meta_dstInPortMapping.min() = 0;
		CInPort::meta_dstInPortMapping.max() = -1;
		CInPort::meta_dstInPortMapping.isNavigable() = true;
		CInPort::meta_dstInPortMapping.isPrimary() = false;
		CInPort::meta_dstInPortMapping.target() = InputPort::meta;
		InPortMapping::meta_dstInPortMapping_end_ = InputPort::meta_srcInPortMapping_rev = CInPort::meta_dstInPortMapping;
	};
	void InitAssociation2()
	{
		Uml::Association ass = Uml::Association::Create(umldiagram);
		ass.name() = "OutPortMapping";
		ass.assocClass() = OutPortMapping::meta;
		COutPort::meta_srcOutPortMapping = Uml::AssociationRole::Create(ass);
		COutPort::meta_srcOutPortMapping.name() = "srcOutPortMapping";
		COutPort::meta_srcOutPortMapping.min() = 0;
		COutPort::meta_srcOutPortMapping.max() = -1;
		COutPort::meta_srcOutPortMapping.isNavigable() = true;
		COutPort::meta_srcOutPortMapping.isPrimary() = false;
		COutPort::meta_srcOutPortMapping.target() = OutputPort::meta;
		OutPortMapping::meta_srcOutPortMapping_end_ = OutputPort::meta_dstOutPortMapping_rev = COutPort::meta_srcOutPortMapping;
		OutputPort::meta_dstOutPortMapping = Uml::AssociationRole::Create(ass);
		OutputPort::meta_dstOutPortMapping.name() = "dstOutPortMapping";
		OutputPort::meta_dstOutPortMapping.min() = 0;
		OutputPort::meta_dstOutPortMapping.max() = -1;
		OutputPort::meta_dstOutPortMapping.isNavigable() = true;
		OutputPort::meta_dstOutPortMapping.isPrimary() = false;
		OutputPort::meta_dstOutPortMapping.target() = COutPort::meta;
		OutPortMapping::meta_dstOutPortMapping_end_ = COutPort::meta_srcOutPortMapping_rev = OutputPort::meta_dstOutPortMapping;
	};
	void InitAssociation3()
	{
		Uml::Association ass = Uml::Association::Create(umldiagram);
		System::meta_referedbySystemRef = Uml::AssociationRole::Create(ass);
		System::meta_referedbySystemRef.name() = "referedbySystemRef";
		System::meta_referedbySystemRef.min() = 0;
		System::meta_referedbySystemRef.max() = -1;
		System::meta_referedbySystemRef.isNavigable() = true;
		System::meta_referedbySystemRef.isPrimary() = false;
		System::meta_referedbySystemRef.target() = SystemRef::meta;
		SystemRef::meta_ref = Uml::AssociationRole::Create(ass);
		SystemRef::meta_ref.name() = "ref";
		SystemRef::meta_ref.min() = 0;
		SystemRef::meta_ref.max() = 1;
		SystemRef::meta_ref.isNavigable() = true;
		SystemRef::meta_ref.isPrimary() = false;
		SystemRef::meta_ref.target() = System::meta;
	};
	void InitAssociation4()
	{
		Uml::Association ass = Uml::Association::Create(umldiagram);
		ass.name() = "Transition";
		ass.assocClass() = Transition::meta;
		TransConnector::meta_srcTransition = Uml::AssociationRole::Create(ass);
		TransConnector::meta_srcTransition.name() = "srcTransition";
		TransConnector::meta_srcTransition.min() = 0;
		TransConnector::meta_srcTransition.max() = -1;
		TransConnector::meta_srcTransition.isNavigable() = true;
		TransConnector::meta_srcTransition.isPrimary() = false;
		TransConnector::meta_srcTransition.target() = TransConnector::meta;
		Transition::meta_srcTransition_end_ = TransConnector::meta_dstTransition_rev = TransConnector::meta_srcTransition;
		TransConnector::meta_dstTransition = Uml::AssociationRole::Create(ass);
		TransConnector::meta_dstTransition.name() = "dstTransition";
		TransConnector::meta_dstTransition.min() = 0;
		TransConnector::meta_dstTransition.max() = -1;
		TransConnector::meta_dstTransition.isNavigable() = true;
		TransConnector::meta_dstTransition.isPrimary() = false;
		TransConnector::meta_dstTransition.target() = TransConnector::meta;
		Transition::meta_dstTransition_end_ = TransConnector::meta_srcTransition_rev = TransConnector::meta_dstTransition;
	};
	void InitAssociation5()
	{
		Uml::Association ass = Uml::Association::Create(umldiagram);
		TransConnector::meta_referedbyConnectorRef = Uml::AssociationRole::Create(ass);
		TransConnector::meta_referedbyConnectorRef.name() = "referedbyConnectorRef";
		TransConnector::meta_referedbyConnectorRef.min() = 0;
		TransConnector::meta_referedbyConnectorRef.max() = -1;
		TransConnector::meta_referedbyConnectorRef.isNavigable() = true;
		TransConnector::meta_referedbyConnectorRef.isPrimary() = false;
		TransConnector::meta_referedbyConnectorRef.target() = ConnectorRef::meta;
		ConnectorRef::meta_ref = Uml::AssociationRole::Create(ass);
		ConnectorRef::meta_ref.name() = "ref";
		ConnectorRef::meta_ref.min() = 0;
		ConnectorRef::meta_ref.max() = 1;
		ConnectorRef::meta_ref.isNavigable() = true;
		ConnectorRef::meta_ref.isPrimary() = false;
		ConnectorRef::meta_ref.target() = TransConnector::meta;
	};
	void InitAssociation6()
	{
		Uml::Association ass = Uml::Association::Create(umldiagram);
		ass.name() = "RTCOut";
		ass.assocClass() = RTCOut::meta;
		RTConstraint::meta_srcRTCOut = Uml::AssociationRole::Create(ass);
		RTConstraint::meta_srcRTCOut.name() = "srcRTCOut";
		RTConstraint::meta_srcRTCOut.min() = 0;
		RTConstraint::meta_srcRTCOut.max() = -1;
		RTConstraint::meta_srcRTCOut.isNavigable() = true;
		RTConstraint::meta_srcRTCOut.isPrimary() = false;
		RTConstraint::meta_srcRTCOut.target() = CInPort::meta;
		RTCOut::meta_srcRTCOut_end_ = CInPort::meta_dstRTCOut_rev = RTConstraint::meta_srcRTCOut;
		CInPort::meta_dstRTCOut = Uml::AssociationRole::Create(ass);
		CInPort::meta_dstRTCOut.name() = "dstRTCOut";
		CInPort::meta_dstRTCOut.min() = 0;
		CInPort::meta_dstRTCOut.max() = -1;
		CInPort::meta_dstRTCOut.isNavigable() = true;
		CInPort::meta_dstRTCOut.isPrimary() = false;
		CInPort::meta_dstRTCOut.target() = RTConstraint::meta;
		RTCOut::meta_dstRTCOut_end_ = RTConstraint::meta_srcRTCOut_rev = CInPort::meta_dstRTCOut;
	};
	void InitAssociation7()
	{
		Uml::Association ass = Uml::Association::Create(umldiagram);
		ass.name() = "RTCIn";
		ass.assocClass() = RTCIn::meta;
		RTConstraint::meta_dstRTCIn = Uml::AssociationRole::Create(ass);
		RTConstraint::meta_dstRTCIn.name() = "dstRTCIn";
		RTConstraint::meta_dstRTCIn.min() = 0;
		RTConstraint::meta_dstRTCIn.max() = -1;
		RTConstraint::meta_dstRTCIn.isNavigable() = true;
		RTConstraint::meta_dstRTCIn.isPrimary() = false;
		RTConstraint::meta_dstRTCIn.target() = COutPort::meta;
		RTCIn::meta_dstRTCIn_end_ = COutPort::meta_srcRTCIn_rev = RTConstraint::meta_dstRTCIn;
		COutPort::meta_srcRTCIn = Uml::AssociationRole::Create(ass);
		COutPort::meta_srcRTCIn.name() = "srcRTCIn";
		COutPort::meta_srcRTCIn.min() = 0;
		COutPort::meta_srcRTCIn.max() = -1;
		COutPort::meta_srcRTCIn.isNavigable() = true;
		COutPort::meta_srcRTCIn.isPrimary() = false;
		COutPort::meta_srcRTCIn.target() = RTConstraint::meta;
		RTCIn::meta_srcRTCIn_end_ = RTConstraint::meta_dstRTCIn_rev = COutPort::meta_srcRTCIn;
	};
	void InitAssociation8()
	{
		Uml::Association ass = Uml::Association::Create(umldiagram);
		Component::meta_referedbyComponentShortcut = Uml::AssociationRole::Create(ass);
		Component::meta_referedbyComponentShortcut.name() = "referedbyComponentShortcut";
		Component::meta_referedbyComponentShortcut.min() = 0;
		Component::meta_referedbyComponentShortcut.max() = -1;
		Component::meta_referedbyComponentShortcut.isNavigable() = true;
		Component::meta_referedbyComponentShortcut.isPrimary() = false;
		Component::meta_referedbyComponentShortcut.target() = ComponentShortcut::meta;
		ComponentShortcut::meta_ref = Uml::AssociationRole::Create(ass);
		ComponentShortcut::meta_ref.name() = "ref";
		ComponentShortcut::meta_ref.min() = 0;
		ComponentShortcut::meta_ref.max() = 1;
		ComponentShortcut::meta_ref.isNavigable() = true;
		ComponentShortcut::meta_ref.isPrimary() = false;
		ComponentShortcut::meta_ref.target() = Component::meta;
	};
	void InitAssociation9()
	{
		Uml::Association ass = Uml::Association::Create(umldiagram);
		ass.name() = "Signal";
		ass.assocClass() = Signal::meta;
		COutPort::meta_dstSignal = Uml::AssociationRole::Create(ass);
		COutPort::meta_dstSignal.name() = "dstSignal";
		COutPort::meta_dstSignal.min() = 0;
		COutPort::meta_dstSignal.max() = -1;
		COutPort::meta_dstSignal.isNavigable() = true;
		COutPort::meta_dstSignal.isPrimary() = false;
		COutPort::meta_dstSignal.target() = CInPort::meta;
		Signal::meta_dstSignal_end_ = CInPort::meta_srcSignal_rev = COutPort::meta_dstSignal;
		CInPort::meta_srcSignal = Uml::AssociationRole::Create(ass);
		CInPort::meta_srcSignal.name() = "srcSignal";
		CInPort::meta_srcSignal.min() = 0;
		CInPort::meta_srcSignal.max() = -1;
		CInPort::meta_srcSignal.isNavigable() = true;
		CInPort::meta_srcSignal.isPrimary() = false;
		CInPort::meta_srcSignal.target() = COutPort::meta;
		Signal::meta_srcSignal_end_ = COutPort::meta_dstSignal_rev = CInPort::meta_srcSignal;
	};
	void InitAssociation10()
	{
		Uml::Association ass = Uml::Association::Create(umldiagram);
		ass.name() = "InCommMapping";
		ass.assocClass() = InCommMapping::meta;
		CPort::meta_srcInCommMapping = Uml::AssociationRole::Create(ass);
		CPort::meta_srcInCommMapping.name() = "srcInCommMapping";
		CPort::meta_srcInCommMapping.min() = 0;
		CPort::meta_srcInCommMapping.max() = -1;
		CPort::meta_srcInCommMapping.isNavigable() = true;
		CPort::meta_srcInCommMapping.isPrimary() = false;
		CPort::meta_srcInCommMapping.target() = CommDst::meta;
		InCommMapping::meta_srcInCommMapping_end_ = CommDst::meta_dstInCommMapping_rev = CPort::meta_srcInCommMapping;
		CommDst::meta_dstInCommMapping = Uml::AssociationRole::Create(ass);
		CommDst::meta_dstInCommMapping.name() = "dstInCommMapping";
		CommDst::meta_dstInCommMapping.min() = 0;
		CommDst::meta_dstInCommMapping.max() = -1;
		CommDst::meta_dstInCommMapping.isNavigable() = true;
		CommDst::meta_dstInCommMapping.isPrimary() = false;
		CommDst::meta_dstInCommMapping.target() = CPort::meta;
		InCommMapping::meta_dstInCommMapping_end_ = CPort::meta_srcInCommMapping_rev = CommDst::meta_dstInCommMapping;
	};
	void InitAssociation11()
	{
		Uml::Association ass = Uml::Association::Create(umldiagram);
		ass.name() = "OutCommMapping";
		ass.assocClass() = OutCommMapping::meta;
		CPort::meta_dstOutCommMapping = Uml::AssociationRole::Create(ass);
		CPort::meta_dstOutCommMapping.name() = "dstOutCommMapping";
		CPort::meta_dstOutCommMapping.min() = 0;
		CPort::meta_dstOutCommMapping.max() = -1;
		CPort::meta_dstOutCommMapping.isNavigable() = true;
		CPort::meta_dstOutCommMapping.isPrimary() = false;
		CPort::meta_dstOutCommMapping.target() = CommDst::meta;
		OutCommMapping::meta_dstOutCommMapping_end_ = CommDst::meta_srcOutCommMapping_rev = CPort::meta_dstOutCommMapping;
		CommDst::meta_srcOutCommMapping = Uml::AssociationRole::Create(ass);
		CommDst::meta_srcOutCommMapping.name() = "srcOutCommMapping";
		CommDst::meta_srcOutCommMapping.min() = 0;
		CommDst::meta_srcOutCommMapping.max() = -1;
		CommDst::meta_srcOutCommMapping.isNavigable() = true;
		CommDst::meta_srcOutCommMapping.isPrimary() = false;
		CommDst::meta_srcOutCommMapping.target() = CPort::meta;
		OutCommMapping::meta_srcOutCommMapping_end_ = CPort::meta_dstOutCommMapping_rev = CommDst::meta_srcOutCommMapping;
	};
	void InitAssociation12()
	{
		Uml::Association ass = Uml::Association::Create(umldiagram);
		Component::meta_referedbyComponentRef = Uml::AssociationRole::Create(ass);
		Component::meta_referedbyComponentRef.name() = "referedbyComponentRef";
		Component::meta_referedbyComponentRef.min() = 0;
		Component::meta_referedbyComponentRef.max() = -1;
		Component::meta_referedbyComponentRef.isNavigable() = true;
		Component::meta_referedbyComponentRef.isPrimary() = false;
		Component::meta_referedbyComponentRef.target() = ComponentRef::meta;
		ComponentRef::meta_ref = Uml::AssociationRole::Create(ass);
		ComponentRef::meta_ref.name() = "ref";
		ComponentRef::meta_ref.min() = 0;
		ComponentRef::meta_ref.max() = 1;
		ComponentRef::meta_ref.isNavigable() = true;
		ComponentRef::meta_ref.isPrimary() = false;
		ComponentRef::meta_ref.target() = Component::meta;
	};
	void InitAssociation13()
	{
		Uml::Association ass = Uml::Association::Create(umldiagram);
		ass.name() = "FirmwareLink";
		ass.assocClass() = FirmwareLink::meta;
		Channel::meta_srcFirmwareLink = Uml::AssociationRole::Create(ass);
		Channel::meta_srcFirmwareLink.name() = "srcFirmwareLink";
		Channel::meta_srcFirmwareLink.min() = 0;
		Channel::meta_srcFirmwareLink.max() = -1;
		Channel::meta_srcFirmwareLink.isNavigable() = true;
		Channel::meta_srcFirmwareLink.isPrimary() = false;
		Channel::meta_srcFirmwareLink.target() = FirmwareModule::meta;
		FirmwareLink::meta_srcFirmwareLink_end_ = FirmwareModule::meta_dstFirmwareLink_rev = Channel::meta_srcFirmwareLink;
		FirmwareModule::meta_dstFirmwareLink = Uml::AssociationRole::Create(ass);
		FirmwareModule::meta_dstFirmwareLink.name() = "dstFirmwareLink";
		FirmwareModule::meta_dstFirmwareLink.min() = 0;
		FirmwareModule::meta_dstFirmwareLink.max() = -1;
		FirmwareModule::meta_dstFirmwareLink.isNavigable() = true;
		FirmwareModule::meta_dstFirmwareLink.isPrimary() = false;
		FirmwareModule::meta_dstFirmwareLink.target() = Channel::meta;
		FirmwareLink::meta_dstFirmwareLink_end_ = Channel::meta_srcFirmwareLink_rev = FirmwareModule::meta_dstFirmwareLink;
	};
	void InitAssociation14()
	{
		Uml::Association ass = Uml::Association::Create(umldiagram);
		BusChan::meta_members = Uml::AssociationRole::Create(ass);
		BusChan::meta_members.name() = "members";
		BusChan::meta_members.min() = 0;
		BusChan::meta_members.max() = -1;
		BusChan::meta_members.isNavigable() = true;
		BusChan::meta_members.isPrimary() = false;
		BusChan::meta_members.target() = BusMessage::meta;
		BusMessage::meta_BusChan = Uml::AssociationRole::Create(ass);
		BusMessage::meta_BusChan.name() = "BusChan";
		BusMessage::meta_BusChan.min() = 0;
		BusMessage::meta_BusChan.max() = -1;
		BusMessage::meta_BusChan.isNavigable() = false;
		BusMessage::meta_BusChan.isPrimary() = false;
		BusMessage::meta_BusChan.target() = BusChan::meta;
	};
	void InitAssociation15()
	{
		Uml::Association ass = Uml::Association::Create(umldiagram);
		ass.name() = "Wire";
		ass.assocClass() = Wire::meta;
		CommElement::meta_srcWire = Uml::AssociationRole::Create(ass);
		CommElement::meta_srcWire.name() = "srcWire";
		CommElement::meta_srcWire.min() = 0;
		CommElement::meta_srcWire.max() = -1;
		CommElement::meta_srcWire.isNavigable() = true;
		CommElement::meta_srcWire.isPrimary() = false;
		CommElement::meta_srcWire.target() = CommElement::meta;
		Wire::meta_srcWire_end_ = CommElement::meta_dstWire_rev = CommElement::meta_srcWire;
		CommElement::meta_dstWire = Uml::AssociationRole::Create(ass);
		CommElement::meta_dstWire.name() = "dstWire";
		CommElement::meta_dstWire.min() = 0;
		CommElement::meta_dstWire.max() = -1;
		CommElement::meta_dstWire.isNavigable() = true;
		CommElement::meta_dstWire.isPrimary() = false;
		CommElement::meta_dstWire.target() = CommElement::meta;
		Wire::meta_dstWire_end_ = CommElement::meta_srcWire_rev = CommElement::meta_dstWire;
	};
	void InitAssociation16()
	{
		Uml::Association ass = Uml::Association::Create(umldiagram);
		BusMessage::meta_referedbyBusMessageRef = Uml::AssociationRole::Create(ass);
		BusMessage::meta_referedbyBusMessageRef.name() = "referedbyBusMessageRef";
		BusMessage::meta_referedbyBusMessageRef.min() = 0;
		BusMessage::meta_referedbyBusMessageRef.max() = -1;
		BusMessage::meta_referedbyBusMessageRef.isNavigable() = true;
		BusMessage::meta_referedbyBusMessageRef.isPrimary() = false;
		BusMessage::meta_referedbyBusMessageRef.target() = BusMessageRef::meta;
		BusMessageRef::meta_ref = Uml::AssociationRole::Create(ass);
		BusMessageRef::meta_ref.name() = "ref";
		BusMessageRef::meta_ref.min() = 0;
		BusMessageRef::meta_ref.max() = 1;
		BusMessageRef::meta_ref.isNavigable() = true;
		BusMessageRef::meta_ref.isPrimary() = false;
		BusMessageRef::meta_ref.target() = BusMessage::meta;
	};
	void InitAssociation17()
	{
		Uml::Association ass = Uml::Association::Create(umldiagram);
		Task::meta_members = Uml::AssociationRole::Create(ass);
		Task::meta_members.name() = "members";
		Task::meta_members.min() = 0;
		Task::meta_members.max() = -1;
		Task::meta_members.isNavigable() = true;
		Task::meta_members.isPrimary() = false;
		Task::meta_members.target() = ComponentRef::meta;
		ComponentRef::meta_Task = Uml::AssociationRole::Create(ass);
		ComponentRef::meta_Task.name() = "Task";
		ComponentRef::meta_Task.min() = 0;
		ComponentRef::meta_Task.max() = -1;
		ComponentRef::meta_Task.isNavigable() = false;
		ComponentRef::meta_Task.isPrimary() = false;
		ComponentRef::meta_Task.target() = Task::meta;
	};
	void InitAssociation18()
	{
		Uml::Association ass = Uml::Association::Create(umldiagram);
		ass.name() = "Order";
		ass.assocClass() = Order::meta;
		ComponentRef::meta_dstOrder = Uml::AssociationRole::Create(ass);
		ComponentRef::meta_dstOrder.name() = "dstOrder";
		ComponentRef::meta_dstOrder.min() = 0;
		ComponentRef::meta_dstOrder.max() = -1;
		ComponentRef::meta_dstOrder.isNavigable() = true;
		ComponentRef::meta_dstOrder.isPrimary() = false;
		ComponentRef::meta_dstOrder.target() = ComponentRef::meta;
		Order::meta_dstOrder_end_ = ComponentRef::meta_srcOrder_rev = ComponentRef::meta_dstOrder;
		ComponentRef::meta_srcOrder = Uml::AssociationRole::Create(ass);
		ComponentRef::meta_srcOrder.name() = "srcOrder";
		ComponentRef::meta_srcOrder.min() = 0;
		ComponentRef::meta_srcOrder.max() = -1;
		ComponentRef::meta_srcOrder.isNavigable() = true;
		ComponentRef::meta_srcOrder.isPrimary() = false;
		ComponentRef::meta_srcOrder.target() = ComponentRef::meta;
		Order::meta_srcOrder_end_ = ComponentRef::meta_dstOrder_rev = ComponentRef::meta_srcOrder;
	};
	void InitComposition0()
	{
		Uml::Composition comp = Uml::Composition::Create(umldiagram);
		comp.nonpersistent() =false;
		Annotation::meta_Block_parent = Uml::CompositionParentRole::Create(comp);
		Annotation::meta_Block_parent.name() = "Block_parent";
		Annotation::meta_Block_parent.isNavigable() = true;
		Annotation::meta_Block_parent.target() = Block::meta;
		Block::meta_Annotation_children = Uml::CompositionChildRole::Create(comp);
		Block::meta_Annotation_children.name() = "Annotation";
		Block::meta_Annotation_children.min() = 0;
		Block::meta_Annotation_children.max() = -1;
		Block::meta_Annotation_children.isNavigable() = true;
		Block::meta_Annotation_children.target() = Annotation::meta;
	}
	void InitComposition1()
	{
		Uml::Composition comp = Uml::Composition::Create(umldiagram);
		comp.nonpersistent() =false;
		ConnectorRef::meta_Block_parent = Uml::CompositionParentRole::Create(comp);
		ConnectorRef::meta_Block_parent.name() = "Block_parent";
		ConnectorRef::meta_Block_parent.isNavigable() = true;
		ConnectorRef::meta_Block_parent.target() = Block::meta;
		Block::meta_ConnectorRef_children = Uml::CompositionChildRole::Create(comp);
		Block::meta_ConnectorRef_children.name() = "ConnectorRef";
		Block::meta_ConnectorRef_children.min() = 0;
		Block::meta_ConnectorRef_children.max() = -1;
		Block::meta_ConnectorRef_children.isNavigable() = true;
		Block::meta_ConnectorRef_children.target() = ConnectorRef::meta;
	}
	void InitComposition2()
	{
		Uml::Composition comp = Uml::Composition::Create(umldiagram);
		comp.nonpersistent() =false;
		Line::meta_Line_Block_parent = Uml::CompositionParentRole::Create(comp);
		Line::meta_Line_Block_parent.name() = "Line_Block_parent";
		Line::meta_Line_Block_parent.isNavigable() = true;
		Line::meta_Line_Block_parent.target() = Block::meta;
		Block::meta_Line = Uml::CompositionChildRole::Create(comp);
		Block::meta_Line.name() = "Line";
		Block::meta_Line.min() = 0;
		Block::meta_Line.max() = -1;
		Block::meta_Line.isNavigable() = true;
		Block::meta_Line.target() = Line::meta;
	}
	void InitComposition3()
	{
		Uml::Composition comp = Uml::Composition::Create(umldiagram);
		comp.nonpersistent() =false;
		Port::meta_Block_parent = Uml::CompositionParentRole::Create(comp);
		Port::meta_Block_parent.name() = "Block_parent";
		Port::meta_Block_parent.isNavigable() = true;
		Port::meta_Block_parent.target() = Block::meta;
		Block::meta_Port_children = Uml::CompositionChildRole::Create(comp);
		Block::meta_Port_children.name() = "Port";
		Block::meta_Port_children.min() = 0;
		Block::meta_Port_children.max() = -1;
		Block::meta_Port_children.isNavigable() = true;
		Block::meta_Port_children.target() = Port::meta;
	}
	void InitComposition4()
	{
		Uml::Composition comp = Uml::Composition::Create(umldiagram);
		comp.nonpersistent() =false;
		Parameter::meta_Parameter_Block_parent = Uml::CompositionParentRole::Create(comp);
		Parameter::meta_Parameter_Block_parent.name() = "Parameter_Block_parent";
		Parameter::meta_Parameter_Block_parent.isNavigable() = true;
		Parameter::meta_Parameter_Block_parent.target() = Block::meta;
		Block::meta_Parameter = Uml::CompositionChildRole::Create(comp);
		Block::meta_Parameter.name() = "Parameter";
		Block::meta_Parameter.min() = 0;
		Block::meta_Parameter.max() = -1;
		Block::meta_Parameter.isNavigable() = true;
		Block::meta_Parameter.target() = Parameter::meta;
	}
	void InitComposition5()
	{
		Uml::Composition comp = Uml::Composition::Create(umldiagram);
		comp.nonpersistent() =false;
		System::meta_Dataflow_parent = Uml::CompositionParentRole::Create(comp);
		System::meta_Dataflow_parent.name() = "Dataflow_parent";
		System::meta_Dataflow_parent.isNavigable() = true;
		System::meta_Dataflow_parent.target() = Dataflow::meta;
		Dataflow::meta_System_child = Uml::CompositionChildRole::Create(comp);
		Dataflow::meta_System_child.name() = "System";
		Dataflow::meta_System_child.min() = 0;
		Dataflow::meta_System_child.max() = 1;
		Dataflow::meta_System_child.isNavigable() = true;
		Dataflow::meta_System_child.target() = System::meta;
	}
	void InitComposition6()
	{
		Uml::Composition comp = Uml::Composition::Create(umldiagram);
		comp.nonpersistent() =false;
		Block::meta_System_parent = Uml::CompositionParentRole::Create(comp);
		Block::meta_System_parent.name() = "System_parent";
		Block::meta_System_parent.isNavigable() = true;
		Block::meta_System_parent.target() = System::meta;
		System::meta_Block_children = Uml::CompositionChildRole::Create(comp);
		System::meta_Block_children.name() = "Block";
		System::meta_Block_children.min() = 0;
		System::meta_Block_children.max() = -1;
		System::meta_Block_children.isNavigable() = true;
		System::meta_Block_children.target() = Block::meta;
	}
	void InitComposition7()
	{
		Uml::Composition comp = Uml::Composition::Create(umldiagram);
		comp.nonpersistent() =false;
		Event::meta_State_parent = Uml::CompositionParentRole::Create(comp);
		Event::meta_State_parent.name() = "State_parent";
		Event::meta_State_parent.isNavigable() = true;
		Event::meta_State_parent.target() = State::meta;
		State::meta_Event_children = Uml::CompositionChildRole::Create(comp);
		State::meta_Event_children.name() = "Event";
		State::meta_Event_children.min() = 0;
		State::meta_Event_children.max() = -1;
		State::meta_Event_children.isNavigable() = true;
		State::meta_Event_children.target() = Event::meta;
	}
	void InitComposition8()
	{
		Uml::Composition comp = Uml::Composition::Create(umldiagram);
		comp.nonpersistent() =false;
		Transition::meta_Transition_State_parent = Uml::CompositionParentRole::Create(comp);
		Transition::meta_Transition_State_parent.name() = "Transition_State_parent";
		Transition::meta_Transition_State_parent.isNavigable() = true;
		Transition::meta_Transition_State_parent.target() = State::meta;
		State::meta_Transition = Uml::CompositionChildRole::Create(comp);
		State::meta_Transition.name() = "Transition";
		State::meta_Transition.min() = 0;
		State::meta_Transition.max() = -1;
		State::meta_Transition.isNavigable() = true;
		State::meta_Transition.target() = Transition::meta;
	}
	void InitComposition9()
	{
		Uml::Composition comp = Uml::Composition::Create(umldiagram);
		comp.nonpersistent() =false;
		Data::meta_State_parent = Uml::CompositionParentRole::Create(comp);
		Data::meta_State_parent.name() = "State_parent";
		Data::meta_State_parent.isNavigable() = true;
		Data::meta_State_parent.target() = State::meta;
		State::meta_Data_children = Uml::CompositionChildRole::Create(comp);
		State::meta_Data_children.name() = "Data";
		State::meta_Data_children.min() = 0;
		State::meta_Data_children.max() = -1;
		State::meta_Data_children.isNavigable() = true;
		State::meta_Data_children.target() = Data::meta;
	}
	void InitComposition10()
	{
		Uml::Composition comp = Uml::Composition::Create(umldiagram);
		comp.nonpersistent() =false;
		TransConnector::meta_State_parent = Uml::CompositionParentRole::Create(comp);
		TransConnector::meta_State_parent.name() = "State_parent";
		TransConnector::meta_State_parent.isNavigable() = true;
		TransConnector::meta_State_parent.target() = State::meta;
		State::meta_TransConnector_children = Uml::CompositionChildRole::Create(comp);
		State::meta_TransConnector_children.name() = "TransConnector";
		State::meta_TransConnector_children.min() = 0;
		State::meta_TransConnector_children.max() = -1;
		State::meta_TransConnector_children.isNavigable() = true;
		State::meta_TransConnector_children.target() = TransConnector::meta;
	}
	void InitComposition11()
	{
		Uml::Composition comp = Uml::Composition::Create(umldiagram);
		comp.nonpersistent() =false;
		State::meta_Stateflow_parent = Uml::CompositionParentRole::Create(comp);
		State::meta_Stateflow_parent.name() = "Stateflow_parent";
		State::meta_Stateflow_parent.isNavigable() = true;
		State::meta_Stateflow_parent.target() = Stateflow::meta;
		Stateflow::meta_State_children = Uml::CompositionChildRole::Create(comp);
		Stateflow::meta_State_children.name() = "State";
		Stateflow::meta_State_children.min() = 0;
		Stateflow::meta_State_children.max() = -1;
		Stateflow::meta_State_children.isNavigable() = true;
		Stateflow::meta_State_children.target() = State::meta;
	}
	void InitComposition12()
	{
		Uml::Composition comp = Uml::Composition::Create(umldiagram);
		comp.nonpersistent() =false;
		Component::meta_ComponentSheet_parent = Uml::CompositionParentRole::Create(comp);
		Component::meta_ComponentSheet_parent.name() = "ComponentSheet_parent";
		Component::meta_ComponentSheet_parent.isNavigable() = true;
		Component::meta_ComponentSheet_parent.target() = ComponentSheet::meta;
		ComponentSheet::meta_Component_children = Uml::CompositionChildRole::Create(comp);
		ComponentSheet::meta_Component_children.name() = "Component";
		ComponentSheet::meta_Component_children.min() = 0;
		ComponentSheet::meta_Component_children.max() = -1;
		ComponentSheet::meta_Component_children.isNavigable() = true;
		ComponentSheet::meta_Component_children.target() = Component::meta;
	}
	void InitComposition13()
	{
		Uml::Composition comp = Uml::Composition::Create(umldiagram);
		comp.nonpersistent() =false;
		ComponentShortcut::meta_ComponentSheet_parent = Uml::CompositionParentRole::Create(comp);
		ComponentShortcut::meta_ComponentSheet_parent.name() = "ComponentSheet_parent";
		ComponentShortcut::meta_ComponentSheet_parent.isNavigable() = true;
		ComponentShortcut::meta_ComponentSheet_parent.target() = ComponentSheet::meta;
		ComponentSheet::meta_ComponentShortcut_children = Uml::CompositionChildRole::Create(comp);
		ComponentSheet::meta_ComponentShortcut_children.name() = "ComponentShortcut";
		ComponentSheet::meta_ComponentShortcut_children.min() = 0;
		ComponentSheet::meta_ComponentShortcut_children.max() = -1;
		ComponentSheet::meta_ComponentShortcut_children.isNavigable() = true;
		ComponentSheet::meta_ComponentShortcut_children.target() = ComponentShortcut::meta;
	}
	void InitComposition14()
	{
		Uml::Composition comp = Uml::Composition::Create(umldiagram);
		comp.nonpersistent() =false;
		Signal::meta_ComponentSheet_parent = Uml::CompositionParentRole::Create(comp);
		Signal::meta_ComponentSheet_parent.name() = "ComponentSheet_parent";
		Signal::meta_ComponentSheet_parent.isNavigable() = true;
		Signal::meta_ComponentSheet_parent.target() = ComponentSheet::meta;
		ComponentSheet::meta_Signal_children = Uml::CompositionChildRole::Create(comp);
		ComponentSheet::meta_Signal_children.name() = "Signal";
		ComponentSheet::meta_Signal_children.min() = 0;
		ComponentSheet::meta_Signal_children.max() = -1;
		ComponentSheet::meta_Signal_children.isNavigable() = true;
		ComponentSheet::meta_Signal_children.target() = Signal::meta;
	}
	void InitComposition15()
	{
		Uml::Composition comp = Uml::Composition::Create(umldiagram);
		comp.nonpersistent() =false;
		ComponentSheet::meta_ComponentModels_parent = Uml::CompositionParentRole::Create(comp);
		ComponentSheet::meta_ComponentModels_parent.name() = "ComponentModels_parent";
		ComponentSheet::meta_ComponentModels_parent.isNavigable() = true;
		ComponentSheet::meta_ComponentModels_parent.target() = ComponentModels::meta;
		ComponentModels::meta_ComponentSheet_children = Uml::CompositionChildRole::Create(comp);
		ComponentModels::meta_ComponentSheet_children.name() = "ComponentSheet";
		ComponentModels::meta_ComponentSheet_children.min() = 0;
		ComponentModels::meta_ComponentSheet_children.max() = -1;
		ComponentModels::meta_ComponentSheet_children.isNavigable() = true;
		ComponentModels::meta_ComponentSheet_children.target() = ComponentSheet::meta;
	}
	void InitComposition16()
	{
		Uml::Composition comp = Uml::Composition::Create(umldiagram);
		comp.nonpersistent() =false;
		CPort::meta_Component_parent = Uml::CompositionParentRole::Create(comp);
		CPort::meta_Component_parent.name() = "Component_parent";
		CPort::meta_Component_parent.isNavigable() = true;
		CPort::meta_Component_parent.target() = Component::meta;
		Component::meta_CPort_children = Uml::CompositionChildRole::Create(comp);
		Component::meta_CPort_children.name() = "CPort";
		Component::meta_CPort_children.min() = 0;
		Component::meta_CPort_children.max() = -1;
		Component::meta_CPort_children.isNavigable() = true;
		Component::meta_CPort_children.target() = CPort::meta;
	}
	void InitComposition17()
	{
		Uml::Composition comp = Uml::Composition::Create(umldiagram);
		comp.nonpersistent() =false;
		SystemRef::meta_Component_parent = Uml::CompositionParentRole::Create(comp);
		SystemRef::meta_Component_parent.name() = "Component_parent";
		SystemRef::meta_Component_parent.isNavigable() = true;
		SystemRef::meta_Component_parent.target() = Component::meta;
		Component::meta_SystemRef_child = Uml::CompositionChildRole::Create(comp);
		Component::meta_SystemRef_child.name() = "SystemRef";
		Component::meta_SystemRef_child.min() = 0;
		Component::meta_SystemRef_child.max() = 1;
		Component::meta_SystemRef_child.isNavigable() = true;
		Component::meta_SystemRef_child.target() = SystemRef::meta;
	}
	void InitComposition18()
	{
		Uml::Composition comp = Uml::Composition::Create(umldiagram);
		comp.nonpersistent() =false;
		RTConstraint::meta_Component_parent = Uml::CompositionParentRole::Create(comp);
		RTConstraint::meta_Component_parent.name() = "Component_parent";
		RTConstraint::meta_Component_parent.isNavigable() = true;
		RTConstraint::meta_Component_parent.target() = Component::meta;
		Component::meta_RTConstraint_children = Uml::CompositionChildRole::Create(comp);
		Component::meta_RTConstraint_children.name() = "RTConstraint";
		Component::meta_RTConstraint_children.min() = 0;
		Component::meta_RTConstraint_children.max() = -1;
		Component::meta_RTConstraint_children.isNavigable() = true;
		Component::meta_RTConstraint_children.target() = RTConstraint::meta;
	}
	void InitComposition19()
	{
		Uml::Composition comp = Uml::Composition::Create(umldiagram);
		comp.nonpersistent() =false;
		RTCIn::meta_Component_parent = Uml::CompositionParentRole::Create(comp);
		RTCIn::meta_Component_parent.name() = "Component_parent";
		RTCIn::meta_Component_parent.isNavigable() = true;
		RTCIn::meta_Component_parent.target() = Component::meta;
		Component::meta_RTCIn_children = Uml::CompositionChildRole::Create(comp);
		Component::meta_RTCIn_children.name() = "RTCIn";
		Component::meta_RTCIn_children.min() = 0;
		Component::meta_RTCIn_children.max() = -1;
		Component::meta_RTCIn_children.isNavigable() = true;
		Component::meta_RTCIn_children.target() = RTCIn::meta;
	}
	void InitComposition20()
	{
		Uml::Composition comp = Uml::Composition::Create(umldiagram);
		comp.nonpersistent() =false;
		RTCOut::meta_Component_parent = Uml::CompositionParentRole::Create(comp);
		RTCOut::meta_Component_parent.name() = "Component_parent";
		RTCOut::meta_Component_parent.isNavigable() = true;
		RTCOut::meta_Component_parent.target() = Component::meta;
		Component::meta_RTCOut_children = Uml::CompositionChildRole::Create(comp);
		Component::meta_RTCOut_children.name() = "RTCOut";
		Component::meta_RTCOut_children.min() = 0;
		Component::meta_RTCOut_children.max() = -1;
		Component::meta_RTCOut_children.isNavigable() = true;
		Component::meta_RTCOut_children.target() = RTCOut::meta;
	}
	void InitComposition21()
	{
		Uml::Composition comp = Uml::Composition::Create(umldiagram);
		comp.nonpersistent() =false;
		OutPortMapping::meta_Component_parent = Uml::CompositionParentRole::Create(comp);
		OutPortMapping::meta_Component_parent.name() = "Component_parent";
		OutPortMapping::meta_Component_parent.isNavigable() = true;
		OutPortMapping::meta_Component_parent.target() = Component::meta;
		Component::meta_OutPortMapping_children = Uml::CompositionChildRole::Create(comp);
		Component::meta_OutPortMapping_children.name() = "OutPortMapping";
		Component::meta_OutPortMapping_children.min() = 0;
		Component::meta_OutPortMapping_children.max() = -1;
		Component::meta_OutPortMapping_children.isNavigable() = true;
		Component::meta_OutPortMapping_children.target() = OutPortMapping::meta;
	}
	void InitComposition22()
	{
		Uml::Composition comp = Uml::Composition::Create(umldiagram);
		comp.nonpersistent() =false;
		InPortMapping::meta_Component_parent = Uml::CompositionParentRole::Create(comp);
		InPortMapping::meta_Component_parent.name() = "Component_parent";
		InPortMapping::meta_Component_parent.isNavigable() = true;
		InPortMapping::meta_Component_parent.target() = Component::meta;
		Component::meta_InPortMapping_children = Uml::CompositionChildRole::Create(comp);
		Component::meta_InPortMapping_children.name() = "InPortMapping";
		Component::meta_InPortMapping_children.min() = 0;
		Component::meta_InPortMapping_children.max() = -1;
		Component::meta_InPortMapping_children.isNavigable() = true;
		Component::meta_InPortMapping_children.target() = InPortMapping::meta;
	}
	void InitComposition23()
	{
		Uml::Composition comp = Uml::Composition::Create(umldiagram);
		comp.nonpersistent() =false;
		HWElement::meta_HardwareSheet_parent = Uml::CompositionParentRole::Create(comp);
		HWElement::meta_HardwareSheet_parent.name() = "HardwareSheet_parent";
		HWElement::meta_HardwareSheet_parent.isNavigable() = true;
		HWElement::meta_HardwareSheet_parent.target() = HardwareSheet::meta;
		HardwareSheet::meta_HWElement_children = Uml::CompositionChildRole::Create(comp);
		HardwareSheet::meta_HWElement_children.name() = "HWElement";
		HardwareSheet::meta_HWElement_children.min() = 0;
		HardwareSheet::meta_HWElement_children.max() = -1;
		HardwareSheet::meta_HWElement_children.isNavigable() = true;
		HardwareSheet::meta_HWElement_children.target() = HWElement::meta;
	}
	void InitComposition24()
	{
		Uml::Composition comp = Uml::Composition::Create(umldiagram);
		comp.nonpersistent() =false;
		HardwareSheet::meta_HardwareModels_parent = Uml::CompositionParentRole::Create(comp);
		HardwareSheet::meta_HardwareModels_parent.name() = "HardwareModels_parent";
		HardwareSheet::meta_HardwareModels_parent.isNavigable() = true;
		HardwareSheet::meta_HardwareModels_parent.target() = HardwareModels::meta;
		HardwareModels::meta_HardwareSheet_children = Uml::CompositionChildRole::Create(comp);
		HardwareModels::meta_HardwareSheet_children.name() = "HardwareSheet";
		HardwareModels::meta_HardwareSheet_children.min() = 0;
		HardwareModels::meta_HardwareSheet_children.max() = -1;
		HardwareModels::meta_HardwareSheet_children.isNavigable() = true;
		HardwareModels::meta_HardwareSheet_children.target() = HardwareSheet::meta;
	}
	void InitComposition25()
	{
		Uml::Composition comp = Uml::Composition::Create(umldiagram);
		comp.nonpersistent() =false;
		OS::meta_ECU_parent = Uml::CompositionParentRole::Create(comp);
		OS::meta_ECU_parent.name() = "ECU_parent";
		OS::meta_ECU_parent.isNavigable() = true;
		OS::meta_ECU_parent.target() = ECU::meta;
		ECU::meta_OS_child = Uml::CompositionChildRole::Create(comp);
		ECU::meta_OS_child.name() = "OS";
		ECU::meta_OS_child.min() = 0;
		ECU::meta_OS_child.max() = 1;
		ECU::meta_OS_child.isNavigable() = true;
		ECU::meta_OS_child.target() = OS::meta;
	}
	void InitComposition26()
	{
		Uml::Composition comp = Uml::Composition::Create(umldiagram);
		comp.nonpersistent() =false;
		COM::meta_ECU_parent = Uml::CompositionParentRole::Create(comp);
		COM::meta_ECU_parent.name() = "ECU_parent";
		COM::meta_ECU_parent.isNavigable() = true;
		COM::meta_ECU_parent.target() = ECU::meta;
		ECU::meta_COM_children = Uml::CompositionChildRole::Create(comp);
		ECU::meta_COM_children.name() = "COM";
		ECU::meta_COM_children.min() = 0;
		ECU::meta_COM_children.max() = -1;
		ECU::meta_COM_children.isNavigable() = true;
		ECU::meta_COM_children.target() = COM::meta;
	}
	void InitComposition27()
	{
		Uml::Composition comp = Uml::Composition::Create(umldiagram);
		comp.nonpersistent() =false;
		Channel::meta_ECU_parent = Uml::CompositionParentRole::Create(comp);
		Channel::meta_ECU_parent.name() = "ECU_parent";
		Channel::meta_ECU_parent.isNavigable() = true;
		Channel::meta_ECU_parent.target() = ECU::meta;
		ECU::meta_Channel_children = Uml::CompositionChildRole::Create(comp);
		ECU::meta_Channel_children.name() = "Channel";
		ECU::meta_Channel_children.min() = 0;
		ECU::meta_Channel_children.max() = -1;
		ECU::meta_Channel_children.isNavigable() = true;
		ECU::meta_Channel_children.target() = Channel::meta;
	}
	void InitComposition28()
	{
		Uml::Composition comp = Uml::Composition::Create(umldiagram);
		comp.nonpersistent() =false;
		FirmwareModule::meta_ECU_parent = Uml::CompositionParentRole::Create(comp);
		FirmwareModule::meta_ECU_parent.name() = "ECU_parent";
		FirmwareModule::meta_ECU_parent.isNavigable() = true;
		FirmwareModule::meta_ECU_parent.target() = ECU::meta;
		ECU::meta_FirmwareModule_children = Uml::CompositionChildRole::Create(comp);
		ECU::meta_FirmwareModule_children.name() = "FirmwareModule";
		ECU::meta_FirmwareModule_children.min() = 0;
		ECU::meta_FirmwareModule_children.max() = -1;
		ECU::meta_FirmwareModule_children.isNavigable() = true;
		ECU::meta_FirmwareModule_children.target() = FirmwareModule::meta;
	}
	void InitComposition29()
	{
		Uml::Composition comp = Uml::Composition::Create(umldiagram);
		comp.nonpersistent() =false;
		ComponentRef::meta_ECU_parent = Uml::CompositionParentRole::Create(comp);
		ComponentRef::meta_ECU_parent.name() = "ECU_parent";
		ComponentRef::meta_ECU_parent.isNavigable() = true;
		ComponentRef::meta_ECU_parent.target() = ECU::meta;
		ECU::meta_ComponentRef_children = Uml::CompositionChildRole::Create(comp);
		ECU::meta_ComponentRef_children.name() = "ComponentRef";
		ECU::meta_ComponentRef_children.min() = 0;
		ECU::meta_ComponentRef_children.max() = -1;
		ECU::meta_ComponentRef_children.isNavigable() = true;
		ECU::meta_ComponentRef_children.target() = ComponentRef::meta;
	}
	void InitComposition30()
	{
		Uml::Composition comp = Uml::Composition::Create(umldiagram);
		comp.nonpersistent() =false;
		Task::meta_ECU_parent = Uml::CompositionParentRole::Create(comp);
		Task::meta_ECU_parent.name() = "ECU_parent";
		Task::meta_ECU_parent.isNavigable() = true;
		Task::meta_ECU_parent.target() = ECU::meta;
		ECU::meta_Task_children = Uml::CompositionChildRole::Create(comp);
		ECU::meta_Task_children.name() = "Task";
		ECU::meta_Task_children.min() = 0;
		ECU::meta_Task_children.max() = -1;
		ECU::meta_Task_children.isNavigable() = true;
		ECU::meta_Task_children.target() = Task::meta;
	}
	void InitComposition31()
	{
		Uml::Composition comp = Uml::Composition::Create(umldiagram);
		comp.nonpersistent() =false;
		CommMapping::meta_ECU_parent = Uml::CompositionParentRole::Create(comp);
		CommMapping::meta_ECU_parent.name() = "ECU_parent";
		CommMapping::meta_ECU_parent.isNavigable() = true;
		CommMapping::meta_ECU_parent.target() = ECU::meta;
		ECU::meta_CommMapping_children = Uml::CompositionChildRole::Create(comp);
		ECU::meta_CommMapping_children.name() = "CommMapping";
		ECU::meta_CommMapping_children.min() = 0;
		ECU::meta_CommMapping_children.max() = -1;
		ECU::meta_CommMapping_children.isNavigable() = true;
		ECU::meta_CommMapping_children.target() = CommMapping::meta;
	}
	void InitComposition32()
	{
		Uml::Composition comp = Uml::Composition::Create(umldiagram);
		comp.nonpersistent() =false;
		Order::meta_ECU_parent = Uml::CompositionParentRole::Create(comp);
		Order::meta_ECU_parent.name() = "ECU_parent";
		Order::meta_ECU_parent.isNavigable() = true;
		Order::meta_ECU_parent.target() = ECU::meta;
		ECU::meta_Order_children = Uml::CompositionChildRole::Create(comp);
		ECU::meta_Order_children.name() = "Order";
		ECU::meta_Order_children.min() = 0;
		ECU::meta_Order_children.max() = -1;
		ECU::meta_Order_children.isNavigable() = true;
		ECU::meta_Order_children.target() = Order::meta;
	}
	void InitComposition33()
	{
		Uml::Composition comp = Uml::Composition::Create(umldiagram);
		comp.nonpersistent() =false;
		FirmwareLink::meta_ECU_parent = Uml::CompositionParentRole::Create(comp);
		FirmwareLink::meta_ECU_parent.name() = "ECU_parent";
		FirmwareLink::meta_ECU_parent.isNavigable() = true;
		FirmwareLink::meta_ECU_parent.target() = ECU::meta;
		ECU::meta_FirmwareLink_children = Uml::CompositionChildRole::Create(comp);
		ECU::meta_FirmwareLink_children.name() = "FirmwareLink";
		ECU::meta_FirmwareLink_children.min() = 0;
		ECU::meta_FirmwareLink_children.max() = -1;
		ECU::meta_FirmwareLink_children.isNavigable() = true;
		ECU::meta_FirmwareLink_children.target() = FirmwareLink::meta;
	}
	void InitComposition34()
	{
		Uml::Composition comp = Uml::Composition::Create(umldiagram);
		comp.nonpersistent() =false;
		BusMessage::meta_ECU_parent = Uml::CompositionParentRole::Create(comp);
		BusMessage::meta_ECU_parent.name() = "ECU_parent";
		BusMessage::meta_ECU_parent.isNavigable() = true;
		BusMessage::meta_ECU_parent.target() = ECU::meta;
		ECU::meta_BusMessage_children = Uml::CompositionChildRole::Create(comp);
		ECU::meta_BusMessage_children.name() = "BusMessage";
		ECU::meta_BusMessage_children.min() = 0;
		ECU::meta_BusMessage_children.max() = -1;
		ECU::meta_BusMessage_children.isNavigable() = true;
		ECU::meta_BusMessage_children.target() = BusMessage::meta;
	}
	void InitComposition35()
	{
		Uml::Composition comp = Uml::Composition::Create(umldiagram);
		comp.nonpersistent() =false;
		BusMessageRef::meta_ECU_parent = Uml::CompositionParentRole::Create(comp);
		BusMessageRef::meta_ECU_parent.name() = "ECU_parent";
		BusMessageRef::meta_ECU_parent.isNavigable() = true;
		BusMessageRef::meta_ECU_parent.target() = ECU::meta;
		ECU::meta_BusMessageRef_children = Uml::CompositionChildRole::Create(comp);
		ECU::meta_BusMessageRef_children.name() = "BusMessageRef";
		ECU::meta_BusMessageRef_children.min() = 0;
		ECU::meta_BusMessageRef_children.max() = -1;
		ECU::meta_BusMessageRef_children.isNavigable() = true;
		ECU::meta_BusMessageRef_children.target() = BusMessageRef::meta;
	}
	void InitComposition36()
	{
		Uml::Composition comp = Uml::Composition::Create(umldiagram);
		comp.nonpersistent() =false;
		Stateflow::meta_RootFolder_parent = Uml::CompositionParentRole::Create(comp);
		Stateflow::meta_RootFolder_parent.name() = "RootFolder_parent";
		Stateflow::meta_RootFolder_parent.isNavigable() = true;
		Stateflow::meta_RootFolder_parent.target() = RootFolder::meta;
		RootFolder::meta_Stateflow_children = Uml::CompositionChildRole::Create(comp);
		RootFolder::meta_Stateflow_children.name() = "Stateflow";
		RootFolder::meta_Stateflow_children.min() = 0;
		RootFolder::meta_Stateflow_children.max() = -1;
		RootFolder::meta_Stateflow_children.isNavigable() = true;
		RootFolder::meta_Stateflow_children.target() = Stateflow::meta;
	}
	void InitComposition37()
	{
		Uml::Composition comp = Uml::Composition::Create(umldiagram);
		comp.nonpersistent() =false;
		Dataflow::meta_RootFolder_parent = Uml::CompositionParentRole::Create(comp);
		Dataflow::meta_RootFolder_parent.name() = "RootFolder_parent";
		Dataflow::meta_RootFolder_parent.isNavigable() = true;
		Dataflow::meta_RootFolder_parent.target() = RootFolder::meta;
		RootFolder::meta_Dataflow_children = Uml::CompositionChildRole::Create(comp);
		RootFolder::meta_Dataflow_children.name() = "Dataflow";
		RootFolder::meta_Dataflow_children.min() = 0;
		RootFolder::meta_Dataflow_children.max() = -1;
		RootFolder::meta_Dataflow_children.isNavigable() = true;
		RootFolder::meta_Dataflow_children.target() = Dataflow::meta;
	}
	void InitComposition38()
	{
		Uml::Composition comp = Uml::Composition::Create(umldiagram);
		comp.nonpersistent() =false;
		ComponentModels::meta_RootFolder_parent = Uml::CompositionParentRole::Create(comp);
		ComponentModels::meta_RootFolder_parent.name() = "RootFolder_parent";
		ComponentModels::meta_RootFolder_parent.isNavigable() = true;
		ComponentModels::meta_RootFolder_parent.target() = RootFolder::meta;
		RootFolder::meta_ComponentModels_children = Uml::CompositionChildRole::Create(comp);
		RootFolder::meta_ComponentModels_children.name() = "ComponentModels";
		RootFolder::meta_ComponentModels_children.min() = 0;
		RootFolder::meta_ComponentModels_children.max() = -1;
		RootFolder::meta_ComponentModels_children.isNavigable() = true;
		RootFolder::meta_ComponentModels_children.target() = ComponentModels::meta;
	}
	void InitComposition39()
	{
		Uml::Composition comp = Uml::Composition::Create(umldiagram);
		comp.nonpersistent() =false;
		HardwareModels::meta_RootFolder_parent = Uml::CompositionParentRole::Create(comp);
		HardwareModels::meta_RootFolder_parent.name() = "RootFolder_parent";
		HardwareModels::meta_RootFolder_parent.isNavigable() = true;
		HardwareModels::meta_RootFolder_parent.target() = RootFolder::meta;
		RootFolder::meta_HardwareModels_children = Uml::CompositionChildRole::Create(comp);
		RootFolder::meta_HardwareModels_children.name() = "HardwareModels";
		RootFolder::meta_HardwareModels_children.min() = 0;
		RootFolder::meta_HardwareModels_children.max() = -1;
		RootFolder::meta_HardwareModels_children.isNavigable() = true;
		RootFolder::meta_HardwareModels_children.target() = HardwareModels::meta;
	}
	void InitComposition40()
	{
		Uml::Composition comp = Uml::Composition::Create(umldiagram);
		comp.nonpersistent() =false;
		RootFolder::meta_RootFolder_parent = Uml::CompositionParentRole::Create(comp);
		RootFolder::meta_RootFolder_parent.name() = "RootFolder_parent";
		RootFolder::meta_RootFolder_parent.isNavigable() = true;
		RootFolder::meta_RootFolder_parent.target() = RootFolder::meta;
		RootFolder::meta_RootFolder_children = Uml::CompositionChildRole::Create(comp);
		RootFolder::meta_RootFolder_children.name() = "RootFolder";
		RootFolder::meta_RootFolder_children.min() = 0;
		RootFolder::meta_RootFolder_children.max() = -1;
		RootFolder::meta_RootFolder_children.isNavigable() = true;
		RootFolder::meta_RootFolder_children.target() = RootFolder::meta;
	}
	 void Initialize()
	{
		static bool first = true;
		if(!first) return;
		first = false;
		Uml::Initialize();

		ASSERT( umldiagram == Udm::null );
		UdmStatic::StaticDataNetwork * meta_dn = new UdmStatic::StaticDataNetwork(Uml::diagram);
		meta_dn->CreateNew("ECSL_DP.mem", "", Uml::Diagram::meta, Udm::CHANGES_LOST_DEFAULT);
		umldiagram = Uml::Diagram::Cast(meta_dn->GetRootObject());
		umldiagram.name() ="ECSL_DP";
		umldiagram.version() ="1.00";
		Creates();
		InitClassesAttributes();
		Uml::InitDiagram(umldiagram, "ECSL_DP", "1.00");

		InitAssociation0();
		InitAssociation1();
		InitAssociation2();
		InitAssociation3();
		InitAssociation4();
		InitAssociation5();
		InitAssociation6();
		InitAssociation7();
		InitAssociation8();
		InitAssociation9();
		InitAssociation10();
		InitAssociation11();
		InitAssociation12();
		InitAssociation13();
		InitAssociation14();
		InitAssociation15();
		InitAssociation16();
		InitAssociation17();
		InitAssociation18();
		InitComposition0();
		InitComposition1();
		InitComposition2();
		InitComposition3();
		InitComposition4();
		InitComposition5();
		InitComposition6();
		InitComposition7();
		InitComposition8();
		InitComposition9();
		InitComposition10();
		InitComposition11();
		InitComposition12();
		InitComposition13();
		InitComposition14();
		InitComposition15();
		InitComposition16();
		InitComposition17();
		InitComposition18();
		InitComposition19();
		InitComposition20();
		InitComposition21();
		InitComposition22();
		InitComposition23();
		InitComposition24();
		InitComposition25();
		InitComposition26();
		InitComposition27();
		InitComposition28();
		InitComposition29();
		InitComposition30();
		InitComposition31();
		InitComposition32();
		InitComposition33();
		InitComposition34();
		InitComposition35();
		InitComposition36();
		InitComposition37();
		InitComposition38();
		InitComposition39();
		InitComposition40();
		Block::meta.subTypes() +=  Primitive::meta;
		Block::meta.subTypes() +=  Reference::meta;
		Block::meta.subTypes() +=  System::meta;
		Port::meta.subTypes() +=  TriggerPort::meta;
		Port::meta.subTypes() +=  InputPort::meta;
		Port::meta.subTypes() +=  OutputPort::meta;
		Port::meta.subTypes() +=  EnablePort::meta;
		TransConnector::meta.subTypes() +=  State::meta;
		TransConnector::meta.subTypes() +=  History::meta;
		TransConnector::meta.subTypes() +=  TransStart::meta;
		TransConnector::meta.subTypes() +=  Junction::meta;
		TransConnector::meta.subTypes() +=  ConnectorRef::meta;
		CPort::meta.subTypes() +=  COutPort::meta;
		CPort::meta.subTypes() +=  CInPort::meta;
		CommElement::meta.subTypes() +=  Bus::meta;
		CommElement::meta.subTypes() +=  BusChan::meta;
		HWElement::meta.subTypes() +=  Wire::meta;
		HWElement::meta.subTypes() +=  Bus::meta;
		HWElement::meta.subTypes() +=  ECU::meta;
		Channel::meta.subTypes() +=  BusChan::meta;
		Channel::meta.subTypes() +=  IChan::meta;
		Channel::meta.subTypes() +=  OChan::meta;
		CommDst::meta.subTypes() +=  IChan::meta;
		CommDst::meta.subTypes() +=  OChan::meta;
		CommDst::meta.subTypes() +=  BusMessage::meta;
		CommDst::meta.subTypes() +=  BusMessageRef::meta;
		CommMapping::meta.subTypes() +=  OutCommMapping::meta;
		CommMapping::meta.subTypes() +=  InCommMapping::meta;
		MgaObject::meta.subTypes() +=  Block::meta;
		MgaObject::meta.subTypes() +=  Parameter::meta;
		MgaObject::meta.subTypes() +=  Port::meta;
		MgaObject::meta.subTypes() +=  Annotation::meta;
		MgaObject::meta.subTypes() +=  Line::meta;
		MgaObject::meta.subTypes() +=  Transition::meta;
		MgaObject::meta.subTypes() +=  Event::meta;
		MgaObject::meta.subTypes() +=  Data::meta;
		MgaObject::meta.subTypes() +=  TransConnector::meta;
		MgaObject::meta.subTypes() +=  RTConstraint::meta;
		MgaObject::meta.subTypes() +=  RTCOut::meta;
		MgaObject::meta.subTypes() +=  RTCIn::meta;
		MgaObject::meta.subTypes() +=  SystemRef::meta;
		MgaObject::meta.subTypes() +=  InPortMapping::meta;
		MgaObject::meta.subTypes() +=  ComponentShortcut::meta;
		MgaObject::meta.subTypes() +=  ComponentSheet::meta;
		MgaObject::meta.subTypes() +=  Signal::meta;
		MgaObject::meta.subTypes() +=  OutPortMapping::meta;
		MgaObject::meta.subTypes() +=  CPort::meta;
		MgaObject::meta.subTypes() +=  Component::meta;
		MgaObject::meta.subTypes() +=  COM::meta;
		MgaObject::meta.subTypes() +=  FirmwareLink::meta;
		MgaObject::meta.subTypes() +=  FirmwareModule::meta;
		MgaObject::meta.subTypes() +=  OS::meta;
		MgaObject::meta.subTypes() +=  CommElement::meta;
		MgaObject::meta.subTypes() +=  HWElement::meta;
		MgaObject::meta.subTypes() +=  HardwareSheet::meta;
		MgaObject::meta.subTypes() +=  Channel::meta;
		MgaObject::meta.subTypes() +=  Task::meta;
		MgaObject::meta.subTypes() +=  ComponentRef::meta;
		MgaObject::meta.subTypes() +=  Order::meta;
		MgaObject::meta.subTypes() +=  CommDst::meta;
		MgaObject::meta.subTypes() +=  CommMapping::meta;
		
	}
	void Initialize(const Uml::Diagram & dgr)
	{
		umldiagram = dgr;
		Uml::SetClass(Block::meta, umldiagram, "Block");
		Uml::SetAttribute(Block::meta_Tag,Block::meta, "Tag");
		Uml::SetAttribute(Block::meta_BlockType,Block::meta, "BlockType");
		Uml::SetAttribute(Block::meta_Name,Block::meta, "Name");
		Uml::SetAttribute(Block::meta_Description,Block::meta, "Description");
		Uml::SetAttribute(Block::meta_Priority,Block::meta, "Priority");
		Uml::SetAttribute(Block::meta_SampleTime,Block::meta, "SampleTime");
		Uml::SetClass(Primitive::meta, umldiagram, "Primitive");
		Uml::SetAttribute(Primitive::meta_Deadline,Primitive::meta, "Deadline");
		Uml::SetAttribute(Primitive::meta_ExecutionTime,Primitive::meta, "ExecutionTime");
		Uml::SetAttribute(Primitive::meta_Period,Primitive::meta, "Period");
		Uml::SetClass(TriggerPort::meta, umldiagram, "TriggerPort");
		Uml::SetAttribute(TriggerPort::meta_TriggerType,TriggerPort::meta, "TriggerType");
		Uml::SetClass(Parameter::meta, umldiagram, "Parameter");
		Uml::SetAttribute(Parameter::meta_Value,Parameter::meta, "Value");
		Uml::SetClass(Port::meta, umldiagram, "Port");
		Uml::SetClass(Reference::meta, umldiagram, "Reference");
		Uml::SetAttribute(Reference::meta_SourceBlock,Reference::meta, "SourceBlock");
		Uml::SetAttribute(Reference::meta_SourceType,Reference::meta, "SourceType");
		Uml::SetClass(Annotation::meta, umldiagram, "Annotation");
		Uml::SetAttribute(Annotation::meta_Text,Annotation::meta, "Text");
		Uml::SetClass(Line::meta, umldiagram, "Line");
		Uml::SetAttribute(Line::meta_Name,Line::meta, "Name");
		Uml::SetClass(InputPort::meta, umldiagram, "InputPort");
		Uml::SetAttribute(InputPort::meta_Number,InputPort::meta, "Number");
		Uml::SetClass(OutputPort::meta, umldiagram, "OutputPort");
		Uml::SetAttribute(OutputPort::meta_Number,OutputPort::meta, "Number");
		Uml::SetClass(Dataflow::meta, umldiagram, "Dataflow");
		Uml::SetAttribute(Dataflow::meta_name,Dataflow::meta, "name");
		Uml::SetClass(EnablePort::meta, umldiagram, "EnablePort");
		Uml::SetAttribute(EnablePort::meta_StatesWhenEnabling,EnablePort::meta, "StatesWhenEnabling");
		Uml::SetClass(System::meta, umldiagram, "System");
		Uml::SetClass(State::meta, umldiagram, "State");
		Uml::SetAttribute(State::meta_Name,State::meta, "Name");
		Uml::SetAttribute(State::meta_Decomposition,State::meta, "Decomposition");
		Uml::SetAttribute(State::meta_EnterAction,State::meta, "EnterAction");
		Uml::SetAttribute(State::meta_DuringAction,State::meta, "DuringAction");
		Uml::SetAttribute(State::meta_ExitAction,State::meta, "ExitAction");
		Uml::SetAttribute(State::meta_Order,State::meta, "Order");
		Uml::SetClass(Transition::meta, umldiagram, "Transition");
		Uml::SetAttribute(Transition::meta_Guard,Transition::meta, "Guard");
		Uml::SetAttribute(Transition::meta_Trigger,Transition::meta, "Trigger");
		Uml::SetAttribute(Transition::meta_Action,Transition::meta, "Action");
		Uml::SetAttribute(Transition::meta_ConditionAction,Transition::meta, "ConditionAction");
		Uml::SetAttribute(Transition::meta_Order,Transition::meta, "Order");
		Uml::SetClass(Event::meta, umldiagram, "Event");
		Uml::SetAttribute(Event::meta_Name,Event::meta, "Name");
		Uml::SetAttribute(Event::meta_Trigger,Event::meta, "Trigger");
		Uml::SetAttribute(Event::meta_Scope,Event::meta, "Scope");
		Uml::SetAttribute(Event::meta_Description,Event::meta, "Description");
		Uml::SetClass(History::meta, umldiagram, "History");
		Uml::SetClass(TransStart::meta, umldiagram, "TransStart");
		Uml::SetClass(Junction::meta, umldiagram, "Junction");
		Uml::SetClass(Stateflow::meta, umldiagram, "Stateflow");
		Uml::SetAttribute(Stateflow::meta_name,Stateflow::meta, "name");
		Uml::SetClass(Data::meta, umldiagram, "Data");
		Uml::SetAttribute(Data::meta_ArrayFirstIndex,Data::meta, "ArrayFirstIndex");
		Uml::SetAttribute(Data::meta_ArraySize,Data::meta, "ArraySize");
		Uml::SetAttribute(Data::meta_InitialValue,Data::meta, "InitialValue");
		Uml::SetAttribute(Data::meta_Min,Data::meta, "Min");
		Uml::SetAttribute(Data::meta_Max,Data::meta, "Max");
		Uml::SetAttribute(Data::meta_Units,Data::meta, "Units");
		Uml::SetAttribute(Data::meta_DataType,Data::meta, "DataType");
		Uml::SetAttribute(Data::meta_Name,Data::meta, "Name");
		Uml::SetAttribute(Data::meta_Scope,Data::meta, "Scope");
		Uml::SetAttribute(Data::meta_Description,Data::meta, "Description");
		Uml::SetClass(TransConnector::meta, umldiagram, "TransConnector");
		Uml::SetClass(ConnectorRef::meta, umldiagram, "ConnectorRef");
		Uml::SetClass(RTConstraint::meta, umldiagram, "RTConstraint");
		Uml::SetAttribute(RTConstraint::meta_Latency,RTConstraint::meta, "Latency");
		Uml::SetClass(RTCOut::meta, umldiagram, "RTCOut");
		Uml::SetClass(RTCIn::meta, umldiagram, "RTCIn");
		Uml::SetClass(SystemRef::meta, umldiagram, "SystemRef");
		Uml::SetClass(InPortMapping::meta, umldiagram, "InPortMapping");
		Uml::SetClass(ComponentShortcut::meta, umldiagram, "ComponentShortcut");
		Uml::SetClass(ComponentSheet::meta, umldiagram, "ComponentSheet");
		Uml::SetClass(Signal::meta, umldiagram, "Signal");
		Uml::SetClass(COutPort::meta, umldiagram, "COutPort");
		Uml::SetClass(CInPort::meta, umldiagram, "CInPort");
		Uml::SetClass(ComponentModels::meta, umldiagram, "ComponentModels");
		Uml::SetAttribute(ComponentModels::meta_name,ComponentModels::meta, "name");
		Uml::SetClass(OutPortMapping::meta, umldiagram, "OutPortMapping");
		Uml::SetClass(CPort::meta, umldiagram, "CPort");
		Uml::SetAttribute(CPort::meta_Min,CPort::meta, "Min");
		Uml::SetAttribute(CPort::meta_Max,CPort::meta, "Max");
		Uml::SetAttribute(CPort::meta_CName,CPort::meta, "CName");
		Uml::SetAttribute(CPort::meta_DataOffset,CPort::meta, "DataOffset");
		Uml::SetAttribute(CPort::meta_DataScale,CPort::meta, "DataScale");
		Uml::SetAttribute(CPort::meta_DataInit,CPort::meta, "DataInit");
		Uml::SetAttribute(CPort::meta_DataSign,CPort::meta, "DataSign");
		Uml::SetAttribute(CPort::meta_DataSize,CPort::meta, "DataSize");
		Uml::SetAttribute(CPort::meta_DataType,CPort::meta, "DataType");
		Uml::SetClass(Component::meta, umldiagram, "Component");
		Uml::SetAttribute(Component::meta_CName,Component::meta, "CName");
		Uml::SetClass(COM::meta, umldiagram, "COM");
		Uml::SetAttribute(COM::meta_HandleRX,COM::meta, "HandleRX");
		Uml::SetAttribute(COM::meta_HandleTX,COM::meta, "HandleTX");
		Uml::SetAttribute(COM::meta_HandleCCL,COM::meta, "HandleCCL");
		Uml::SetAttribute(COM::meta_HandleNM,COM::meta, "HandleNM");
		Uml::SetAttribute(COM::meta_CycleTime,COM::meta, "CycleTime");
		Uml::SetAttribute(COM::meta_GenerateTask,COM::meta, "GenerateTask");
		Uml::SetClass(FirmwareLink::meta, umldiagram, "FirmwareLink");
		Uml::SetClass(FirmwareModule::meta, umldiagram, "FirmwareModule");
		Uml::SetAttribute(FirmwareModule::meta_EventPublished,FirmwareModule::meta, "EventPublished");
		Uml::SetAttribute(FirmwareModule::meta_WriteAccessor,FirmwareModule::meta, "WriteAccessor");
		Uml::SetAttribute(FirmwareModule::meta_ReadAccessor,FirmwareModule::meta, "ReadAccessor");
		Uml::SetAttribute(FirmwareModule::meta_SourceFile,FirmwareModule::meta, "SourceFile");
		Uml::SetAttribute(FirmwareModule::meta_ISR,FirmwareModule::meta, "ISR");
		Uml::SetAttribute(FirmwareModule::meta_LibraryFile,FirmwareModule::meta, "LibraryFile");
		Uml::SetAttribute(FirmwareModule::meta_OSBinding,FirmwareModule::meta, "OSBinding");
		Uml::SetClass(OS::meta, umldiagram, "OS");
		Uml::SetAttribute(OS::meta_Compiler,OS::meta, "Compiler");
		Uml::SetAttribute(OS::meta_Conformance,OS::meta, "Conformance");
		Uml::SetAttribute(OS::meta_Schedule,OS::meta, "Schedule");
		Uml::SetAttribute(OS::meta_TickTime,OS::meta, "TickTime");
		Uml::SetAttribute(OS::meta_Status,OS::meta, "Status");
		Uml::SetClass(Wire::meta, umldiagram, "Wire");
		Uml::SetClass(Bus::meta, umldiagram, "Bus");
		Uml::SetAttribute(Bus::meta_NM,Bus::meta, "NM");
		Uml::SetAttribute(Bus::meta_CName,Bus::meta, "CName");
		Uml::SetAttribute(Bus::meta_Medium,Bus::meta, "Medium");
		Uml::SetAttribute(Bus::meta_FrameSize,Bus::meta, "FrameSize");
		Uml::SetAttribute(Bus::meta_BitRate,Bus::meta, "BitRate");
		Uml::SetClass(BusChan::meta, umldiagram, "BusChan");
		Uml::SetClass(CommElement::meta, umldiagram, "CommElement");
		Uml::SetClass(HWElement::meta, umldiagram, "HWElement");
		Uml::SetClass(HardwareSheet::meta, umldiagram, "HardwareSheet");
		Uml::SetClass(HardwareModels::meta, umldiagram, "HardwareModels");
		Uml::SetAttribute(HardwareModels::meta_name,HardwareModels::meta, "name");
		Uml::SetClass(Channel::meta, umldiagram, "Channel");
		Uml::SetAttribute(Channel::meta_InterruptNum,Channel::meta, "InterruptNum");
		Uml::SetAttribute(Channel::meta_CName,Channel::meta, "CName");
		Uml::SetClass(ECU::meta, umldiagram, "ECU");
		Uml::SetAttribute(ECU::meta_Simulator,ECU::meta, "Simulator");
		Uml::SetAttribute(ECU::meta_CName,ECU::meta, "CName");
		Uml::SetAttribute(ECU::meta_ROM,ECU::meta, "ROM");
		Uml::SetAttribute(ECU::meta_RAM,ECU::meta, "RAM");
		Uml::SetAttribute(ECU::meta_Speed,ECU::meta, "Speed");
		Uml::SetAttribute(ECU::meta_CPU,ECU::meta, "CPU");
		Uml::SetClass(IChan::meta, umldiagram, "IChan");
		Uml::SetClass(OChan::meta, umldiagram, "OChan");
		Uml::SetClass(BusMessage::meta, umldiagram, "BusMessage");
		Uml::SetAttribute(BusMessage::meta_CycleTime,BusMessage::meta, "CycleTime");
		Uml::SetAttribute(BusMessage::meta_CName,BusMessage::meta, "CName");
		Uml::SetAttribute(BusMessage::meta_SendType,BusMessage::meta, "SendType");
		Uml::SetAttribute(BusMessage::meta_Size,BusMessage::meta, "Size");
		Uml::SetAttribute(BusMessage::meta_ID,BusMessage::meta, "ID");
		Uml::SetClass(BusMessageRef::meta, umldiagram, "BusMessageRef");
		Uml::SetClass(OutCommMapping::meta, umldiagram, "OutCommMapping");
		Uml::SetClass(Task::meta, umldiagram, "Task");
		Uml::SetAttribute(Task::meta_CycleTime,Task::meta, "CycleTime");
		Uml::SetAttribute(Task::meta_Activation,Task::meta, "Activation");
		Uml::SetAttribute(Task::meta_Cyclic,Task::meta, "Cyclic");
		Uml::SetAttribute(Task::meta_Type,Task::meta, "Type");
		Uml::SetAttribute(Task::meta_Preemption,Task::meta, "Preemption");
		Uml::SetAttribute(Task::meta_Comment,Task::meta, "Comment");
		Uml::SetAttribute(Task::meta_AutoStart,Task::meta, "AutoStart");
		Uml::SetAttribute(Task::meta_Priority,Task::meta, "Priority");
		Uml::SetClass(ComponentRef::meta, umldiagram, "ComponentRef");
		Uml::SetClass(Order::meta, umldiagram, "Order");
		Uml::SetClass(CommDst::meta, umldiagram, "CommDst");
		Uml::SetClass(CommMapping::meta, umldiagram, "CommMapping");
		Uml::SetAttribute(CommMapping::meta_StartBit,CommMapping::meta, "StartBit");
		Uml::SetAttribute(CommMapping::meta_NumBits,CommMapping::meta, "NumBits");
		Uml::SetClass(InCommMapping::meta, umldiagram, "InCommMapping");
		Uml::SetClass(RootFolder::meta, umldiagram, "RootFolder");
		Uml::SetAttribute(RootFolder::meta_name,RootFolder::meta, "name");
		Uml::SetClass(MgaObject::meta, umldiagram, "MgaObject");
		Uml::SetAttribute(MgaObject::meta_position,MgaObject::meta, "position");
		Uml::SetAttribute(MgaObject::meta_name,MgaObject::meta, "name");
		//composition child roles 
		Uml::SetParentRole(Block::meta_System_parent,Block::meta,System::meta, "", "");
		Uml::SetParentRole(Parameter::meta_Parameter_Block_parent,Parameter::meta,Block::meta, "Parameter", "");
		Uml::SetParentRole(Port::meta_Block_parent,Port::meta,Block::meta, "", "");
		Uml::SetParentRole(Annotation::meta_Block_parent,Annotation::meta,Block::meta, "", "");
		Uml::SetParentRole(Line::meta_Line_Block_parent,Line::meta,Block::meta, "Line", "");
		Uml::SetParentRole(Dataflow::meta_RootFolder_parent,Dataflow::meta,RootFolder::meta, "", "");
		Uml::SetParentRole(System::meta_Dataflow_parent,System::meta,Dataflow::meta, "", "");
		Uml::SetParentRole(State::meta_Stateflow_parent,State::meta,Stateflow::meta, "", "");
		Uml::SetParentRole(Transition::meta_Transition_State_parent,Transition::meta,State::meta, "Transition", "");
		Uml::SetParentRole(Event::meta_State_parent,Event::meta,State::meta, "", "");
		Uml::SetParentRole(Stateflow::meta_RootFolder_parent,Stateflow::meta,RootFolder::meta, "", "");
		Uml::SetParentRole(Data::meta_State_parent,Data::meta,State::meta, "", "");
		Uml::SetParentRole(TransConnector::meta_State_parent,TransConnector::meta,State::meta, "", "");
		Uml::SetParentRole(ConnectorRef::meta_Block_parent,ConnectorRef::meta,Block::meta, "", "");
		Uml::SetParentRole(RTConstraint::meta_Component_parent,RTConstraint::meta,Component::meta, "", "");
		Uml::SetParentRole(RTCOut::meta_Component_parent,RTCOut::meta,Component::meta, "", "");
		Uml::SetParentRole(RTCIn::meta_Component_parent,RTCIn::meta,Component::meta, "", "");
		Uml::SetParentRole(SystemRef::meta_Component_parent,SystemRef::meta,Component::meta, "", "");
		Uml::SetParentRole(InPortMapping::meta_Component_parent,InPortMapping::meta,Component::meta, "", "");
		Uml::SetParentRole(ComponentShortcut::meta_ComponentSheet_parent,ComponentShortcut::meta,ComponentSheet::meta, "", "");
		Uml::SetParentRole(ComponentSheet::meta_ComponentModels_parent,ComponentSheet::meta,ComponentModels::meta, "", "");
		Uml::SetParentRole(Signal::meta_ComponentSheet_parent,Signal::meta,ComponentSheet::meta, "", "");
		Uml::SetParentRole(ComponentModels::meta_RootFolder_parent,ComponentModels::meta,RootFolder::meta, "", "");
		Uml::SetParentRole(OutPortMapping::meta_Component_parent,OutPortMapping::meta,Component::meta, "", "");
		Uml::SetParentRole(CPort::meta_Component_parent,CPort::meta,Component::meta, "", "");
		Uml::SetParentRole(Component::meta_ComponentSheet_parent,Component::meta,ComponentSheet::meta, "", "");
		Uml::SetParentRole(COM::meta_ECU_parent,COM::meta,ECU::meta, "", "");
		Uml::SetParentRole(FirmwareLink::meta_ECU_parent,FirmwareLink::meta,ECU::meta, "", "");
		Uml::SetParentRole(FirmwareModule::meta_ECU_parent,FirmwareModule::meta,ECU::meta, "", "");
		Uml::SetParentRole(OS::meta_ECU_parent,OS::meta,ECU::meta, "", "");
		Uml::SetParentRole(HWElement::meta_HardwareSheet_parent,HWElement::meta,HardwareSheet::meta, "", "");
		Uml::SetParentRole(HardwareSheet::meta_HardwareModels_parent,HardwareSheet::meta,HardwareModels::meta, "", "");
		Uml::SetParentRole(HardwareModels::meta_RootFolder_parent,HardwareModels::meta,RootFolder::meta, "", "");
		Uml::SetParentRole(Channel::meta_ECU_parent,Channel::meta,ECU::meta, "", "");
		Uml::SetParentRole(BusMessage::meta_ECU_parent,BusMessage::meta,ECU::meta, "", "");
		Uml::SetParentRole(BusMessageRef::meta_ECU_parent,BusMessageRef::meta,ECU::meta, "", "");
		Uml::SetParentRole(Task::meta_ECU_parent,Task::meta,ECU::meta, "", "");
		Uml::SetParentRole(ComponentRef::meta_ECU_parent,ComponentRef::meta,ECU::meta, "", "");
		Uml::SetParentRole(Order::meta_ECU_parent,Order::meta,ECU::meta, "", "");
		Uml::SetParentRole(CommMapping::meta_ECU_parent,CommMapping::meta,ECU::meta, "", "");
		Uml::SetParentRole(RootFolder::meta_RootFolder_parent,RootFolder::meta,RootFolder::meta, "", "");
		// composition parentroles 
		Uml::SetChildRole(Block::meta_Annotation_children,Block::meta,Annotation::meta, "", "");
		Uml::SetChildRole(Block::meta_ConnectorRef_children,Block::meta,ConnectorRef::meta, "", "");
		Uml::SetChildRole(Block::meta_Line,Block::meta,Line::meta, "", "Line");
		Uml::SetChildRole(Block::meta_Port_children,Block::meta,Port::meta, "", "");
		Uml::SetChildRole(Block::meta_Parameter,Block::meta,Parameter::meta, "", "Parameter");
		Uml::SetChildRole(Dataflow::meta_System_child,Dataflow::meta,System::meta, "", "");
		Uml::SetChildRole(System::meta_Block_children,System::meta,Block::meta, "", "");
		Uml::SetChildRole(State::meta_Event_children,State::meta,Event::meta, "", "");
		Uml::SetChildRole(State::meta_Transition,State::meta,Transition::meta, "", "Transition");
		Uml::SetChildRole(State::meta_Data_children,State::meta,Data::meta, "", "");
		Uml::SetChildRole(State::meta_TransConnector_children,State::meta,TransConnector::meta, "", "");
		Uml::SetChildRole(Stateflow::meta_State_children,Stateflow::meta,State::meta, "", "");
		Uml::SetChildRole(ComponentSheet::meta_Component_children,ComponentSheet::meta,Component::meta, "", "");
		Uml::SetChildRole(ComponentSheet::meta_ComponentShortcut_children,ComponentSheet::meta,ComponentShortcut::meta, "", "");
		Uml::SetChildRole(ComponentSheet::meta_Signal_children,ComponentSheet::meta,Signal::meta, "", "");
		Uml::SetChildRole(ComponentModels::meta_ComponentSheet_children,ComponentModels::meta,ComponentSheet::meta, "", "");
		Uml::SetChildRole(Component::meta_CPort_children,Component::meta,CPort::meta, "", "");
		Uml::SetChildRole(Component::meta_SystemRef_child,Component::meta,SystemRef::meta, "", "");
		Uml::SetChildRole(Component::meta_RTConstraint_children,Component::meta,RTConstraint::meta, "", "");
		Uml::SetChildRole(Component::meta_RTCIn_children,Component::meta,RTCIn::meta, "", "");
		Uml::SetChildRole(Component::meta_RTCOut_children,Component::meta,RTCOut::meta, "", "");
		Uml::SetChildRole(Component::meta_OutPortMapping_children,Component::meta,OutPortMapping::meta, "", "");
		Uml::SetChildRole(Component::meta_InPortMapping_children,Component::meta,InPortMapping::meta, "", "");
		Uml::SetChildRole(HardwareSheet::meta_HWElement_children,HardwareSheet::meta,HWElement::meta, "", "");
		Uml::SetChildRole(HardwareModels::meta_HardwareSheet_children,HardwareModels::meta,HardwareSheet::meta, "", "");
		Uml::SetChildRole(ECU::meta_OS_child,ECU::meta,OS::meta, "", "");
		Uml::SetChildRole(ECU::meta_COM_children,ECU::meta,COM::meta, "", "");
		Uml::SetChildRole(ECU::meta_Channel_children,ECU::meta,Channel::meta, "", "");
		Uml::SetChildRole(ECU::meta_FirmwareModule_children,ECU::meta,FirmwareModule::meta, "", "");
		Uml::SetChildRole(ECU::meta_ComponentRef_children,ECU::meta,ComponentRef::meta, "", "");
		Uml::SetChildRole(ECU::meta_Task_children,ECU::meta,Task::meta, "", "");
		Uml::SetChildRole(ECU::meta_CommMapping_children,ECU::meta,CommMapping::meta, "", "");
		Uml::SetChildRole(ECU::meta_Order_children,ECU::meta,Order::meta, "", "");
		Uml::SetChildRole(ECU::meta_FirmwareLink_children,ECU::meta,FirmwareLink::meta, "", "");
		Uml::SetChildRole(ECU::meta_BusMessage_children,ECU::meta,BusMessage::meta, "", "");
		Uml::SetChildRole(ECU::meta_BusMessageRef_children,ECU::meta,BusMessageRef::meta, "", "");
		Uml::SetChildRole(RootFolder::meta_Stateflow_children,RootFolder::meta,Stateflow::meta, "", "");
		Uml::SetChildRole(RootFolder::meta_Dataflow_children,RootFolder::meta,Dataflow::meta, "", "");
		Uml::SetChildRole(RootFolder::meta_ComponentModels_children,RootFolder::meta,ComponentModels::meta, "", "");
		Uml::SetChildRole(RootFolder::meta_HardwareModels_children,RootFolder::meta,HardwareModels::meta, "", "");
		Uml::SetChildRole(RootFolder::meta_RootFolder_children,RootFolder::meta,RootFolder::meta, "", "");
		// Association roles 




		Uml::SetAssocRole(Port::meta_srcLine,Port::meta,Port::meta, "dstLine");
		Port::meta_dstLine_rev = Port::meta_srcLine;
		Uml::SetAssocRole(Port::meta_dstLine,Port::meta,Port::meta, "srcLine");
		Port::meta_srcLine_rev = Port::meta_dstLine;



		Line::meta_dstLine_end_ = Port::meta_dstLine;
		Line::meta_srcLine_end_ = Port::meta_srcLine;

		Uml::SetAssocRole(InputPort::meta_srcInPortMapping,InputPort::meta,CInPort::meta, "dstInPortMapping");
		CInPort::meta_dstInPortMapping_rev = InputPort::meta_srcInPortMapping;

		Uml::SetAssocRole(OutputPort::meta_dstOutPortMapping,OutputPort::meta,COutPort::meta, "srcOutPortMapping");
		COutPort::meta_srcOutPortMapping_rev = OutputPort::meta_dstOutPortMapping;



		Uml::SetAssocRole(System::meta_referedbySystemRef,System::meta,SystemRef::meta, "ref");


		Transition::meta_dstTransition_end_ = TransConnector::meta_dstTransition;
		Transition::meta_srcTransition_end_ = TransConnector::meta_srcTransition;







		Uml::SetAssocRole(TransConnector::meta_srcTransition,TransConnector::meta,TransConnector::meta, "dstTransition");
		TransConnector::meta_dstTransition_rev = TransConnector::meta_srcTransition;
		Uml::SetAssocRole(TransConnector::meta_dstTransition,TransConnector::meta,TransConnector::meta, "srcTransition");
		TransConnector::meta_srcTransition_rev = TransConnector::meta_dstTransition;
		Uml::SetAssocRole(TransConnector::meta_referedbyConnectorRef,TransConnector::meta,ConnectorRef::meta, "ref");

		Uml::SetAssocRole(ConnectorRef::meta_ref,ConnectorRef::meta,TransConnector::meta, "referedbyConnectorRef");

		Uml::SetAssocRole(RTConstraint::meta_srcRTCOut,RTConstraint::meta,CInPort::meta, "dstRTCOut");
		CInPort::meta_dstRTCOut_rev = RTConstraint::meta_srcRTCOut;
		Uml::SetAssocRole(RTConstraint::meta_dstRTCIn,RTConstraint::meta,COutPort::meta, "srcRTCIn");
		COutPort::meta_srcRTCIn_rev = RTConstraint::meta_dstRTCIn;

		RTCOut::meta_dstRTCOut_end_ = CInPort::meta_dstRTCOut;
		RTCOut::meta_srcRTCOut_end_ = RTConstraint::meta_srcRTCOut;

		RTCIn::meta_srcRTCIn_end_ = COutPort::meta_srcRTCIn;
		RTCIn::meta_dstRTCIn_end_ = RTConstraint::meta_dstRTCIn;

		Uml::SetAssocRole(SystemRef::meta_ref,SystemRef::meta,System::meta, "referedbySystemRef");

		InPortMapping::meta_dstInPortMapping_end_ = CInPort::meta_dstInPortMapping;
		InPortMapping::meta_srcInPortMapping_end_ = InputPort::meta_srcInPortMapping;

		Uml::SetAssocRole(ComponentShortcut::meta_ref,ComponentShortcut::meta,Component::meta, "referedbyComponentShortcut");


		Signal::meta_srcSignal_end_ = CInPort::meta_srcSignal;
		Signal::meta_dstSignal_end_ = COutPort::meta_dstSignal;

		Uml::SetAssocRole(COutPort::meta_srcOutPortMapping,COutPort::meta,OutputPort::meta, "dstOutPortMapping");
		OutputPort::meta_dstOutPortMapping_rev = COutPort::meta_srcOutPortMapping;
		Uml::SetAssocRole(COutPort::meta_srcRTCIn,COutPort::meta,RTConstraint::meta, "dstRTCIn");
		RTConstraint::meta_dstRTCIn_rev = COutPort::meta_srcRTCIn;
		Uml::SetAssocRole(COutPort::meta_dstSignal,COutPort::meta,CInPort::meta, "srcSignal");
		CInPort::meta_srcSignal_rev = COutPort::meta_dstSignal;

		Uml::SetAssocRole(CInPort::meta_dstInPortMapping,CInPort::meta,InputPort::meta, "srcInPortMapping");
		InputPort::meta_srcInPortMapping_rev = CInPort::meta_dstInPortMapping;
		Uml::SetAssocRole(CInPort::meta_dstRTCOut,CInPort::meta,RTConstraint::meta, "srcRTCOut");
		RTConstraint::meta_srcRTCOut_rev = CInPort::meta_dstRTCOut;
		Uml::SetAssocRole(CInPort::meta_srcSignal,CInPort::meta,COutPort::meta, "dstSignal");
		COutPort::meta_dstSignal_rev = CInPort::meta_srcSignal;


		OutPortMapping::meta_dstOutPortMapping_end_ = OutputPort::meta_dstOutPortMapping;
		OutPortMapping::meta_srcOutPortMapping_end_ = COutPort::meta_srcOutPortMapping;

		Uml::SetAssocRole(CPort::meta_srcInCommMapping,CPort::meta,CommDst::meta, "dstInCommMapping");
		CommDst::meta_dstInCommMapping_rev = CPort::meta_srcInCommMapping;
		Uml::SetAssocRole(CPort::meta_dstOutCommMapping,CPort::meta,CommDst::meta, "srcOutCommMapping");
		CommDst::meta_srcOutCommMapping_rev = CPort::meta_dstOutCommMapping;

		Uml::SetAssocRole(Component::meta_referedbyComponentShortcut,Component::meta,ComponentShortcut::meta, "ref");
		Uml::SetAssocRole(Component::meta_referedbyComponentRef,Component::meta,ComponentRef::meta, "ref");


		FirmwareLink::meta_dstFirmwareLink_end_ = FirmwareModule::meta_dstFirmwareLink;
		FirmwareLink::meta_srcFirmwareLink_end_ = Channel::meta_srcFirmwareLink;

		Uml::SetAssocRole(FirmwareModule::meta_dstFirmwareLink,FirmwareModule::meta,Channel::meta, "srcFirmwareLink");
		Channel::meta_srcFirmwareLink_rev = FirmwareModule::meta_dstFirmwareLink;


		Wire::meta_dstWire_end_ = CommElement::meta_dstWire;
		Wire::meta_srcWire_end_ = CommElement::meta_srcWire;


		Uml::SetAssocRole(BusChan::meta_members,BusChan::meta,BusMessage::meta, "BusChan");

		Uml::SetAssocRole(CommElement::meta_srcWire,CommElement::meta,CommElement::meta, "dstWire");
		CommElement::meta_dstWire_rev = CommElement::meta_srcWire;
		Uml::SetAssocRole(CommElement::meta_dstWire,CommElement::meta,CommElement::meta, "srcWire");
		CommElement::meta_srcWire_rev = CommElement::meta_dstWire;




		Uml::SetAssocRole(Channel::meta_srcFirmwareLink,Channel::meta,FirmwareModule::meta, "dstFirmwareLink");
		FirmwareModule::meta_dstFirmwareLink_rev = Channel::meta_srcFirmwareLink;




		Uml::SetAssocRole(BusMessage::meta_BusChan,BusMessage::meta,BusChan::meta, "members");
		Uml::SetAssocRole(BusMessage::meta_referedbyBusMessageRef,BusMessage::meta,BusMessageRef::meta, "ref");

		Uml::SetAssocRole(BusMessageRef::meta_ref,BusMessageRef::meta,BusMessage::meta, "referedbyBusMessageRef");

		OutCommMapping::meta_srcOutCommMapping_end_ = CommDst::meta_srcOutCommMapping;
		OutCommMapping::meta_dstOutCommMapping_end_ = CPort::meta_dstOutCommMapping;

		Uml::SetAssocRole(Task::meta_members,Task::meta,ComponentRef::meta, "Task");

		Uml::SetAssocRole(ComponentRef::meta_ref,ComponentRef::meta,Component::meta, "referedbyComponentRef");
		Uml::SetAssocRole(ComponentRef::meta_Task,ComponentRef::meta,Task::meta, "members");
		Uml::SetAssocRole(ComponentRef::meta_dstOrder,ComponentRef::meta,ComponentRef::meta, "srcOrder");
		ComponentRef::meta_srcOrder_rev = ComponentRef::meta_dstOrder;
		Uml::SetAssocRole(ComponentRef::meta_srcOrder,ComponentRef::meta,ComponentRef::meta, "dstOrder");
		ComponentRef::meta_dstOrder_rev = ComponentRef::meta_srcOrder;

		Order::meta_srcOrder_end_ = ComponentRef::meta_srcOrder;
		Order::meta_dstOrder_end_ = ComponentRef::meta_dstOrder;

		Uml::SetAssocRole(CommDst::meta_dstInCommMapping,CommDst::meta,CPort::meta, "srcInCommMapping");
		CPort::meta_srcInCommMapping_rev = CommDst::meta_dstInCommMapping;
		Uml::SetAssocRole(CommDst::meta_srcOutCommMapping,CommDst::meta,CPort::meta, "dstOutCommMapping");
		CPort::meta_dstOutCommMapping_rev = CommDst::meta_srcOutCommMapping;


		InCommMapping::meta_dstInCommMapping_end_ = CommDst::meta_dstInCommMapping;
		InCommMapping::meta_srcInCommMapping_end_ = CPort::meta_srcInCommMapping;



		
	}
	 Udm::UdmDiagram diagram = { &umldiagram, Initialize };
	static struct _regClass
	{
		_regClass()
		{
			Udm::MetaDepository::StoreDiagram("ECSL_DP", diagram);
		};
		~_regClass()
		{
			Udm::MetaDepository::RemoveDiagram("ECSL_DP");
		};
	} __regUnUsed;

}
// END ECSL_DP.cpp
