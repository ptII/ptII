<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- $Id$
     $PTII/configure reads in build.xml.in and creates build.xml.
     If configure is not available, copy build.xml.default to build.xml. -->
<project basedir="." default="build" name="ptII" 
	 @ANT_MAVEN_ARTIFACT@
	 >
  <!-- We can refer to any environment variable FOO as ${env.FOO} -->
  <property environment="env" />


  <!-- Ant properties. Alphabetize, please -->

  <!-- checkstyle.formatter defaults to xml and is used by checkstyle and test.  Try also -Dcheckstyle.formater=html. -->
  <property name="checkstyle.formatter" value="xml" />

  <property name="debuglevel" value="source,lines,vars" />

  <!-- Location of findbugs, which does static analysis on the code.  findbugs-1.3.9 does not terminate, so use 1.3.8 -->
  <property name="findbugs.home" value="${basedir}/vendors/findbugs-1.3.8" />

  <!-- Packages to exclude from targets that call javadoc.
       Unfortunately, <fileset> results in a command line that is too long.
       Grab the packages from ptII.excludes, put them in a file called /tmp/e and run
       awk -F '"' '{print $2}' /tmp/e | sed 's@/$@@' | sed 's@/@.@g' | sort | awk '{printf("%s.*,", $1)}'
       (Lame) -->
  <property name="javadoc.excludepackagenames" value="@ANT_JAVADOC_EXCLUDEPACKAGENAMES@" />

  <!-- Packages on which doccheck, javadoc and ojdcheck are run. -->
  <property name="javadoc.packagenames" value="diva.*,lbnl.*,ptolemy.*,ptserver.*" />

  <!-- junit.formatter defaults to xml and is used by checkstyle and test.  Other values: brief, failure, plain -->
  <property name="junit.formatter" value="xml" />

  <!-- ptII.reports contains reports generated by checkstyle, findbugs and test.
       ptII.reports must be declared before any properties that refer to it. (Lame).
    -->
  <property name="ptII.reports" value="${basedir}/reports" />

  <!-- The output director for junit. -->
  <property name="junit.output.dir" value="${ptII.reports}/junit" />

  <!-- model names the model to be opened.  The default is the empty string.  To use this, run 'ant vergil -Dmodel=foo.xml' -->
  <property name="model" value="" />

  <property name="source" value="1.6" />

  <property name="target" value="1.6" />

  <!-- The tests that are run by the test target. -->
  <property name="test.batch" value="**/junit/*.java" />
  <!-- The test that is run by the test.auto target. -->
  <property name="test.name" value="ptolemy.actor.lib.test.junit.JUnitTclTest" />

  <!-- The timeout in seconds for findbugs and junit. -->
  <property name="timeout" value="1200000" />


  <!-- Ant paths. Alphabetize, please -->
  <path id="ptII.classpath">
    <pathelement location="${basedir}" />
    @ANT_CLASSPATH@
  </path>

  <!-- Ant patternsets. Alphabetize, please -->
  <patternset id="ptII.excludes">
    @ANT_ALWAYS_EXCLUDE@
    @ANT_EXCLUDE@
  </patternset>  

  <!-- Tests that we want to exclude because they don't work or are called by AllTests. -->
  <patternset id="test.excludes">
    <exclude name="**/HTMLAboutJUnitTest.*" />
    <exclude name="**/javasound/test/junit/JUnitTclTest.*" />
    <exclude name="**/KielerJUnitTest.*" />
    <exclude name="**/lbnl/actor/lib/test/junit/JUnitTclTest.*" />
    <exclude name="**/ptserver/test/junit/FileDownloadTest.*" />
    <exclude name="**/ptserver/test/junit/JUnitTclTest.*" />
    <exclude name="**/ptserver/test/junit/RESTGetHandlerTest.*" />
    <exclude name="**/ptserver/test/junit/RemoteModelTest.*" />
    <exclude name="**/ptserver/test/junit/ServerTest.*" />
    <exclude name="**/ptserver/test/junit/ServletTest.*" />
    <exclude name="**/ptserver/test/junit/TokenParserTest.*" />
    <exclude name="**/ptserver/test/junit/TypeParserTest.*" />
  </patternset>

  <!-- Ant targets. Alphabetize and add a description, please.  -->

  <target name="checkstyle" depends="initReports"
	  description="Run checkstyle and find common code style problems." >
    <echo>To avoid an 'OutOfMemoryError' exception, under bash, try 'export ANT_OPTS=-Xmx1024m'</echo>
    <taskdef resource="checkstyletask.properties" classpath="${basedir}/ptserver/lib/checkstyle-5.3-all.jar" />
    <checkstyle config="${basedir}/ptserver/checkstyle-ptserver.xml" failOnViolation="false">
      <fileset defaultexcludes="yes"
	       dir="${basedir}">
	<patternset refid="ptII.excludes" />
      </fileset>
      <formatter type="${checkstyle.formatter}" toFile="${ptII.reports}/checkstyle_errors.${checkstyle.formatter}" />
    </checkstyle>
    <!-- <xslt in="${ptII.reports}/checkstyle_errors.xml" out="${ptII.reports}/checkstyle_report.html" style="${basedir}/ptserver/checkstyle-simple.xsl"/> -->
  </target>

  <target name="clean"
	  description="Remove all the class files and the ${ptII.reports} director">
    <delete quiet="true">
      <fileset dir="${basedir}"
	       includes="**/*.class" />
      <fileset dir="${ptII.reports}" />
      <fileset dir="doc/codeDoc" />
    </delete>
  </target>

  <target depends="clean" name="cleanall" />

  <target depends="build-message, build-subprojects,build-project" name="build"
	  description="Build Ptolemy II by compiling the .java files.  This is the default ant target."/>

  <target name="build-message">
    <echo>Use ant -p to see other targets. JAVA_HOME=${env.JAVA_HOME}
tools.jar is necessary for compilation of doc/doclets/.
If compilation fails, try setting JAVA_HOME to the location of the JDK.
For example:
  [bldmastr@sisyphus ptII]$ which java
  /usr/bin/java
  [bldmastr@sisyphus ptII]$ ls -l /usr/bin/java
  lrwxrwxrwx 1 root root 26 Jul 31 10:12 /usr/bin/java -> /usr/java/default/bin/java
  [bldmastr@sisyphus ptII]$ export JAVA_HOME=/usr/java/default
    </echo>
  </target>

  <target @ANT_MAVEN_SUBPROJECTS@ name="build-subprojects" />

  @ANT_MAVEN_BUILD_WEBSENSOR@

  <target name="build-project">
    <echo message="${ant.project.name}: ${ant.file}" />
    <javac debug="true"
	   debuglevel="${debuglevel}"
	   destdir="."
	   includeAntRuntime="false"
	   fork="true"
	   memoryinitialsize="256m"
	   memorymaximumsize="1500m"
	   source="${source}"
	   target="${target}">
      <src path="${basedir}" />
      @ANT_WEBSENSOR_SRC@
      <patternset refid="ptII.excludes" />
      <classpath refid="ptII.classpath" />
    </javac>
  </target>

  <target name="doccheck"
	  depends="initReports"
	  description="Run Doccheck (http://java.sun.com/j2se/javadoc/doccheck/) to detect JavaDoc bugs." >
    <javadoc destdir="${ptII.reports}/doccheck"
	     packagenames="${javadoc.packagenames}"
	     excludepackagenames="${javadoc.excludepackagenames}"
	     maxmemory="1000m"
	     useexternalfile="true">
      <classpath>
	<path refid="ptII.classpath" />
	<pathelement location="${env.JAVA_HOME}/lib/tools.jar" />
      </classpath>
      <doclet name="com.sun.tools.doclets.doccheck.DocCheck" path="vendors/sun/doccheck1.2b2/doccheck.jar" />
      <fileset dir="${basedir}"/>
      @ANT_WEBSENSOR_FILESET@
    </javadoc>
  </target>

  <!-- findbugs.  See http://findbugs.sourceforge.net/manual/anttask.html -->
  <target name="findbugs"
	  depends="build, initReports"
	  description="Run FindBugs (http://findbugs.sourceforge.net/)">
    <echo>
      FindBugs can be found at http://findbugs.sourceforge.net
      Use findbugs-1.3.8 because 1.3.9 does not terminate.
      Install findbugs-1.3.8 in ptII/vendors/findbugs-1.3.8.
      FindBugs takes 4-5 minutes to run . . .
    </echo>
    <taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask" />
    <findbugs 
       effort="max"
       excludefilter="${basedir}/doc/findbugs-exclude.xml"
       home="${findbugs.home}"
       includefilter="${basedir}/doc/findbugs-include.xml"
       jvmargs="-Xms256m -Xmx2000m"
       output="xml"
       outputFile="${ptII.reports}/ptII-findbugs.xml"
       timeout="${timeout}"
       >
      <auxclasspath refid="ptII.classpath" />
      <class location="${basedir}" />
      <sourcePath path="${basedir}" />
      @ANT_WEBSENSOR_SOURCEPATH@
    </findbugs>
  </target>

  <target name="initReports">
    <mkdir dir="${junit.output.dir}" />
    <!-- doccheck and ojdcheck go into separate directories so that we can use
	 the Hudson HTML Publisher plugin. -->
    <mkdir dir="${ptII.reports}/doccheck" />
    <mkdir dir="${ptII.reports}/ojdcheck" />
  </target>

  <target name="javadoc"
	  depends="javadoc.actorIndex, javadoc.base"
	  description="Generate javadoc including actor documentation and actor/demo index." /> 

  <target name="javadoc.actor"
	  depends="build, javadoc.doclets">
    <echo>
     Generate javadoc .xml files used for actor documentation.
     Generate doc/codeDoc/allNamedObjs.txt for use by javadoc.actorIndex
     For details, see $PTII/ptolemy/vergil/basic/docViewerHelp.htm
    </echo>
    <javadoc destdir="doc/codeDoc"
	     packagenames="${javadoc.packagenames}"
	     excludepackagenames="${javadoc.excludepackagenames}"
	     maxmemory="1000m"
	     sourcepath="${basedir}">
      <classpath>
	<path refid="ptII.classpath" />
	<pathelement location="${env.JAVA_HOME}/lib/tools.jar" />
      </classpath>
      <doclet name="doc.doclets.PtDoclet" path="${basedir}" />
    </javadoc>
  </target>

  <target name="javadoc.actorIndex"
	  depends="javadoc.actor">
    <echo>
     Generate actor/demonstration index files.
     Read the doc/codeDoc/allNamedObjs.txt file created by javadoc.actor.
     Create the actor index.
     For details, see $PTII/ptolemy/vergil/basic/docViewerHelp.htm
    </echo>
    <java classname="ptolemy.moml.filter.ActorIndex"
	  fork="true"
	  maxmemory="1000m"
	  >
      <arg line="doc/codeDoc/allNamedObjs.txt ptolemy/configs/doc/models.txt doc/codeDoc"/>
      <classpath>
	<path refid="ptII.classpath" />
	<pathelement location="${env.JAVA_HOME}/lib/tools.jar" />
      </classpath>
    </java>
  </target>

  <target name="javadoc.base"
	  depends="javadoc.doclets">
    <echo>Generate javadoc without building the actor documentation and the actor/demonstration index</echo>
    <javadoc destdir="doc/codeDoc"
	     additionalparam="-tag Pt.AcceptedRating -tag Pt.ProposedRating -tag status:a:Status"
	     packagenames="${javadoc.packagenames}"
	     excludepackagenames="${javadoc.excludepackagenames}"
	     maxmemory="1000m"
	     sourcepath="${basedir}">
      <classpath>
	<path refid="ptII.classpath" />
	<pathelement location="${env.JAVA_HOME}/lib/tools.jar" />
      </classpath>
      <taglet name="doc.doclets.RatingTaglet"
	      path="${basedir}" />
    </javadoc>
  </target>

  <target name="javadoc.doclets">
    <echo>Compile doc/doclets.
tools.jar is necessary for compilation of doc/doclets/.
If compilation fails, try setting JAVA_HOME to the location of the JDK.
For example:
  [bldmastr@sisyphus ptII]$ which java
  /usr/bin/java
  [bldmastr@sisyphus ptII]$ ls -l /usr/bin/java
  lrwxrwxrwx 1 root root 26 Jul 31 10:12 /usr/bin/java -> /usr/java/default/bin/java
  [bldmastr@sisyphus ptII]$ export JAVA_HOME=/usr/java/default
    </echo>
    <javac debug="true"
	   debuglevel="${debuglevel}"
	   destdir="."
	   includeAntRuntime="false"
	   fork="true"
	   memoryinitialsize="256m"
	   memorymaximumsize="1500m"
	   source="${source}"
	   target="${target}">
      <src path="${basedir}/doc/doclets" />
      <src path="${basedir}/ptolemy/util" />
      <classpath>
	<path refid="ptII.classpath" />
	<pathelement location="${env.JAVA_HOME}/lib/tools.jar" />
      </classpath>
    </javac>    
  </target>

  <!-- Ojdcheck
       We have a local copy at
       svn co svn+ssh://source.eecs.berkeley.edu/chess/ojdcheck 
       The primary difference is that ojdcheck handles enums -->
  <target name="ojdcheck"
	  depends="initReports"
	  description="Ojdcheck - An updated version of DocCheck. See http://github.com/egonw/ojdcheck">
    <javadoc additionalparam="-xhtml -file ${ptII.reports}/ojdcheck/ojdcheck.htm"
	     packagenames="${javadoc.packagenames}"
	     excludepackagenames="${javadoc.excludepackagenames}"
	     maxmemory="1000m"
	     sourcepath="${basedir}">
      <classpath>
	<path refid="ptII.classpath" />
	<pathelement location="${env.JAVA_HOME}/lib/tools.jar" />
      </classpath>
      <doclet name="com.github.ojdcheck.OpenJavaDocCheck" path="lib/ojdcheck.jar" />
    </javadoc>
  </target>

  <target name="reports"
	  description="Generate non-test reports about the Ptolemy II code base."
	  depends="checkstyle, doccheck, findbugs, ojdcheck" />

  <target name="run" depends="vergil"
	  description="Invoke the Ptolemy II User Interface (alias for the vergil target)"/>

  <target name="test" depends="build, initReports"
	  description="Run the junit tests in junit/*.java.">
    <echo>
      To run different tests, use -Dtest.batch, for example:
      ant test -Dtest.batch=ptolemy/domains/continuous/**/junit/*.java
      To change format Use -Djunit.formatter=xml|brief|plain|failure, default is plain.
      Output is in ${junit.output.dir}.

      test.batch = ${test.batch}

    </echo>
    <junit fork="yes"
	   jvm="ptolemy/util/test/junit/javachdir"
	   printsummary="withOutAndErr"
	   showoutput="yes"
	   timeout="${timeout}">
      <classpath>
	<path refid="ptII.classpath" />
	<pathelement location="lib/lib/JUnitParams-0.3.0.jar"/>
      </classpath>
      <batchtest todir="${junit.output.dir}">
	<fileset defaultexcludes="yes"
		 dir="${basedir}">
	  <include name="${test.batch}" />
	  <patternset refid="ptII.excludes" />
	  <patternset refid="test.excludes" />
	</fileset>
      </batchtest>
      <formatter type="${junit.formatter}" />
      <jvmarg value="-Dptolemy.ptII.dir=${basedir}" />
    </junit>
  </target>

  <target name="test.auto" depends="build, initReports"
	  description="Run the auto tests in one directory (ptolemy.actor.lib.test.junit.JUnitTclTest.)">
    <echo>To run a different test, use -Dtest.name= and -Djunit.formatter=xml|brief|plain|failure</echo>
    <!-- printsummary takes one of One of on, off, and withOutAndErr.  Off is the default-->
    <junit fork="yes"
	   jvm="ptolemy/util/test/junit/javachdir"
	   printsummary="withOutAndErr"
	   showoutput="off"
	   timeout="${timeout}">
      <classpath>
	<path refid="ptII.classpath" />
	<pathelement location="lib/JUnitParams-0.3.0.jar"/>
      </classpath>
      <formatter type="${junit.formatter}" usefile="false"/>
      <jvmarg value="-Dptolemy.ptII.dir=${basedir}" />
      <test  name="${test.name}" />
    </junit>
  </target>

  <!-- Cobertura: code coverage tool -->
  <target name="test.cobertura" depends="build, initReports">
    <echo>To run different tests, use -Dtest.batch, for example:
      ant test.cobertura -Dtest.batch=ptolemy/domains/continuous/**/junit/*.java
    </echo>
    <property name="instrumented.dir" value="${ptII.reports}/instrumented" />
    <property name="cobertura.dir" value="ptserver/lib" />
    <property name="coveragereport.dir" value="${ptII.reports}/coveragereport" />
    <path id="cobertura.classpath">
      <fileset dir="${cobertura.dir}">
	<include name="cobertura.jar" />
	<include name="asm-3.0.jar" />
	<include name="asm-tree-3.0.jar" />
	<include name="jakarta-oro-2.0.8.jar" />
	<include name="log4j-1.2.9.jar" />
      </fileset>
    </path>

    <taskdef classpathref="cobertura.classpath" resource="tasks.properties" />

    <delete file="cobertura.ser" />
    <delete dir="${instrumented.dir}" />
    
    <cobertura-instrument todir="${instrumented.dir}">
      <fileset defaultexcludes="yes"
	       dir="${basedir}">
	<include name="ptolemy/**/*.class" />
	<exclude name="**/test/*.class" />
	<exclude name="**/junit/*.class" />
      </fileset>
    </cobertura-instrument>


    <!-- About forkmode,
	 http://cobertura.sourceforge.net/anttaskreference.html says:

	 "For this same reason, if you're using ant 1.6.2 or higher
	 then you might want to set forkmode="once" This will cause
	 only one JVM to be started for all your JUnit tests, and will
	 reduce the overhead of Cobertura reading/writing the coverage
	 data file each time a JVM starts/stops."

	 http://ant.apache.org/manual/Tasks/junit.html says:
	 "Controls how many Java Virtual Machines get created if you want to
	 fork some tests. Possible values are "perTest" (the default),
	 "perBatch" and "once". "once" creates only a single Java VM for all
	 tests while "perTest" creates a new VM for each TestCase
	 class. "perBatch" creates a VM for each nested <batchtest> and one
	 collecting all nested <test>s. Note that only tests with the same
	 settings of filtertrace, haltonerror, haltonfailure, errorproperty and
	 failureproperty can share a VM, so even if you set forkmode to "once",
	 Ant may have to create more than a single Java VM. This attribute is
	 ignored for tests that don't get forked into a new Java VM. since Ant
	 1.6.2"

	 However, we have to use "perTest" because javachdir needs to be
	 run for each test so that we run the test from the test directory.
      -->

    <junit fork="yes"
	   forkmode="perTest"
	   jvm="ptolemy/util/test/junit/javachdir"
	   maxmemory="1500m"
	   printsummary="withOutAndErr"
	   showoutput="no"
	   timeout="${timeout}">
      <classpath>
	<path location="${instrumented.dir}" />
	<path refid="ptII.classpath" />
	<path refid="cobertura.classpath" />
      </classpath>
      <formatter type="${junit.formatter}" />
      <batchtest todir="${junit.output.dir}">
	<fileset defaultexcludes="yes"
		 dir="${basedir}">
	  <include name="${test.batch}" />
	  <patternset refid="ptII.excludes" />
	  <patternset refid="test.excludes" />
	</fileset>
      </batchtest>
      <jvmarg value="-Dptolemy.ptII.dir=${basedir}" />
      <sysproperty key="net.sourceforge.cobertura.datafile" file="${basedir}/cobertura.ser" />
    </junit>

    <cobertura-report format="xml" destdir="${coveragereport.dir}" srcdir="${basedir}" />
  </target>

  <target name="vergil" depends="build-project"
	  description="Invoke the Ptolemy II User Interface.  To run a model, use ant vergil -Dmodel=model.xml"
	  >
    <java classname="ptolemy.vergil.VergilApplication"
	  fork="true">
      <classpath>
	<pathelement location="/Users/cxh/ptII" />
	<path refid="ptII.classpath"/>
      </classpath>
      <jvmarg value="-Xmx1024m"/>
      <arg line="${model}"/>
    </java>
  </target>

</project>
