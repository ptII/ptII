<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- $Id$
     $PTII/configure reads in build.xml.in and creates build.xml.
     If configure is not available, copy build.xml.default to build.xml. -->
<project basedir="." default="build" name="ptII">
  <!-- Ant properties. Alphabetize, please -->
  <property environment="env" />

  <!-- checkstyle.formatter defaults to xml and is used by checkstyle and test.  Try also -Dcheckstyle.formater=html. -->
  <property name="checkstyle.formatter" value="xml" />

  <property name="debuglevel" value="source,lines,vars" />

  <!-- junit.formatter defaults to plain and is used by checkstyle and test.  Other values: brief, failure, xml -->
  <property name="junit.formatter" value="plain" />

  <!-- ptII.reports contains reports generated by checkstyle, findbugs and test.
       ptII.reports must be declared before any properties that refer to it. (Lame).
    -->
  <property name="ptII.reports" value="${basedir}/reports" />

  <!-- The output director for junit. -->
  <property name="junit.output.dir" value="${ptII.reports}/junit" />

  <!-- model names the model to be opened.  The default is the empty string.  To use this, run 'ant vergil -Dmodel=foo.xml' -->
  <property name="model" value="" />

  <property name="source" value="1.5" />

  <!-- The test that is run by the test.auto target. -->
  <property name="testName" value="ptolemy.actor.lib.test.junit.JUnitTclTest" />

  <property name="target" value="1.5" />

  <!-- Ant paths. Alphabetize, please -->
  <path id="ptII.classpath">
    <pathelement location="${basedir}" />
    @ANT_CLASSPATH@
  </path>

  <!-- Ant patternsets. Alphabetize, please -->
  <patternset id="ptII.excludes">
    @ANT_ALWAYS_EXCLUDE@
    @ANT_EXCLUDE@
  </patternset>  

  <!-- Ant targets. Alphabetize and add a description, please.  -->

  <target name="checkstyle" depends="initReports"
	  description="Run checkstyle and find common code style problems.  To avoid 'OutOfMemoryError', under bash execution 'export ANT_OPTS=-Xmx1024m'">
    <taskdef resource="checkstyletask.properties" classpath="${basedir}/ptserver/lib/checkstyle-5.3-all.jar" />
    <checkstyle config="${basedir}/ptserver/checkstyle-ptserver.xml" failOnViolation="false">
      <fileset dir="${basedir}">
	<patternset refid="ptII.excludes" />
      </fileset>
      <formatter type="${checkstyle.formatter}" toFile="${ptII.reports}/checkstyle_errors.${formatter}" />
    </checkstyle>
    <!-- <xslt in="${ptII.reports}/checkstyle_errors.xml" out="${ptII.reports}/checkstyle_report.html" style="${basedir}/ptserver/checkstyle-simple.xsl"/> -->
  </target>

  <target name="clean"
	  description="Remove all the class files and the ${ptII.reports} director">
    <delete quiet="true">
      <fileset dir="${basedir}" includes="**/*.class" />
      <fileset dir="${ptII.reports}" />
    </delete>
  </target>

  <target depends="clean" name="cleanall" />

  <target depends="build-message, build-subprojects,build-project" name="build"
	  description="Build Ptolemy II by compiling the .java files.  This is the default ant target"/>

  <target name="build-message">
    <echo message="Use ant -p to see other targets."/>
  </target>

  <target name="build-subprojects" />

  <target name="build-project">
    <echo message="${ant.project.name}: ${ant.file}" />
    <javac debug="true" debuglevel="${debuglevel}" destdir="." source="${source}" target="${target}" includeAntRuntime="false" fork="true" memoryinitialsize="256m" memorymaximumsize="256m">
      <src path="${basedir}" />
      <patternset refid="ptII.excludes" />
      <classpath refid="ptII.classpath" />
    </javac>
  </target>

  <property name="findbugs.home" value="/usr/share/findbugs/" />
  <target name="findbugs" depends="build, initReports"
	  description="Run FindBugs (http://findbugs.sourceforge.net/)">
    <taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask" />
    <findbugs home="${findbugs.home}" output="xml" outputFile="${ptII.reports}/ptserver-fb.xml" jvmargs="-Xms256m -Xmx512m" includefilter="${basedir}/ptserver/findbugs-includes.xml" excludefilter="${basedir}/ptserver/findbugs-excludes.xml">
      <auxclasspath refid="ptII.classpath" />
      <sourcePath path="${basedir}" />
      <class location="ptserver/actor" />
      <class location="ptserver/communication" />
      <class location="ptserver/control" />
      <class location="ptserver/data" />
      <class location="ptserver/test" />
      <class location="ptolemy/homer" />
    </findbugs>
  </target>

  <target name="initReports">
    <mkdir dir="${junit.output.dir}" />
  </target>

  <target name="test" depends="build, initReports"
	  description="Run the junit tests in junit/*.java.  Use -Djunit.formatter=xml|brief|plain|failure, default is plain.  Output is in ${junit.output.dir}">
    <junit fork="yes"
	   jvm="ptolemy/util/test/junit/javachdir"
	   printsummary="withOutAndErr"
	   showoutput="yes"
	   timeout="30000">
      <classpath>
	<path refid="ptII.classpath" />
      </classpath>
      <batchtest todir="${junit.output.dir}">
	<fileset dir="${basedir}">
	  <include name="**/junit/*.java" />
	  <patternset refid="ptII.excludes" />
	</fileset>
      </batchtest>
      <formatter type="${junit.formatter}" />
    </junit>
  </target>

  <target name="test.auto" depends="build, initReports"
	  description="Run the auto tests in one directory, defaults to ptolemy.actor.lib.test.junit.JUnitTclTest.  To modify, use -DtestName= and -Djunit.formatter=xml|brief|plain|failure">
    <junit fork="yes"
	   jvm="ptolemy/util/test/junit/javachdir"
	   printsummary="withOutAndErr"
	   showoutput="yes"
	   timeout="300000">
      <classpath>
	<path refid="ptII.classpath" />
      </classpath>
      <formatter type="${junit.formatter}" usefile="false"/>
      <test  name="${testName}" />
    </junit>
  </target>

  <!-- Cobertura -->
  <target name="test.cobertura" depends="build, initReports">
    <property name="instrumented.dir" value="${ptII.reports}/instrumented" />
    <property name="cobertura.dir" value="ptserver/lib" />
    <property name="coveragereport.dir" value="${ptII.reports}/coveragereport" />
    <path id="cobertura.classpath">
      <fileset dir="${cobertura.dir}">
	<include name="cobertura.jar" />
	<include name="asm-3.0.jar" />
	<include name="asm-tree-3.0.jar" />
	<include name="jakarta-oro-2.0.8.jar" />
	<include name="log4j-1.2.9.jar" />
      </fileset>
    </path>
    <taskdef classpathref="cobertura.classpath" resource="tasks.properties" />
    <delete file="cobertura.ser" />
    <delete dir="${instrumented.dir}" />
    <cobertura-instrument todir="${instrumented.dir}">
      <fileset dir="${basedir}">
	<include name="ptserver/**/*.class" />
	<include name="ptolemy/homer/**/*.class" />
	<exclude name="${ptII.reports}/**/*" />
	<exclude name="ptserver/test/**/*" />
      </fileset>
    </cobertura-instrument>
    <junit printsummary="yes" fork="yes">
      <classpath>
	<path location="${instrumented.dir}" />
	<path refid="ptII.classpath" />
	<path refid="cobertura.classpath" />
      </classpath>
      <formatter type="xml" />
      <test name="ptserver.test.junit.AllTests" todir="${junit.output.dir}" />
      <!-- Cobertura -->
      <sysproperty key="net.sourceforge.cobertura.datafile" file="${basedir}/cobertura.ser" />
    </junit>
    <cobertura-report format="xml" destdir="${coveragereport.dir}" srcdir="${basedir}" />
  </target>

  <property name="ptdroid.builddir" location="${basedir}/../ptdroid/ptbin" />
  <target name="ptdroid.build">
    <copy includeemptydirs="false" todir="${ptdroid.builddir}">
      <fileset dir="${basedir}">
	<patternset refid="ptII.excludes" />
      </fileset>
    </copy>
    <echo message="${ant.project.name}: ${ant.file}" />
    <javac debug="true" debuglevel="${debuglevel}" destdir="${ptdroid.builddir}" source="${source}" includeAntRuntime="false" fork="true" memoryinitialsize="256m" memorymaximumsize="256m">
      <src path="${basedir}" />
      <patternset refid="ptII.excludes" />
      <classpath refid="ptII.classpath" />
    </javac>
  </target>

  <target name="run" depends="vergil"
	  description="Invoke the Ptolemy II User Interface (alias for the vergil target)"/>

  <target name="vergil" depends="build-project"
	  description="Invoke the Ptolemy II User Interface.  To run a model, use ant vergil -Dmodel=model.xml"
	  >
    <java classname="ptolemy.vergil.VergilApplication"
	  fork="true">
      <classpath>
	<pathelement location="/Users/cxh/ptII" />
	<path refid="ptII.classpath"/>
      </classpath>
      <jvmarg value="-Xmx1024"/>
      <arg line="${model}"/>
    </java>
  </target>

</project>
