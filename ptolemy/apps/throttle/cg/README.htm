<!-- $Id$ -->
<html>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<head>
<title>Code Generation for throttle controllers</title>
</head>
<body>
<dl>
<dt> <a href="sliding2.xml"><CODE>sliding2.xml</CODE></a>
<dd> <B>This version works under codegen</B> It takes about 3.5 minutes
to run.
<code>sliding.xml</code> modified to run.
This version uses the custom Sign actor.
 <p>Below are instructions on how to run this model
<ol>

<li> You may want to turn off virus checking so as to get the 
maximum speed.

<li> Run
<pre>
cd $PTII
jar -xf lib/diva.jar
</pre>

so that <CODE>$PTII/diva</CODE> exists (This is bug that will be fixed
some day)

<li> Make the Sign actor in <CODE>$PTII/ptolemy/apps/cg</CODE>
<pre>
    c:\users\cxh\ptII\ptolemy\apps\throttle\cg 
</pre>

<li> Start up Vergil and display this README file.
<pre>
$PTII/bin/vergil ptolemy/apps/throttle/cg/README.htm
</pre>

<li> Select <a href="sliding2.xml"><CODE>sliding2.xml</CODE></a>


<li> Run the demo, go to the window where you started up vergil.
 <br>You will see the memory usage:
<pre>
1622 ms. Memory: 11372K Free: 4828K (42%)
</pre>

<li> You may want to create a copy of <CODE>sliding2.xml</CODE>
that has a SequencePlotter instead of a FileWriter and run that.


<li>  View -&gt; Generate Code

<li> Change the directory, compile options and run options
to match your system
For example, in directory, 
<pre>
    c:\users\cxh\ptII\ptolemy\apps\throttle\cg 
</pre>

becomes
<pre>
    c:\ptII\ptolemy\apps\throttle\cg
</pre>

compile and run change from
<pre>
    -classpath "c:\users\cxh\ptII;"
</pre>

to
<pre>
    -classpath "c:\ptII;"
</pre>

If you make these changes and save the model, then you will not 
need to make them each time


<li>  Hit the Generate Button.  The run will take roughly 3.5 minutes
 <br> Note the timing and memory results, and compare them 
with the interpreted run above. 


<li> The output will be in the current directory
<a href="./"><CODE>$PTII/ptolemy/apps/throttle/cg/</CODE></a>


<li> To run the generated code by hand, run
<pre>
java -classpath "$PTII" ptolemy.apps.throttle.cg.Main
</pre>

<li> To display the java code, run the following command in
a Cygwin window:
<pre>
$PTII/bin/jode ptolemy.apps.throttle.cg.Main
</pre>
Another interesting class is
<pre>
$PTII/bin/jode ptolemy.apps.throttle.cg.CGModelsliding
</pre>

<li> To run the model by hand:
<pre>
java -classpath "$PTII" ptolemy.actor.gui.MoMLSimpleStatisticalApplication sliding2.xml
</pre>

</ol>



<dt> <a href="Controller.xml"><CODE>Controller.xml</CODE></a>
<dd> Composite Actor written by Edward A. Lee
 <br>Edward wrote:
<BLOCKQUOTE>
Attached is the model I started modifying.  It currently
just outputs a sinewave, which is probably right...
Without hooking it up to some sort of model of dynamics,
we can't expect much more.  But code generating this would
certainly be a good starting point, and make a decent demo.
</BLOCKQUOTE>
and
<BLOCKQUOTE>
Note:  Tunc's model is likely to be better, so if you have already
made some sense of his, go with that...  But if you haven't started
with his, this one will probably be more straightforward.
</BLOCKQUOTE>

<dt> <a href="sliding.xml"><CODE>sliding.xml</CODE></a>
<dd> Portion of <CODE>tunc.xml</CODE>

<dt> <a href="tunc.xml"><CODE>tunc.xml</CODE></a>
<dd> 
 Complete throttle body model from Tunc Simsek
 <p>Tunc wrote
<BLOCKQUOTE>
here is the file without modifications.  
to make it run using a single sdf controller
you would need to do the following:

 <p>replace "tunc.controller.sampled controller.real-time controller"
with the refinement of the "driver" mode of
 "tunc.controller.sampled controller.real-time controller.servo 
controller.modal controller"

 <p>And that should give you a purely SDF pedal tracking controller.

 <p>  Best,
 <br>   Tunc

 <p>ps. the version of ptolemy i'm using is the one i checked out
  and compiled on the 9th(or 10th) of January.
</BLOCKQUOTE>

</dl>

<menu>

</menu>

</body>
</html>
