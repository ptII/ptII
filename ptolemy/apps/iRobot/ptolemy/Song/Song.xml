<?xml version="1.0" standalone="no"?>
<!DOCTYPE entity PUBLIC "-//UC Berkeley//DTD MoML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd">
<entity name="Song" class="ptolemy.actor.TypedCompositeActor">
    <property name="_createdBy" class="ptolemy.kernel.attributes.VersionAttribute" value="6.1.devel">
    </property>
    <property name="StaticSchedulingCodeGenerator" class="ptolemy.codegen.kernel.StaticSchedulingCodeGenerator">
        <property name="codeDirectory" class="ptolemy.data.expr.FileParameter" value="$CWD">
        </property>
        <property name="generateJNI" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="run" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[250.0, 45.0]">
        </property>
    </property>
    <property name="SDF Director" class="ptolemy.domains.sdf.kernel.SDFDirector">
        <property name="_location" class="ptolemy.kernel.util.Location" value="[75.0, 45.0]">
        </property>
    </property>
    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={176, 26, 815, 518}, maximized=false}">
    </property>
    <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[600, 400]">
    </property>
    <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.0">
    </property>
    <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{300.0, 200.0}">
    </property>
    <property name="Annotation" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="In this example, pushing the play button on the iRobot Create&#10;plays a song and lights an LED on each of the command module&#10;and the iRobot Create. Pushing the advance button lights the&#10;other two LEDs.">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[160.0, 90.0]">
        </property>
    </property>
    <entity name="InitializeAndRun" class="ptolemy.domains.fsm.modal.ModalModel">
        <property name="_tableauFactory" class="ptolemy.vergil.fsm.modal.ModalTableauFactory">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[60.0, 145.0]">
        </property>
        <entity name="_Controller" class="ptolemy.domains.fsm.modal.ModalController">
            <property name="_library" class="ptolemy.moml.LibraryAttribute">
                <configure>
        <entity name="state library" class="ptolemy.kernel.CompositeEntity"><input source="ptolemy/configs/basicUtilities.xml"></input><entity name="state" class="ptolemy.domains.fsm.kernel.State"><property name="_centerName" class="ptolemy.kernel.util.Attribute"></property><property name="_controllerFactory" class="ptolemy.vergil.fsm.modal.HierarchicalStateControllerFactory"></property></entity></entity>
      </configure>
            </property>
            <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={104, 125, 815, 518}, maximized=false}">
            </property>
            <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[600, 400]">
            </property>
            <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.0">
            </property>
            <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{300.0, 200.0}">
            </property>
            <entity name="init" class="ptolemy.domains.fsm.kernel.State">
                <property name="refinementName" class="ptolemy.kernel.util.StringAttribute" value="init">
                </property>
                <property name="_hideName" class="ptolemy.data.expr.SingletonParameter" value="true">
                </property>
                <property name="_controllerFactory" class="ptolemy.vergil.fsm.modal.HierarchicalStateControllerFactory">
                </property>
                <property name="_location" class="ptolemy.kernel.util.Location" value="{95, 165}">
                </property>
            </entity>
            <entity name="run" class="ptolemy.domains.fsm.kernel.State">
                <property name="refinementName" class="ptolemy.kernel.util.StringAttribute" value="run">
                </property>
                <property name="_hideName" class="ptolemy.data.expr.SingletonParameter" value="true">
                </property>
                <property name="_controllerFactory" class="ptolemy.vergil.fsm.modal.HierarchicalStateControllerFactory">
                </property>
                <property name="_location" class="ptolemy.kernel.util.Location" value="{175.0, 165.0}">
                </property>
            </entity>
            <relation name="relation" class="ptolemy.domains.fsm.kernel.Transition">
                <property name="guardExpression" class="ptolemy.kernel.util.StringAttribute" value="true">
                </property>
                <property name="exitAngle" class="ptolemy.data.expr.Parameter" value="0.6283185307179586">
                </property>
                <property name="gamma" class="ptolemy.data.expr.Parameter" value="0.12837932067766744">
                </property>
                <property name="reset" class="ptolemy.data.expr.Parameter" value="false">
                </property>
                <property name="preemptive" class="ptolemy.data.expr.Parameter" value="false">
                </property>
                <property name="defaultTransition" class="ptolemy.data.expr.Parameter" value="false">
                </property>
                <property name="nondeterministic" class="ptolemy.data.expr.Parameter" value="false">
                </property>
            </relation>
            <link port="init.outgoingPort" relation="relation"/>
            <link port="run.incomingPort" relation="relation"/>
        </entity>
        <entity name="init" class="ptolemy.domains.fsm.modal.Refinement">
            <property name="SDF Director" class="ptolemy.domains.sdf.kernel.SDFDirector">
                <property name="_location" class="ptolemy.kernel.util.Location" value="[80.0, 50.0]">
                </property>
            </property>
            <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={30, 266, 815, 518}, maximized=false}">
            </property>
            <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[600, 400]">
            </property>
            <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.0">
            </property>
            <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{300.0, 200.0}">
            </property>
            <entity name="initializeIRobot" class="ptolemy.actor.lib.jni.EmbeddedCActor">
                <property name="embeddedCCode" class="ptolemy.kernel.util.StringAttribute" value="/***fileDependencies***/&#10;oi.h&#10;iRobotFunctions.c&#10;/**/&#10;&#10;/***preinitBlock***/&#10;// Include the functions file if it has not already been included.&#10;#ifndef I_ROBOT_FUNCTIONS&#10;#define I_ROBOT_FUNCTIONS&#10;#include &quot;iRobotFunctions.c&quot;&#10;#endif&#10;/**/&#10;&#10;/***initBlock***/&#10;  // Initialize the microcontroller&#10;  initializeRobot();&#10;&#10;  // Turn on the Create power if off&#10;  powerOnRobot();&#10;&#10;  // Start the open interface&#10;  byteTx(CmdStart);&#10;&#10;  // Change to 28800 baud&#10;  baud28k();&#10;&#10;  // Take full control of the Create&#10;  byteTx(CmdFull);&#10;&#10;  // Get rid of unwanted data in the serial port receiver&#10;  flushRx();&#10;/**/&#10;&#10;/***fireBlock***/&#10;/**/&#10;&#10;/***wrapupBlock***/&#10;/**/&#10;&#10;">
                </property>
                <property name="SDFDirector" class="ptolemy.domains.sdf.kernel.SDFDirector">
                    <property name="_location" class="ptolemy.kernel.util.Location" value="[125.0, 115.0]">
                    </property>
                </property>
                <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
                    <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="embeddedCCode">
                    </property>
                </property>
                <property name="_location" class="ptolemy.kernel.util.Location" value="[100.0, 140.0]">
                </property>
                <property name="CodeGenerator_AutoAdded" class="ptolemy.codegen.kernel.StaticSchedulingCodeGenerator">
                    <property name="codeDirectory" class="ptolemy.data.expr.FileParameter" value="$HOME/codegen/">
                        <property name="allowFiles" class="ptolemy.data.expr.Parameter" value="false">
                        </property>
                        <property name="allowDirectories" class="ptolemy.data.expr.Parameter" value="true">
                        </property>
                    </property>
                    <property name="compile" class="ptolemy.data.expr.Parameter" value="true">
                    </property>
                    <property name="compileTarget" class="ptolemy.data.expr.StringParameter" value="">
                    </property>
                    <property name="generatorPackage" class="ptolemy.data.expr.StringParameter" value="ptolemy.codegen.c">
                    </property>
                    <property name="generateComment" class="ptolemy.data.expr.Parameter" value="true">
                    </property>
                    <property name="generateJNI" class="ptolemy.data.expr.Parameter" value="true">
                    </property>
                    <property name="inline" class="ptolemy.data.expr.Parameter" value="false">
                    </property>
                    <property name="overwriteFiles" class="ptolemy.data.expr.Parameter" value="true">
                    </property>
                    <property name="run" class="ptolemy.data.expr.Parameter" value="true">
                    </property>
                    <property name="sourceLineBinding" class="ptolemy.data.expr.Parameter" value="false">
                    </property>
                </property>
            </entity>
        </entity>
        <entity name="run" class="ptolemy.domains.fsm.modal.Refinement">
            <property name="SDF Director" class="ptolemy.domains.sdf.kernel.SDFDirector">
                <property name="synchronizeToRealTime" class="ptolemy.data.expr.Parameter" value="false">
                </property>
                <property name="_location" class="ptolemy.kernel.util.Location" value="[70.0, 40.0]">
                </property>
            </property>
            <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={30, 30, 815, 518}, maximized=false}">
            </property>
            <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[600, 400]">
            </property>
            <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.0">
            </property>
            <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{300.0, 200.0}">
            </property>
            <entity name="iRobotButtons" class="ptolemy.actor.lib.jni.EmbeddedCActor">
                <property name="embeddedCCode" class="ptolemy.kernel.util.StringAttribute" value="/***preinitBlock***/&#10;/**/&#10;&#10;/***initBlock***/&#10;/**/&#10;&#10;/***fireBlock***/&#10;    // Request Sensors Packet 2&#10;    byteTx(CmdSensors);&#10;    byteTx(2);&#10;&#10;    // Read the 6 bytes, only keep the Play button&#10;    // Send it to the output.&#10;    byteRx();&#10;    uint8_t buttons = byteRx();&#10;    // Note that boolean outputs are the same as uint8_t.&#10;    $ref(play) = (buttons &amp; ButtonPlay);&#10;    $ref(advance) = (buttons &amp; ButtonAdvance);&#10;    byteRx();&#10;    byteRx();&#10;    byteRx();&#10;    byteRx();&#10;&#10;/**/&#10;&#10;/***wrapupBlock***/&#10;/**/&#10;&#10;">
                </property>
                <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
                    <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="embeddedCCode">
                    </property>
                </property>
                <property name="_location" class="ptolemy.kernel.util.Location" value="{45.0, 140.0}">
                </property>
                <port name="play" class="ptolemy.actor.TypedIOPort">
                    <property name="output"/>
                    <property name="_type" class="ptolemy.actor.TypeAttribute" value="boolean">
                    </property>
                    <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
                    </property>
                </port>
                <port name="advance" class="ptolemy.actor.TypedIOPort">
                    <property name="output"/>
                    <property name="_type" class="ptolemy.actor.TypeAttribute" value="boolean">
                    </property>
                    <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
                    </property>
                </port>
            </entity>
            <entity name="LEDs" class="ptolemy.actor.lib.jni.EmbeddedCActor">
                <property name="embeddedCCode" class="ptolemy.kernel.util.StringAttribute" value="// Turn on or off the LEDs on the iRobot Create&#10;// and the command module.  If the toggle parameter is false&#10;// (the default), then if the corresponding input&#10;// is true, the LED is turned on, and otherwise it&#10;// is turned off. If the toggle parameter&#10;// is true, then each time a true input is received&#10;// on the relevant port after a false has been received&#10;// since the last true, the corresponding LED state&#10;// is reversed (if it is on, it goes off, and if it is&#10;// off, it goes on). This actor always produces a true&#10;// value on its output; the output is useful to ensure&#10;// that downstream actors execute after this one.&#10;&#10;/***preinitBlock***/&#10;  // Start in a state that assumes a false has been received&#10;  // And each LED is off. These variables are not needed&#10;  // if toggle is false.&#10;  #if $val(toggle)&#10;  uint8_t $actorSymbol(advanceFalseReceived) = 0x01;&#10;  uint8_t $actorSymbol(playFalseReceived) = 0x01;&#10;  uint8_t $actorSymbol(LED1FalseReceived) = 0x01;&#10;  uint8_t $actorSymbol(LED2FalseReceived) = 0x01;&#10;  #endif&#10;  uint8_t $actorSymbol(LEDCommand) = 0x00;&#10;/**/&#10;&#10;/***initBlock***/&#10;/**/&#10;&#10;/***fireBlock***/&#10;    // First handle the input for the iRobot Create Advance LED.&#10;    if($ref(advanceLED)) {&#10;      // True input received.&#10;      // Note use of preprocessor for conditional code.&#10;      #if ($val(toggle))&#10;        // If the input differs from what it was&#10;        // on the previous firing and is true, then&#10;        // toggle the state of the LED.&#10;        if ($actorSymbol(advanceFalseReceived)) {&#10;          // First true since the last false. Toggle.&#10;          if ($actorSymbol(LEDCommand) &amp; LEDAdvance) {&#10;            // LED is ON. Turn it off.&#10;            $actorSymbol(LEDCommand) &amp;= ~LEDAdvance;&#10;          } else {&#10;            // LED is OFF. Turn it on.&#10;            $actorSymbol(LEDCommand) |= LEDAdvance;&#10;          }&#10;        }&#10;        // Indicate that a false has NOT been received.&#10;        $actorSymbol(advanceFalseReceived) = 0;&#10;      #else&#10;        // toggle is false.&#10;        // Just turn on the LED.&#10;        $actorSymbol(LEDCommand) |= LEDAdvance;&#10;      #endif&#10;    } else {&#10;      // False input is received.&#10;      // If toggle is false, then turn the LED off.&#10;      // Note use of preprocessor for conditional code.&#10;      #if ($val(toggle))&#10;        // Indicate that a false has been received.&#10;        $actorSymbol(advanceFalseReceived) = 1;&#10;      #else&#10;        // Just turn off the LED.&#10;        $actorSymbol(LEDCommand) &amp;= ~LEDAdvance;&#10;      #endif&#10;    }&#10;    // Next handle the input for the iRobot Create Play LED.&#10;    if($ref(playLED)) {&#10;      // True input received.&#10;      // Note use of preprocessor for conditional code.&#10;      #if ($val(toggle))&#10;        // If the input differs from what it was&#10;        // on the previous firing and is true, then&#10;        // toggle the state of the LED.&#10;        if ($actorSymbol(playFalseReceived)) {&#10;          // First true since the last false. Toggle.&#10;          if ($actorSymbol(LEDCommand) &amp; LEDPlay) {&#10;            // LED is ON. Turn it off.&#10;            $actorSymbol(LEDCommand) &amp;= ~LEDPlay;&#10;          } else {&#10;            // LED is OFF. Turn it on.&#10;            $actorSymbol(LEDCommand) |= LEDPlay;&#10;          }&#10;        }&#10;        // Indicate that a false has NOT been received.&#10;        $actorSymbol(playFalseReceived) = 0;&#10;      #else&#10;        // toggle is false.&#10;        // Just turn on the LED.&#10;        $actorSymbol(LEDCommand) |= LEDPlay;&#10;      #endif&#10;    } else {&#10;      // False input is received.&#10;      // If toggle is false, then turn the LED off.&#10;      // Note use of preprocessor for conditional code.&#10;      #if ($val(toggle))&#10;        // Indicate that a false has been received.&#10;        $actorSymbol(playFalseReceived) = 1;&#10;      #else&#10;        // Just turn off the LED.&#10;        $actorSymbol(LEDCommand) &amp;= ~LEDPlay;&#10;      #endif&#10;    }&#10;    // Issue the command for both LEDs on the iRobot Create.&#10;    byteTx(CmdLeds);&#10;    byteTx($actorSymbol(LEDCommand));&#10;    byteTx(0);&#10;    byteTx(0);&#10;&#10;    // Next handle the inputs for the command module LEDs.&#10;    if($ref(commandModuleLED1)) {&#10;      // True input received.&#10;      // Note use of preprocessor for conditional code.&#10;      #if ($val(toggle))&#10;        // If the input differs from what it was&#10;        // on the previous firing and is true, then&#10;        // toggle the state of the LED.&#10;        if ($actorSymbol(LED1FalseReceived)) {&#10;          // First true since the last false. Toggle.&#10;          PORTD ^= LED1;&#10;        }&#10;        // Indicate that a false has NOT been received.&#10;        $actorSymbol(LED1FalseReceived) = 0;&#10;      #else&#10;        // toggle is false.&#10;        // Just turn on the LED.&#10;        // Note that &quot;on&quot; is low.&#10;        PORTD &amp;= ~LED1;&#10;      #endif&#10;    } else {&#10;      // False input is received.&#10;      // If toggle is false, then turn the LED off.&#10;      // Note use of preprocessor for conditional code.&#10;      #if ($val(toggle))&#10;        // Indicate that a false has been received.&#10;        $actorSymbol(LED1FalseReceived) = 1;&#10;      #else&#10;        // Just turn off the LED.&#10;        // Note that &quot;off&quot; is high.&#10;        PORTD |= LED1;&#10;      #endif&#10;    }&#10;    // Finally, LED2.&#10;    if($ref(commandModuleLED2)) {&#10;      // True input received.&#10;      // Note use of preprocessor for conditional code.&#10;      #if $val(toggle)&#10;        // If the input differs from what it was&#10;        // on the previous firing and is true, then&#10;        // toggle the state of the LED.&#10;        if ($actorSymbol(LED2FalseReceived)) {&#10;          // First true since the last false. Toggle.&#10;          PORTD ^= LED2;&#10;        }&#10;        // Indicate that a false has NOT been received.&#10;        $actorSymbol(LED2FalseReceived) = 0;&#10;      #else&#10;        // toggle is false.&#10;        // Just turn on the LED.&#10;        // Note that &quot;on&quot; is low.&#10;        PORTD &amp;= ~LED2;&#10;      #endif&#10;    } else {&#10;      // False input is received.&#10;      // If toggle is false, then turn the LED off.&#10;      // Note use of preprocessor for conditional code.&#10;      #if $val(toggle)&#10;        // Indicate that a false has been received.&#10;        $actorSymbol(LED2FalseReceived) = 1;&#10;      #else&#10;        // Just turn off the LED.&#10;        // Note that &quot;off&quot; is high.&#10;        PORTD |= LED2;&#10;      #endif&#10;      $ref(done) = 0x01;&#10;    }&#10;/**/&#10;&#10;/***wrapupBlock***/&#10;/**/&#10;&#10;">
                </property>
                <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
                    <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="embeddedCCode">
                    </property>
                </property>
                <property name="_location" class="ptolemy.kernel.util.Location" value="[257.53662872314453, 140.5424690246582]">
                </property>
                <property name="toggle" class="ptolemy.data.expr.Parameter" value="false">
                </property>
                <port name="advanceLED" class="ptolemy.actor.TypedIOPort">
                    <property name="input"/>
                    <property name="_type" class="ptolemy.actor.TypeAttribute" value="boolean">
                    </property>
                    <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
                    </property>
                </port>
                <port name="playLED" class="ptolemy.actor.TypedIOPort">
                    <property name="input"/>
                    <property name="_type" class="ptolemy.actor.TypeAttribute" value="boolean">
                    </property>
                    <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
                    </property>
                </port>
                <port name="commandModuleLED1" class="ptolemy.actor.TypedIOPort">
                    <property name="input"/>
                    <property name="_type" class="ptolemy.actor.TypeAttribute" value="boolean">
                    </property>
                    <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
                    </property>
                </port>
                <port name="commandModuleLED2" class="ptolemy.actor.TypedIOPort">
                    <property name="input"/>
                    <property name="_type" class="ptolemy.actor.TypeAttribute" value="boolean">
                    </property>
                    <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
                    </property>
                </port>
                <port name="done" class="ptolemy.actor.TypedIOPort">
                    <property name="output"/>
                    <property name="_type" class="ptolemy.actor.TypeAttribute" value="boolean">
                    </property>
                </port>
            </entity>
            <entity name="PlaySong" class="ptolemy.actor.lib.jni.EmbeddedCActor">
                <property name="embeddedCCode" class="ptolemy.kernel.util.StringAttribute" value="/** When given a true input, play a song.&#10; *  If the delay parameter is true, then busy&#10; *  wait while the song plays and then produce&#10; *  a true output. Otherwise, produce a true output&#10; *  as soon as the commands have been sent to iRobot&#10; *  Create.&#10; */&#10;&#10;// FIXME: Notes should be specified as a parameter.&#10;&#10;/***preinitBlock***/&#10;// Define constants if they have not been previously defined,&#10;// and send commands to the iRobot Create to define the songs.&#10;#ifndef CREATE_SONG&#10;#define CREATE_SONG  0&#10;#define MODULE_SONG  1&#10;#define USER_HW_SONG 2&#10;#endif&#10;/**/&#10;&#10;/***initBlock***/&#10;  // First song.&#10;  byteTx(CmdSong);&#10;  // Song number.&#10;  byteTx(CREATE_SONG);&#10;  // Number of notes.&#10;  byteTx(5);&#10;  // Midi note in the range 31-127 (otherwise a rest).&#10;  byteTx(65);&#10;  // Note duration in 1/64 second.&#10;  byteTx(24);&#10;  byteTx(69);&#10;  byteTx(24);&#10;  byteTx(67);&#10;  byteTx(48);&#10;  byteTx(76);&#10;  byteTx(24);&#10;  byteTx(77);&#10;  byteTx(48);&#10;&#10;  // Second song.&#10;  byteTx(CmdSong);&#10;  byteTx(MODULE_SONG);&#10;  byteTx(6);&#10;  byteTx(71);&#10;  byteTx(24);&#10;  byteTx(71);&#10;  byteTx(24);&#10;  byteTx(71);&#10;  byteTx(24);&#10;  byteTx(72);&#10;  byteTx(24);&#10;  byteTx(77);&#10;  byteTx(48);&#10;  byteTx(76);&#10;  byteTx(48);&#10;&#10;  // Third song.&#10;  byteTx(CmdSong);&#10;  byteTx(USER_HW_SONG);&#10;  byteTx(5);&#10;  byteTx(62);&#10;  byteTx(48);&#10;  byteTx(65);&#10;  byteTx(24);&#10;  byteTx(67);&#10;  byteTx(24);&#10;  byteTx(62);&#10;  byteTx(24);&#10;  byteTx(69);&#10;  byteTx(48);&#10;/**/&#10;&#10;/***fireBlock***/&#10;    if($ref(trigger)) {&#10;      byteTx(CmdPlay);&#10;      byteTx(CREATE_SONG);&#10;      #if $val(delay)&#10;      // FIXME: Calculate the delay from the song.&#10;      delay10ms(263);&#10;      #endif&#10;   }&#10;/**/&#10;&#10;/***wrapupBlock***/&#10;/**/&#10;&#10;">
                </property>
                <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
                    <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="embeddedCCode">
                    </property>
                </property>
                <property name="_location" class="ptolemy.kernel.util.Location" value="{195.0, 80.0}">
                </property>
                <property name="delay" class="ptolemy.data.expr.Parameter" value="true">
                </property>
                <port name="trigger" class="ptolemy.actor.TypedIOPort">
                    <property name="input"/>
                    <property name="_type" class="ptolemy.actor.TypeAttribute" value="boolean">
                    </property>
                </port>
                <port name="done" class="ptolemy.actor.TypedIOPort">
                    <property name="output"/>
                    <property name="_type" class="ptolemy.actor.TypeAttribute" value="boolean">
                    </property>
                </port>
            </entity>
            <entity name="BusyWait" class="ptolemy.actor.lib.jni.EmbeddedCActor">
                <property name="embeddedCCode" class="ptolemy.kernel.util.StringAttribute" value="/** If the input is true, then&#10; *  busy wait for the number of milliseconds&#10; *  given by the milliseconds parameter.&#10; */&#10;&#10;/***preinitBlock***/&#10;/**/&#10;&#10;/***initBlock***/&#10;/**/&#10;&#10;/***fireBlock***/&#10;    if($ref(trigger)) {&#10;      delay1ms($val(milliseconds));&#10;   }&#10;   $ref(done) = true;&#10;/**/&#10;&#10;/***wrapupBlock***/&#10;/**/&#10;&#10;">
                </property>
                <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
                    <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="embeddedCCode">
                    </property>
                </property>
                <property name="_location" class="ptolemy.kernel.util.Location" value="[435.0, 105.0]">
                </property>
                <property name="milliseconds" class="ptolemy.data.expr.Parameter" value="100">
                </property>
                <port name="trigger" class="ptolemy.actor.TypedIOPort">
                    <property name="input"/>
                    <property name="_type" class="ptolemy.actor.TypeAttribute" value="boolean">
                    </property>
                </port>
                <port name="done" class="ptolemy.actor.TypedIOPort">
                    <property name="output"/>
                    <property name="_type" class="ptolemy.actor.TypeAttribute" value="boolean">
                    </property>
                </port>
            </entity>
            <entity name="LogicFunction" class="ptolemy.actor.lib.logic.LogicFunction">
                <property name="function" class="ptolemy.kernel.util.StringAttribute" value="and">
                    <property name="style" class="ptolemy.actor.gui.style.ChoiceStyle">
                        <property name="and" class="ptolemy.kernel.util.StringAttribute" value="and">
                        </property>
                        <property name="or" class="ptolemy.kernel.util.StringAttribute" value="or">
                        </property>
                        <property name="xor" class="ptolemy.kernel.util.StringAttribute" value="xor">
                        </property>
                        <property name="nand" class="ptolemy.kernel.util.StringAttribute" value="nand">
                        </property>
                        <property name="nor" class="ptolemy.kernel.util.StringAttribute" value="nor">
                        </property>
                        <property name="xnor" class="ptolemy.kernel.util.StringAttribute" value="xnor">
                        </property>
                    </property>
                </property>
                <property name="_icon" class="ptolemy.vergil.icon.AttributeValueIcon">
                    <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="function">
                    </property>
                </property>
                <property name="_location" class="ptolemy.kernel.util.Location" value="[345.0, 105.0]">
                </property>
            </entity>
            <relation name="relation3" class="ptolemy.actor.TypedIORelation">
                <property name="width" class="ptolemy.data.expr.Parameter" value="1">
                </property>
            </relation>
            <relation name="relation4" class="ptolemy.actor.TypedIORelation">
                <property name="width" class="ptolemy.data.expr.Parameter" value="1">
                </property>
            </relation>
            <relation name="relation5" class="ptolemy.actor.TypedIORelation">
                <property name="width" class="ptolemy.data.expr.Parameter" value="1">
                </property>
            </relation>
            <relation name="relation6" class="ptolemy.actor.TypedIORelation">
                <property name="width" class="ptolemy.data.expr.Parameter" value="1">
                </property>
                <vertex name="vertex1" value="[130.0, 130.0]">
                </vertex>
            </relation>
            <relation name="relation" class="ptolemy.actor.TypedIORelation">
                <property name="width" class="ptolemy.data.expr.Parameter" value="1">
                </property>
                <vertex name="vertex1" value="[110.0, 150.0]">
                </vertex>
            </relation>
            <link port="iRobotButtons.play" relation="relation6"/>
            <link port="iRobotButtons.advance" relation="relation"/>
            <link port="LEDs.advanceLED" relation="relation"/>
            <link port="LEDs.playLED" relation="relation6"/>
            <link port="LEDs.commandModuleLED1" relation="relation"/>
            <link port="LEDs.commandModuleLED2" relation="relation6"/>
            <link port="LEDs.done" relation="relation5"/>
            <link port="PlaySong.trigger" relation="relation6"/>
            <link port="PlaySong.done" relation="relation4"/>
            <link port="BusyWait.trigger" relation="relation3"/>
            <link port="LogicFunction.input" relation="relation4"/>
            <link port="LogicFunction.input" relation="relation5"/>
            <link port="LogicFunction.output" relation="relation3"/>
        </entity>
    </entity>
</entity>
