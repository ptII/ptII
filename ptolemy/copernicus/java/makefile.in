# Makefile for Ptolemy II Java deep code generation
#
# @Authors: Steve Neuendorffer, Christopher Hylands
#
# @Version: $Id$
#
# @Copyright (c) 1998-2008 The Regents of the University of California.
# All rights reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
#
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY

# Root of the Java directory
ROOT =		@ptII@

CLASSPATH = 	$(ROOT)$(CLASSPATHSEPARATOR)$(ROOT)/lib/diva.jar$(CLASSPATHSEPARATOR)$(SOOT_CLASSES)$(CLASSPATHSEPARATOR)$(ROOT)/vendors/sun/commapi/comm.jar$(AUXCLASSPATH)@extraClassPath@

# Get configuration info
CONFIG =	$(ROOT)/mk/ptII.mk
include $(CONFIG)

# Used to build jar files
PTPACKAGE = 	@modelName@
PTCLASSJAR = 	$(PTPACKAGE).jar

# Keep this list alphabetized.
CSRCS = 	@cFiles@

JSRCS = 

JCLASS = 	@javaClasses@

OTHER_FILES_TO_BE_JARED = \
	$(JSRCS)

EXTRA_SRCS =	$(JSRCS) $(OTHER_FILES_TO_BE_JARED)

# Sources that may or may not be present, but if they are present, we don't
# want make checkjunk to barf on them.
MISC_FILES =	$(DIRS)

# make checkjunk will not report OPTIONAL_FILES as trash
# make distclean removes OPTIONAL_FILES
OPTIONAL_FILES = \
	doc

JCLASS = $(JSRCS:%.java=%.class)

all: jclass
	@echo "To run the generated code, run 'make runJava'"
	@echo "Other rules include:"
	@echo "  make treeShake"
	@echo "  make runTreeShake"
	@echo "  make treeShakeAll"
	@echo "  make obfuscate"

install: all $(PTCLASSJAR)

MODEL =			@modelName@
MODELPATH =		@modelPath@

# Location where we create code that we are generating
TARGETPACKAGE = 	@targetPackage@
TARGETPATH =		@outDir@

TARGETCLASS = $(TARGETPACKAGE).$(MODEL)

# Package that the decompiler creates classes in
DECOMPILERTARGETPACKAGE =	$(TARGETPACKAGE)
# Directory that the decompiler creates classes in
DECOMPILERTARGETPATH =		$(TARGETPATH)

JVMSIZE = -Xmx256m

# Flags to java when collecting memory usage information.  This should
# (hopefully) prevent the incremental GC from being called prior to
# the application finishing. Additionally, it will report every time
# the GC is run.
GCLOGFILE = gclog.txt
MEMORYJFLAGS = -Xmx256m -Xms256m -Xloggc:$(GCLOGFILE)

# Soot command line arguments for the user.  To list all the arguments, use
# make COMPILEOPTIONS=-h
COMPILEOPTIONS=

# Time that we should let code generation run before exiting in ms.
WATCHDOGTIMEOUT =     600000
# Number of Iterations to run the generated code for.
ITERATIONS =		1000
ITERATIONSPARAMETER =	,iterations:$(ITERATIONS)

# Directories that contain snapshots.
SNAPSHOTS=jimple1 jimple2 jimple3 jimple4

# The statistics file for running comparisons.
STATSFILE=runSnapShot.stats

# The prefix for treeshaken jar files.
TREESHAKE_PREFIX = $(TARGETPATH)treeshake

# The place where treeshake scripts are.
TREESHAKE=$(ROOT)/util/testsuite/treeshake

# The rule run by the long nightly build test: $PTII/util/testsuite/codegen.tcl
# The compareAll rule is not working, so we just run the Java
longTest: runJava #compareAll

# The rule run by the regular nightly build quick smoke test: 
# copernicus/java/test
smokeTest: treeShake runTreeShake

# Run the final generated code.
runJava:
	@echo "Run the deep model"
	"$(JAVA)" \
	-Xfuture -classpath "$(TARGETPATH)$(CLASSPATHSEPARATOR)$(CLASSPATH)" \
	$(TARGETPACKAGE).Main 

# Run a complete profiling and compare the outputs.
compareAll: treeShakeAll profileAll compareTreeShakeJars

# TreeShake all versions of the generated code.
treeShakeAll: treeShakeWithoutCodegen  \
		treeShake

#		treeShakeSnapshots

# Profile all versions of the generated code.
profileAll: profileTreeShakeWithoutCodegen \
	profileTreeShake

# obfuscate has problems with jode 1.1.1 and 1.1.2pre-1 and Java 1.5
#        profileObfuscate
#	profileGcj

#	profileTreeShakeSnapshots

######################################################
# Rules for dealing with final codegen version
treeShake:
	@echo "Create the minimal jar file from the final codegen version"
	@echo "  using the jarClassList.txt file"
	@"$(TREESHAKE)" "$(JAR)" $(TREESHAKE_PREFIX)_codegen.jar \
		-c $(TARGETPATH)jarClassList.txt \
		-main $(TARGETPACKAGE).Main \
		"$(JAVA)" \
			-classpath "$(TARGETPATH)$(CLASSPATHSEPARATOR)$(CLASSPATH)" \
			$(TARGETPACKAGE).Main | tail -1
	@ls -l $(TREESHAKE_PREFIX)_codegen.jar;
	@echo "Run 'make runTreeShake' to run the tree shaken version"

treeShakeByRunning:
	@echo "Create the minimal jar file from the final codegen version"
	@"$(TREESHAKE)" "$(JAR)" $(TREESHAKE_PREFIX)_codegen.jar \
		-main $(TARGETPACKAGE).Main \
		"$(JAVA)" \
			-classpath "$(TARGETPATH)$(CLASSPATHSEPARATOR)$(CLASSPATH)" \
			$(TARGETPACKAGE).Main | tail -1
	@ls -l $(TREESHAKE_PREFIX)_codegen.jar;
	@echo "Run 'make runTreeShake' to run the tree shaken version"

runTreeShake:
	@echo "Run the final codegen version"
	@echo "Note that you can run the codegen version by hand with"
	@echo "  java -jar $(TREESHAKE_PREFIX)_codegen.jar"
	"$(JAVA)" -classpath $(TREESHAKE_PREFIX)_codegen.jar \
			$(TARGETPACKAGE).Main

profileTreeShake:
	@echo "Profile the final codegen version"
	@echo "Note that you can run the codegen version by hand with"
	@echo "  java -jar $(TREESHAKE_PREFIX)_codegen.jar"
	@rm -f  $(STATSFILE)
	@for repeat in 1 2 3 4; \
	do \
		"$(JAVA)" $(MEMORYJFLAGS) \
			-classpath $(TREESHAKE_PREFIX)_codegen.jar \
			$(TARGETPACKAGE).Main | tail -1 | \
			tee -a $(STATSFILE); \
                "$(ROOT)/util/testsuite/gcstats" < "$(GCLOGFILE)" | tee -a $(STATSFILE); \
	done
	@"$(ROOT)/util/testsuite/memorystats" "$(MODEL) codegen" < $(STATSFILE);
	@rm -f $(STATSFILE)

######################################################
# Rules for dealing with original model
treeShakeWithoutCodegen:
	@echo "Treeshake $(MODEL) without codegen"
	@CLASSPATH="$(CLASSPATH)" \
		"$(TREESHAKE)" "$(JAR)" $(TREESHAKE_PREFIX).jar \
			-main ptolemy.copernicus.java.TestApplication \
			"$(JAVA)" \
			ptolemy.copernicus.java.TestApplication \
			"$(MODELPATH)" \
			| tail -1
	ls -l $(TREESHAKE_PREFIX).jar

runTreeShakeWithoutCodegen:
	@echo "Run the final codegen version"
	@echo "Note that you can run the original version by hand with"
	@echo "  java -jar $(TREESHAKE_PREFIX).jar"
	"$(JAVA)" -classpath $(TREESHAKE_PREFIX).jar \
		ptolemy.copernicus.java.TestApplication \
		$(MODELPATH) 

profileTreeShakeWithoutCodegen:
	@echo "Profile without codegen with treeshake.jar"
	@rm -f  $(STATSFILE)
	@for repeat in 1 2 3 4; \
	do \
		"$(JAVA)" $(MEMORYJFLAGS) \
			-classpath $(TREESHAKE_PREFIX).jar \
			ptolemy.copernicus.java.TestApplication \
			$(MODELPATH) | tail -1 | \
			tee -a $(STATSFILE); \
                "$(ROOT)/util/testsuite/gcstats" < "$(GCLOGFILE)" |\
			tee -a $(STATSFILE); \
	done
	"$(ROOT)/util/testsuite/memorystats" "$(MODEL) interpreted" < $(STATSFILE)

######################################################
# Rules for dealing with snapshots
treeShakeAndProfileSnapshots: treeShakeSnapshots runTreeShakeSnapshots

treeShakeSnapshots:
	@echo "Treeshake $(MODEL) snapshots"
	for snapshot in $(SNAPSHOTS); \
	do \
		echo "Treeshake $$snapshot"; \
		"$(TREESHAKE)" "$(JAR)" $(TREESHAKE_PREFIX)_$${snapshot}.jar \
			-c $(TARGETPATH)$${snapshot}/jarClassList.txt \
			-main $(TARGETPACKAGE).Main \
			"$(JAVA)" -Xfuture -classpath \
		"$(TARGETPATH)$$snapshot$(CLASSPATHSEPARATOR)$(CLASSPATH)" \
					$(TARGETPACKAGE).Main | tail -1 ; \
		ls -l $(TREESHAKE_PREFIX)_$${snapshot}.jar; \
	done	

runTreeShakeSnapshots:
	@echo "Treeshake $(MODEL) snapshots"
	for snapshot in $(SNAPSHOTS); \
	do \
		echo "Run the code from $(TARGETPATH)$${snapshot}"; \
		"$(JAVA)" -classpath $(TREESHAKE_PREFIX)_$${snapshot}.jar \
			$(TARGETPACKAGE).Main; \
	done

profileTreeShakeSnapshots:
	@echo "Treeshake $(MODEL) snapshots"
	for snapshot in $(SNAPSHOTS); \
	do \
		echo "Profile the code from $(TARGETPATH)$${snapshot}"; \
		rm -f  $(STATSFILE); \
		for repeat in 1 2 3 4; \
		do \
			"$(JAVA)" $(MEMORYJFLAGS) \
				-classpath $(TREESHAKE_PREFIX)_$${snapshot}.jar \
				$(TARGETPACKAGE).Main | tail -1 | \
				tee -a $(STATSFILE); \
	                "$(ROOT)/util/testsuite/gcstats" < "$(GCLOGFILE)" |\
				tee -a $(STATSFILE); \
		done; \
		"$(ROOT)/util/testsuite/memorystats" "$(MODEL) $$snapshot" < $(STATSFILE); \
	done

# Compare codegen to original jar file.
compareTreeShakeJars:
	@echo "See ${TREESHAKE_PREFIX}_jardiff.txt"
	@echo "  for the .class files are present in the regular jar,"
	@echo "  but not in the codegen jar"
	@"$(JAR)" -tvf ${TREESHAKE_PREFIX}.jar | \
		awk '{print $$NF}' | sort > /tmp/treeshake_toc
	@"$(JAR)" -tvf ${TREESHAKE_PREFIX}_codegen.jar | \
		awk '{print $$NF}' | sort > /tmp/treeshake_codegen_toc
	@comm -23 /tmp/treeshake_toc /tmp/treeshake_codegen_toc \
		> ${TREESHAKE_PREFIX}_jardiff.txt
	@rm -f /tmp/treeshake_toc /tmp/treeshake_codegen_toc	
	ls -l ${TREESHAKE_PREFIX}*.jar

############################################################################
# Rules to run the jode obfuscator
# Jode is a java decompiler.  It is useful for looking at the contents of 
# class files.  It can be downloaded from 
# http://jode.sourceforge.net/download.php
#
# Jode is full GPL, so we can't distribute it without making Ptolemy GPL'd
#
# Jode can be downloaded from
# http://jode.sourceforge.net/download.php

# Jode writes to stderr, which causes problem with the test suite because
# Tcl exec will throw an error if stderr gets written to.
obfuscate:
	@echo "obfuscate has problems with jode 1.1.1 and 1.1.2pre-1 and Java 1.5"
	"$(ROOT)/bin/obfuscate" "\"$(TARGETPATH)obfuscateScript.jos\"" 2>&1
	@ls -l treeshake_codegen_obfuscated.jar
	@echo "run 'make runObfuscate' to run the obfuscated code"

runObfuscate: 
	@echo "Run the final obfuscated version"
	"$(JAVA)" -classpath treeshake_codegen_obfuscated.jar \
		$(TARGETPACKAGE).Main

profileObfuscate:
	@echo "Profile the final obfuscated version"
	@rm -f  $(STATSFILE)
	@for repeat in 1 2 3 4; \
	do \
		"$(JAVA)" $(MEMORYJFLAGS) \
			-classpath treeshake_codegen_obfuscated.jar \
			$(TARGETPACKAGE).Main | tail -1 | \
			tee -a $(STATSFILE); \
                "$(ROOT)/util/testsuite/gcstats" < "$(GCLOGFILE)" | tee -a $(STATSFILE); \
	done
	@"$(ROOT)/util/testsuite/memorystats" "$(MODEL) codegenObfuscate" < $(STATSFILE);
	@rm -f $(STATSFILE)


############################################################################
# Rules to run gcj, the GNU Java -> Native compiler
# This code is very experimental, and not likely to work

GCJ_DIR =	/usr/local

# The GNU C/Java compiler 
GCJ =		gcj
GCJ_LIBDIR =	$(GCJ_DIR)/lib

GCJ_JAR = /usr/local/share/java/libgcj-3.3.2.jar

# GCJ Options, see http://gcc.gnu.org/onlinedocs/
# If there is no -g or -O option, then the default is -g1
#GCJ_FLAGS =	-static
#GCJ_FLAGS =	-pg -g0 -O3 -fno-bounds-check --classpath=$(GCJ_JAR)
GCJ_FLAGS =	-g -O3 -fno-bounds-check --classpath=$(GCJ_JAR)

gcj: $(MODEL)_gcj

# The warnings appear on stderr, which causes problems with the test suite
# because Tcl exec will throw an error if stderr gets written to.
$(MODEL)_gcj: $(TREESHAKE_PREFIX)_codegen.jar
	@echo "Running GCJ on treeshake_codegen.jar"
	-"$(GCJ)" $(GCJ_FLAGS) --main=$(TARGETPACKAGE).Main -o $(MODEL)_gcj $(TREESHAKE_PREFIX)_codegen.jar 2>&1 
	@echo "GCJ done" 


gcjRun: ./$(MODEL)_gcj
	./$(MODEL)_gcj

profileGcj: $(MODEL)_gcj
	@echo "Run the gcj output and collect stats"
	@rm -f  $(STATSFILE)
	@for repeat in 1 2 3 4; \
	do \
		(./$(MODEL)_gcj) | tail -1 | \
			tee -a $(STATSFILE); \
	done
	"$(ROOT)/util/testsuite/memorystats" "$(MODEL) gcj" < $(STATSFILE);
	@rm -f $(STATSFILE)


############################################################################
# Rules to run the jode as a decompiler
# Jode is a java decompiler.  It is useful for looking at the contents of 
# class files.  It can be downloaded from 
# http://jode.sourceforge.net/download.php
#
# Jode is full GPL, so we can't distribute it without making Ptolemy GPL'd
#
# Jode can be downloaded from
# http://jode.sourceforge.net/download.php
JODE=$(ROOT)/bin/jode
# Class to disassemble
DECOMPILERTARGETCLASS =		$(MODEL)

######################################################
# Decompile using jode
# Jode does not work well, instead, use dava below.
jodeDecompile: jodeDecompileDemo jodeRecompileDemo jodeRunRecompiledDemo
jodeDecompileDemo:
	@echo "Note that jode probably does not work with Java 1.5 and later"
	@echo "Convert .class file back to .java file, compile it, run it"
	classes=`cd $(DECOMPILERTARGETPATH)/$(MODEL); ls -1 *.class | sed 's/.class//g'`; \
	for class in $$classes; \
	do \
		echo "--- Decompiling $(DECOMPILERTARGETPACKAGE).$$class"; \
		"$(JODE)" -classpath $(DECOMPILERTARGETPATH) \
			-d $(DECOMPILERTARGETPATH) \
			$(DECOMPILERTARGETPACKAGE).$$class; \
		relativetargetpath=`echo $(TARGETPACKAGE) | sed 's@\.@/@g'`; \
		sh "$(ROOT)/ptolemy/copernicus/shallow/test/jode2java" \
			$$relativetargetpath/$$class.java \
				> jodeDecompile.java; \
		mv jodeDecompile.java $$relativetargetpath/$$class.java; \
	done

jodeRecompileDemo:
	relativetargetpath=`echo $(TARGETPACKAGE) | sed 's@\.@/@g'`; \
	"$(JAVAC)" -classpath \
		"$(DECOMPILERTARGETPATH)$(CLASSPATHSEPARATOR)$(ROOT)" \
		-d $(DECOMPILERTARGETPATH)$$relativetargetpath \
		$(DECOMPILERTARGETPATH)$$relativetargetpath/$(DECOMPILERTARGETCLASS).java

jodeRunRecompiledDemo:
	"$(JAVA)" $(MEMORYJFLAGS) -Xfuture -classpath "$(DECOMPILERTARGETPATH)$(CLASSPATHSEPARATOR)$(ROOT)" \
		ptolemy.actor.gui.CompositeActorApplication \
		-class $(TARGETPACKAGE).$(MODEL)

######################################################
# Recompile using jad
# Jad is not open source and does not work as well as dava below.
jadDecompile:
	$(JAD) -r -o -d $(TARGETPATH)jad $(TARGETPATH)$(MODEL)/*.class; \
	for file in $(TARGETPATH)jad/$(MODEL)/*.jad; \
	do \
		echo "Fixing $$file"; \
		javafile=`dirname $$file`/`basename $$file .jad`.java; \
		sh $(ROOT)/ptolemy/copernicus/shallow/test/jad2java $$file \
				> $$javafile; \
		echo "Compiling $$javafile"; \
		"$(JAVAC)" -classpath "$(TARGETPATH)jad$(CLASSPATHSEPARATOR)$(ROOT)" \
			$$javafile; \
	done; \


######################################################
# Dava is a Decompiler that uses Soot.
# See http://www.sable.mcgill.ca/soot/tutorial/phase/
# See http://www.program-transformation.org/Transform/DecompilationDava
#
davaDecompile: davaDecompileDava davaDecompileFix davaDecompileCompile davaDecompileRun

davaDecompileDava:
	@echo "Running the Soot Dava Decompiler"
	for file in $(TARGETPATH)$(MODEL)/*.class; \
	do \
		classfile="$(MODEL).`basename $$file .class`"; \
		echo "Decompiling $$classfile"; \
		CLASSPATH=".$(CLASSPATHSEPARATOR)$(CLASSPATH)" \
			JAVAFLAGS=-Xmx600m \sa
			$(ROOT)/bin/soot -f d -d . $$classfile; \
	done;

davaDecompileFix:
	@echo "Running Fixing the Dava Decompiler output"
	for file in $(TARGETPATH)dava/src/$(MODEL)/*.java; \
	do \
		sh $(ROOT)/ptolemy/copernicus/java/test/dava2java $$file | \
		sed "s/$(MODEL)\.//g" > $$file.tmp; \
		cp $$file.tmp $$file; \
	done;

davaDecompileCompile:
	@echo "Recompiling the Dava Decompiler output"
	"$(JAVAC)" -classpath "$(TARGETPATH)dava/src$(CLASSPATHSEPARATOR)$(ROOT)" \
		-d dava/src \
		dava/src/$(MODEL)/*.java

davaDecompileRun:
	@echo "Running the compiled Dava Decompiler output"
	"$(JAVA)" -classpath "$(TARGETPATH)dava/src$(CLASSPATHSEPARATOR)$(ROOT)" \
		$(MODEL).Main

# Findbugs file
$(MODEL).fbp:
	echo "<Project filename=\"&lt;&lt;unnamed project&gt;&gt;\" projectName=\"$(MODEL)\">" > $@
	echo "  <Jar>$(TARGETPATH)/dava/src/$(MODEL)</Jar>" >> $@
	echo "  <AuxClasspathEntry>$(PTII)</AuxClasspathEntry>" >> $@
	echo "  <SrcDir>$(TARGETPATH)/dava/src/$(MODEL)</SrcDir>" >> $@
	echo "  <SuppressionFilter>" >> $@
	echo "    <LastVersion value=\"-1\" relOp=\"NEQ\"/>" >> $@
	echo "  </SuppressionFilter>" >> $@
	echo "</Project>" >> $@

######################################################
# Generate .java files from the snapshots
recompileSnapshots:
	for snapshot in $(SNAPSHOTS); \
	do \
		echo "Recompiling in $(TARGETPATH)$$snapshot"; \
		$(JAD) -r -o -d $(TARGETPATH)$$snapshot/jad $(TARGETPATH)$$snapshot/$(TARGETPATH)*.class; \
		for file in $(TARGETPATH)$$snapshot/jad/$(TARGETPATH)*.jad; \
		do \
			echo "Fixing $$file"; \
			javafile=`dirname $$file`/`basename $$file .jad`.java;\
			sh ../shallow/test/jad2java $$file \
				> $$javafile; \
			echo "Compiling $$javafile"; \
			"$(JAVAC)" -classpath "$(TARGETPATH)$$snapshot/jad$(CLASSPATHSEPARATOR)$(ROOT)" \
				$$javafile; \
		done; \
	done

sootDecompile:
	@echo "Convert .class file back to .java file, using soot"
	echo "--- Decompiling $(TARGETPACKAGE).Main";\
	soot -cp '"$(TARGETPATH)$(CLASSPATHSEPARATOR)$(CLASSPATH)"' -f d `cat jarClassList.txt`

###############################
# C compilation rules

# Standard variables
RUNTIME = $(ROOT)/ptolemy/copernicus/c/runtime
NATIVE_BODIES = $(ROOT)/runtime/native_bodies/
OVER_BODIES = $(ROOT)/runtime/over_bodies/
# Make a param
LIB = $(ROOT)/ptolemy/copernicus/c/test/testOutput/j2c_lib
LIB_FILE = $(LIB)/j2c_lib.a
CFLAGS = -g -Wall -Wno-trigraphs
DEPEND = gcc -Wno-trigraphs -MM -I $(RUNTIME) -I $(LIB) -I $(NATIVE_BODIES) -I $(OVER_BODIES)

THIS = makefile
SOURCES = @cFiles@

LIB_SOURCES = @cLibFiles@

OBJECTS = $(SOURCES:.c=.o)
HEADERS = $(SOURCES:.c=.h)
IHEADERS = $(SOURCES:.c=_i.h)

LIB_OBJECTS = $(LIB_SOURCES:.c=.o)
LIB_HEADERS = $(LIB_SOURCES:.c=.h)
LIB_IHEADERS = $(LIB_SOURCES:.c=_i.h)

@modelName@.exe : $(OBJECTS) $(LIB_FILE)
	gcc -g $(OBJECTS) $(LIB_FILE) -o @modelName@.exe
.c.o:
	gcc $(CFLAGS) -c  -I $(RUNTIME) -I $(LIB) -I $(NATIVE_BODIES) $< -o $@ 

$(LIB_FILE): $(LIB_OBJECTS)
	ar r $(LIB_FILE) $(LIB_OBJECTS)
	ranlib $(LIB_FILE)

.PHONY:depend

depend:
	$(DEPEND) $(SOURCES)>makefile.tmp;\
	cat $(THIS) makefile.tmp > @modelName@.mk;\
	rm makefile.tmp;

#clean:
#	rm $(OBJECTS) $(LIB_OBJECTS) $(LIB_FILE);

# Get the rest of the rules
include $(ROOT)/mk/ptcommon.mk

