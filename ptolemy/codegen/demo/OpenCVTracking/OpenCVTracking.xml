<?xml version="1.0" standalone="no"?>
<!DOCTYPE entity PUBLIC "-//UC Berkeley//DTD MoML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd">
<entity name="OpenCVTracking" class="ptolemy.actor.TypedCompositeActor">
    <property name="_createdBy" class="ptolemy.kernel.attributes.VersionAttribute" value="8.1.devel">
    </property>
    <property name="CCodeGenerator" class="ptolemy.codegen.c.kernel.CCodeGenerator">
        <property name="allowDynamicMultiportReference" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="compile" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="compileTarget" class="ptolemy.data.expr.StringParameter" value="">
        </property>
        <property name="generateEmbeddedCode" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="inline" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="overwriteFiles" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{635.0, 85.0}">
        </property>
    </property>
    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={37, 188, 1403, 581}, maximized=false}">
    </property>
    <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[1190, 471]">
    </property>
    <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.0">
    </property>
    <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{595.0, 235.5}">
    </property>
    <property name="SDF Director" class="ptolemy.domains.sdf.kernel.SDFDirector">
        <property name="iterations" class="ptolemy.data.expr.Parameter" value="100">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{165, 85}">
        </property>
    </property>
    <entity name="Display" class="ptolemy.actor.lib.jni.EmbeddedCActor">
        <display name="CCompiledCompositeActor"/>
        <property name="embeddedCCode" class="ptolemy.kernel.util.StringAttribute" value="/***fileDependencies***/&#10;/**/&#10;&#10;/***preinitBlock***/&#10;#ifndef _EiC&#10;#define _EiC&#10;#include &quot;cv.h&quot;&#10;#include &quot;highgui.h&quot;&#10;#include &lt;stdio.h&gt;&#10;#include &lt;ctype.h&gt;&#10;#endif&#10;&#10;IplImage *imageDisplay = 0;&#10;/**/&#10;&#10;/***initBlock***/&#10;&#10;/**/&#10;&#10;/***fireBlock***/&#10;// Assuming you have added an input port named &quot;input&quot;&#10;// and an output port named &quot;output&quot;, then the following&#10;// line results in the input being copied to the output.&#10;IplImage *frameDisplayIn = (IplImage *)$ref(frameDisplayIn);&#10;&#10;if( !frameDisplayIn )&#10;	return;&#10;if( !imageDisplay )&#10;imageDisplay = cvCreateImage( cvGetSize(frameDisplayIn), 8, 3 );&#10;imageDisplay-&gt;origin = frameDisplayIn-&gt;origin;&#10;&#10;cvCopy( frameDisplayIn, imageDisplay, 0 );&#10;&#10;CvBox2D tb;&#10;tb.center.x = $ref(centerX);&#10;tb.center.y = $ref(centerY);&#10;tb.size.width = $ref(sizeX);&#10;tb.size.height = $ref(sizeY);&#10;tb.angle = $ref(angle);&#10;&#10;cvEllipseBox( imageDisplay, tb, CV_RGB(255,0,0), 3, CV_AA, 0 );&#10;cvShowImage( &quot;CamShiftDemo&quot;, imageDisplay );&#10;&#10;/**/&#10;&#10;/***wrapupBlock***/&#10;cvDestroyWindow(&quot;CamShiftDemo&quot;);&#10;/**/&#10;&#10;">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="embeddedCCode">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{500.0, 285.0}">
        </property>
        <property name="CodeGenerator_AutoAdded" class="ptolemy.codegen.c.kernel.CCodeGenerator">
            <property name="allowDynamicMultiportReference" class="ptolemy.data.expr.Parameter" value="false">
            </property>
            <property name="codeDirectory" class="ptolemy.data.expr.FileParameter" value="$HOME/codegen/">
                <property name="allowFiles" class="ptolemy.data.expr.Parameter" value="false">
                </property>
                <property name="allowDirectories" class="ptolemy.data.expr.Parameter" value="true">
                </property>
            </property>
            <property name="compile" class="ptolemy.data.expr.Parameter" value="true">
            </property>
            <property name="compileTarget" class="ptolemy.data.expr.StringParameter" value="">
            </property>
            <property name="generatorPackage" class="ptolemy.data.expr.StringParameter" value="ptolemy.codegen.c">
            </property>
            <property name="generateComment" class="ptolemy.data.expr.Parameter" value="true">
            </property>
            <property name="generateCpp" class="ptolemy.data.expr.Parameter" value="false">
            </property>
            <property name="generateEmbeddedCode" class="ptolemy.data.expr.Parameter" value="true">
            </property>
            <property name="inline" class="ptolemy.data.expr.Parameter" value="false">
            </property>
            <property name="measureTime" class="ptolemy.data.expr.Parameter" value="false">
            </property>
            <property name="overwriteFiles" class="ptolemy.data.expr.Parameter" value="true">
            </property>
            <property name="padBuffers" class="ptolemy.data.expr.Parameter" value="true">
            </property>
            <property name="run" class="ptolemy.data.expr.Parameter" value="true">
            </property>
            <property name="sourceLineBinding" class="ptolemy.data.expr.Parameter" value="false">
            </property>
            <property name="target" class="ptolemy.data.expr.StringParameter" value="default">
            </property>
        </property>
        <port name="frameDisplayIn" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_type" class="ptolemy.actor.TypeAttribute" value="long">
            </property>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="centerX" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_type" class="ptolemy.actor.TypeAttribute" value="double">
            </property>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="centerY" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_type" class="ptolemy.actor.TypeAttribute" value="double">
            </property>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="sizeX" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_type" class="ptolemy.actor.TypeAttribute" value="double">
            </property>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="sizeY" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_type" class="ptolemy.actor.TypeAttribute" value="double">
            </property>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="angle" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_type" class="ptolemy.actor.TypeAttribute" value="double">
            </property>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
    </entity>
    <entity name="Sound" class="ptolemy.actor.lib.jni.EmbeddedCActor">
        <display name="CCompiledCompositeActor"/>
        <property name="embeddedCCode" class="ptolemy.kernel.util.StringAttribute" value="/***fileDependencies***/&#10;&#10;/**/&#10;&#10;/***preinitBlock***/&#10;#ifndef _SDL_SOUND&#10;#define _SDL_SOUND&#10;#include &lt;signal.h&gt;&#10;#include &lt;SDL.h&gt;&#10;#include &lt;SDL_audio.h&gt;&#10;&#10;#define SM_SOUNDS   4&#10;#define SM_VOICES   4&#10;&#10;&#10;typedef struct&#10;{&#10;    Uint8   *data;&#10;    Uint32  length;&#10;} SM_sound;&#10;&#10;&#10;typedef struct&#10;{&#10;    Sint16  *data;&#10;    int length;&#10;    int position;&#10;    int l_vol;&#10;    int r_vol;&#10;} SM_voice;&#10;&#10;#endif&#10;&#10;SM_sound sounds[SM_SOUNDS];&#10;SM_voice voices[SM_VOICES];&#10;SDL_AudioSpec audiospec;&#10;int die = 0;&#10;int pr_x = 0;&#10;int pr_y = 0;&#10;&#10;&#10;void sm_play(unsigned voice, unsigned sound, float lvol, float rvol)&#10;{&#10;	if(voice &gt;= SM_VOICES || sound &gt;= SM_SOUNDS)&#10;		return;&#10;&#10;	/* Stop voice */&#10;	voices[voice].data = NULL;&#10;&#10;	/* Reprogram */&#10;	voices[voice].length = sounds[sound].length / 2;&#10;	voices[voice].position = 0;&#10;	voices[voice].l_vol = (int)(lvol * 256.0);&#10;	voices[voice].r_vol = (int)(rvol * 256.0);&#10;&#10;	/* Start! */&#10;	voices[voice].data = (Sint16*)(sounds[sound].data);&#10;}&#10;&#10;&#10;static void sm_mixer(void *ud, Uint8 *stream, int len)&#10;{&#10;	int vi, s;&#10;	Sint16 *buf = (Sint16 *)stream;&#10;&#10;	/* Clear the buffer */&#10;	memset(buf, 0, len);&#10;&#10;	/* 2 channels, 2 bytes/sample = 4 bytes/frame */&#10;        len /= 4;&#10;&#10;	/* For each voice... */&#10;	for(vi = 0; vi &lt; SM_VOICES; ++vi)&#10;	{&#10;		SM_voice *v = &amp;voices[vi];&#10;		if(!v-&gt;data)&#10;			continue;&#10;&#10;		/* For each sample... */&#10;		for(s = 0; s &lt; len; ++s)&#10;		{&#10;			if(v-&gt;position &gt;= v-&gt;length)&#10;			{&#10;				v-&gt;data = NULL;&#10;				break;&#10;			}&#10;			buf[s * 2] += v-&gt;data[v-&gt;position] * v-&gt;l_vol &gt;&gt; 8;&#10;			buf[s * 2 + 1] += v-&gt;data[v-&gt;position] * v-&gt;r_vol &gt;&gt; 8;&#10;			++v-&gt;position;&#10;		}&#10;	}&#10;}&#10;&#10;&#10;int sm_open(void)&#10;{&#10;	SDL_AudioSpec as;&#10;&#10;	memset(sounds, 0, sizeof(sounds));&#10;	memset(voices, 0, sizeof(voices));&#10;&#10;	if(SDL_InitSubSystem(SDL_INIT_AUDIO) &lt; 0)&#10;		return -2;&#10;&#10;	as.freq = 44100;&#10;	as.format = AUDIO_S16SYS;&#10;	as.channels = 2;&#10;	as.samples = 1024;&#10;	as.callback = sm_mixer;&#10;	if(SDL_OpenAudio(&amp;as, &amp;audiospec) &lt; 0)&#10;		return -3;&#10;&#10;	if(audiospec.format != AUDIO_S16SYS)&#10;		return -4;&#10;&#10;	SDL_PauseAudio(0);&#10;	return 0;&#10;}&#10;&#10;void sm_close(void)&#10;{&#10;	int i;&#10;	SDL_PauseAudio(1);&#10;	for(i = 0; i &lt; SM_VOICES; ++i)&#10;		voices[i].data = NULL;&#10;	SDL_CloseAudio();&#10;	for(i = 0; i &lt; SM_SOUNDS; ++i)&#10;		SDL_FreeWAV(sounds[i].data);&#10;	memset(sounds, 0, sizeof(sounds));&#10;	memset(voices, 0, sizeof(voices));&#10;}&#10;&#10;&#10;void flip_endian(Uint8 *data, int length)&#10;{&#10;	int i;&#10;	for(i = 0; i &lt; length; i += 2)&#10;	{&#10;		int x = data[i];&#10;		data[i] = data[i + 1];&#10;		data[i + 1] = x;&#10;	}&#10;}&#10;&#10;&#10;int sm_load(int sound, const char *file)&#10;{&#10;	int failed = 0;&#10;	SDL_AudioSpec spec;&#10;	if(sounds[sound].data)&#10;		SDL_FreeWAV(sounds[sound].data);&#10;	sounds[sound].data = NULL;&#10;	if(SDL_LoadWAV(file, &amp;spec, &amp;sounds[sound].data,&#10;			&amp;sounds[sound].length) == NULL)&#10;		return -1;&#10;	if(spec.freq != 44100)&#10;		fprintf(stderr, &quot;WARNING: File '%s' is not 44.1 kHz.&quot;&#10;				&quot; Might sound weird...\n&quot;, file);&#10;	if(spec.channels != 1)&#10;	{&#10;		fprintf(stderr, &quot;Only mono sounds are supported!\n&quot;);&#10;		failed = 1;&#10;	}&#10;	switch(spec.format)&#10;	{&#10;	  case AUDIO_S16LSB:&#10;	  case AUDIO_S16MSB:&#10;		if(spec.format != AUDIO_S16SYS)&#10;			flip_endian(sounds[sound].data, sounds[sound].length);&#10;		break;&#10;	  default:&#10;		fprintf(stderr, &quot;Unsupported sample format!\n&quot;);&#10;		failed = 1;&#10;		break;&#10;	}&#10;	if(failed)&#10;	{&#10;		SDL_FreeWAV(sounds[sound].data);&#10;		sounds[sound].data = NULL;&#10;		return -2;&#10;	}&#10;	return 0;&#10;}&#10;&#10;&#10;void breakhandler(int a)&#10;{&#10;	die = 1;&#10;}&#10;&#10;/**/&#10;&#10;/***initBlock***/&#10;&#10;int res;&#10;if(SDL_Init(0) &lt; 0)&#10;	return -1;&#10;&#10;atexit(SDL_Quit);&#10;signal(SIGTERM, breakhandler);&#10;signal(SIGINT, breakhandler);&#10;&#10;if(sm_open() &lt; 0)&#10;{&#10;	fprintf(stderr, &quot;Couldn't start mixer!\n&quot;);&#10;	SDL_Quit();&#10;	return -1;&#10;}&#10;&#10;res = 0;&#10;res |= sm_load(0, &quot;808-bassdrum.wav&quot;);&#10;res |= sm_load(1, &quot;808-clap.wav&quot;);&#10;res |= sm_load(2, &quot;808-cowbell.wav&quot;);	&#10;res |= sm_load(3, &quot;808-hihat.wav&quot;);&#10;if(res)&#10;{&#10;	sm_close();&#10;	SDL_Quit();&#10;	fprintf(stderr, &quot;Couldn't load sounds!\n&quot;);&#10;	return -1;&#10;}&#10;/**/&#10;&#10;/***fireBlock***/&#10;// Assuming you have added an input port named &quot;input&quot;&#10;// and an output port named &quot;output&quot;, then the following&#10;// line results in the input being copied to the output.&#10;&#10;float vx = $ref(x) - pr_x;	&#10;float vy = $ref(y) - pr_y;&#10;&#10;float v = sqrtf(vx * vx + vy * vy);&#10;&#10;printf(&quot;v = %f\n&quot;, v);&#10;#define SCALE 30&#10;if(v &lt; SCALE)&#10;	sm_play(0, 0, 1.0, 1.0);&#10;else if (v &lt; 2 * SCALE)&#10;	sm_play(1, 1, 0.6, 0.5);&#10;else if (v &lt; 3 * SCALE)&#10;	sm_play(1, 1, 0.2, 0.3);&#10;else if (v &lt; 4 * SCALE)&#10;	sm_play(2, 2, 0.3, 0.2);&#10;else if (v &lt; 5 * SCALE)&#10;	sm_play(2, 2, 0.1, 0.2);&#10;else &#10;	sm_play(3, 3, 0.3, 0.4);&#10;&#10;&#10;//save center&#10;pr_x = $ref(x); &#10;pr_y = $ref(y);&#10;/**/&#10;&#10;/***wrapupBlock***/&#10;sm_close();&#10;SDL_Quit();&#10;/**/&#10;&#10;">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="embeddedCCode">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[475.0, 355.0]">
        </property>
        <port name="x" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_type" class="ptolemy.actor.TypeAttribute" value="double">
            </property>
        </port>
        <port name="y" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_type" class="ptolemy.actor.TypeAttribute" value="double">
            </property>
        </port>
    </entity>
    <entity name="Tracker" class="ptolemy.actor.lib.jni.EmbeddedCActor">
        <display name="CCompiledCompositeActor"/>
        <property name="embeddedCCode" class="ptolemy.kernel.util.StringAttribute" value="/***fileDependencies***/&#10;/**/&#10;&#10;/***preinitBlock***/&#10;#ifndef _EiC&#10;#define _EiC&#10;&#10;#include &quot;cv.h&quot;&#10;#include &quot;highgui.h&quot;&#10;#include &lt;stdio.h&gt;&#10;#include &lt;ctype.h&gt;&#10;#endif&#10;&#10;IplImage *image = 0, *hsv = 0, *hue = 0, *mask = 0, *backproject = 0, *histimg = 0;&#10;CvHistogram *hist = 0;&#10;&#10;int backproject_mode = 0;&#10;int select_object = 0;&#10;int track_object = 0;&#10;int show_hist = 1;&#10;CvPoint origin;&#10;CvRect selection;&#10;CvRect track_window;&#10;CvBox2D track_box;&#10;&#10;CvPoint2D32f previous_center;&#10;&#10;&#10;CvConnectedComp track_comp;&#10;int hdims = 16;&#10;float hranges_arr[] = {0,180};&#10;float* hranges = hranges_arr;&#10;int vmin = 10, vmax = 256, smin = 30;&#10;&#10;void on_mouse( int event, int x, int y, int flags, void* param )&#10;{&#10;    if( !image )&#10;        return;&#10;&#10;    if( image-&gt;origin )&#10;        y = image-&gt;height - y;&#10;&#10;    if( select_object )&#10;    {&#10;        selection.x = MIN(x,origin.x);&#10;        selection.y = MIN(y,origin.y);&#10;        selection.width = selection.x + CV_IABS(x - origin.x);&#10;        selection.height = selection.y + CV_IABS(y - origin.y);&#10;        &#10;        selection.x = MAX( selection.x, 0 );&#10;        selection.y = MAX( selection.y, 0 );&#10;        selection.width = MIN( selection.width, image-&gt;width );&#10;        selection.height = MIN( selection.height, image-&gt;height );&#10;        selection.width -= selection.x;&#10;        selection.height -= selection.y;&#10;    }&#10;&#10;    switch( event )&#10;    {&#10;    case CV_EVENT_LBUTTONDOWN:&#10;        origin = cvPoint(x,y);&#10;        selection = cvRect(x,y,0,0);&#10;        select_object = 1;&#10;        break;&#10;    case CV_EVENT_LBUTTONUP:&#10;        select_object = 0;&#10;        if( selection.width &gt; 0 &amp;&amp; selection.height &gt; 0 )&#10;            track_object = -1;&#10;        break;&#10;    }&#10;}&#10;&#10;&#10;CvScalar hsv2rgb( float hue )&#10;{&#10;    int rgb[3], p, sector;&#10;    static const int sector_data[][3]=&#10;        {{0,2,1}, {1,2,0}, {1,0,2}, {2,0,1}, {2,1,0}, {0,1,2}};&#10;    hue *= 0.033333333333333333333333333333333f;&#10;    sector = cvFloor(hue);&#10;    p = cvRound(255*(hue - sector));&#10;    p ^= sector &amp; 1 ? 255 : 0;&#10;&#10;    rgb[sector_data[sector][0]] = 255;&#10;    rgb[sector_data[sector][1]] = 0;&#10;    rgb[sector_data[sector][2]] = p;&#10;&#10;    return cvScalar(rgb[2], rgb[1], rgb[0],0);&#10;}&#10;&#10;/**/&#10;&#10;/***initBlock***/&#10;    printf( &quot;Hot keys: \n&quot;&#10;        &quot;\tESC - quit the program\n&quot;&#10;        &quot;\tc - stop the tracking\n&quot;&#10;        &quot;\tb - switch to/from backprojection view\n&quot;&#10;        &quot;\th - show/hide object histogram\n&quot;&#10;        &quot;To initialize tracking, select the object with mouse\n&quot; );&#10;&#10;    cvNamedWindow( &quot;Histogram&quot;, 1 );&#10;    cvNamedWindow( &quot;CamShiftDemo&quot;, 1 );&#10;    cvSetMouseCallback( &quot;CamShiftDemo&quot;, on_mouse, 0 );&#10;    cvCreateTrackbar( &quot;Vmin&quot;, &quot;CamShiftDemo&quot;, &amp;vmin, 256, 0 );&#10;    cvCreateTrackbar( &quot;Vmax&quot;, &quot;CamShiftDemo&quot;, &amp;vmax, 256, 0 );&#10;    cvCreateTrackbar( &quot;Smin&quot;, &quot;CamShiftDemo&quot;, &amp;smin, 256, 0 );&#10;&#10;/**/&#10;&#10;/***fireBlock***/&#10;// Assuming you have added an input port named &quot;input&quot;&#10;// and an output port named &quot;output&quot;, then the following&#10;// line results in the input being copied to the output.&#10;&#10;image = (IplImage*)$ref(frameIn);&#10;&#10;if( !hsv )&#10;{&#10;            /* allocate all the buffers */&#10;            //image = cvCreateImage( cvGetSize(trackingFrame), 8, 3 );&#10;            //image-&gt;origin = frame-&gt;origin;&#10;            hsv = cvCreateImage( cvGetSize(image), 8, 3 );&#10;            hue = cvCreateImage( cvGetSize(image), 8, 1 );&#10;            mask = cvCreateImage( cvGetSize(image), 8, 1 );&#10;            backproject = cvCreateImage( cvGetSize(image), 8, 1 );&#10;            hist = cvCreateHist( 1, &amp;hdims, CV_HIST_ARRAY, &amp;hranges, 1 );&#10;            histimg = cvCreateImage( cvSize(320,200), 8, 3 );&#10;            cvZero( histimg );&#10;}&#10;&#10;int i, bin_w, c;&#10;&#10;cvCvtColor( image, hsv, CV_BGR2HSV );&#10;&#10; if( track_object )&#10; {&#10;            int _vmin = vmin, _vmax = vmax;&#10;&#10;            cvInRangeS( hsv, cvScalar(0,smin,MIN(_vmin,_vmax),0),&#10;                        cvScalar(180,256,MAX(_vmin,_vmax),0), mask );&#10;            cvSplit( hsv, hue, 0, 0, 0 );&#10;&#10;            if( track_object &lt; 0 )&#10;            {&#10;                float max_val = 0.f;&#10;                cvSetImageROI( hue, selection );&#10;                cvSetImageROI( mask, selection );&#10;                cvCalcHist( &amp;hue, hist, 0, mask );&#10;                cvGetMinMaxHistValue( hist, 0, &amp;max_val, 0, 0 );&#10;                cvConvertScale( hist-&gt;bins, hist-&gt;bins, max_val ? 255. / max_val : 0., 0 );&#10;                cvResetImageROI( hue );&#10;                cvResetImageROI( mask );&#10;                track_window = selection;&#10;                track_object = 1;&#10;&#10;                cvZero( histimg );&#10;                bin_w = histimg-&gt;width / hdims;&#10;                for( i = 0; i &lt; hdims; i++ )&#10;                {&#10;                    int val = cvRound( cvGetReal1D(hist-&gt;bins,i)*histimg-&gt;height/255 );&#10;                    CvScalar color = hsv2rgb(i*180.f/hdims);&#10;                    cvRectangle( histimg, cvPoint(i*bin_w,histimg-&gt;height),&#10;                                 cvPoint((i+1)*bin_w,histimg-&gt;height - val),&#10;                                 color, -1, 8, 0 );&#10;                }&#10;            }&#10;&#10;            cvCalcBackProject( &amp;hue, backproject, hist );&#10;            cvAnd( backproject, mask, backproject, 0 );&#10;            cvCamShift( backproject, track_window,&#10;                        cvTermCriteria( CV_TERMCRIT_EPS | CV_TERMCRIT_ITER, 10, 1 ),&#10;                        &amp;track_comp, &amp;track_box );&#10;            track_window = track_comp.rect;&#10;            &#10;            if( backproject_mode )&#10;                cvCvtColor( backproject, image, CV_GRAY2BGR );&#10;            if( !image-&gt;origin )&#10;                track_box.angle = -track_box.angle;&#10;	&#10;	$ref(centerX) = track_box.center.x;&#10;	$ref(centerY) = track_box.center.y;&#10;	$ref(sizeX) = track_box.size.width;&#10;	$ref(sizeY) = track_box.size.height;&#10;	$ref(angle) = track_box.angle;&#10;&#10;cvShowImage( &quot;Histogram&quot;, histimg );&#10;}&#10;&#10;c = cvWaitKey(10);&#10;        //if( (char) c == 27 )&#10;        //    break;&#10;        switch( (char) c )&#10;        {&#10;        case 'b':&#10;            backproject_mode ^= 1;&#10;            break;&#10;        case 'c':&#10;            track_object = 0;&#10;            cvZero( histimg );&#10;            break;&#10;        case 'h':&#10;            show_hist ^= 1;&#10;            if( !show_hist )&#10;                cvDestroyWindow( &quot;Histogram&quot; );&#10;            else&#10;                cvNamedWindow( &quot;Histogram&quot;, 1 );&#10;            break;&#10;        default:&#10;            ;&#10;        }&#10;/**/&#10;&#10;/***wrapupBlock***/&#10;/**/&#10;&#10;">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="embeddedCCode">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[305.0, 290.0]">
        </property>
        <port name="frameIn" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_type" class="ptolemy.actor.TypeAttribute" value="long">
            </property>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="centerX" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_type" class="ptolemy.actor.TypeAttribute" value="double">
            </property>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="centerY" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_type" class="ptolemy.actor.TypeAttribute" value="double">
            </property>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="sizeX" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_type" class="ptolemy.actor.TypeAttribute" value="double">
            </property>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="sizeY" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_type" class="ptolemy.actor.TypeAttribute" value="double">
            </property>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="angle" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_type" class="ptolemy.actor.TypeAttribute" value="double">
            </property>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
    </entity>
    <entity name="Capture" class="ptolemy.actor.lib.jni.EmbeddedCActor">
        <display name="CCompiledCompositeActor"/>
        <property name="embeddedCCode" class="ptolemy.kernel.util.StringAttribute" value="/***fileDependencies***/&#10;/**/&#10;&#10;/***preinitBlock***/&#10;#ifndef _EiC&#10;#define _EiC&#10;#include &quot;cv.h&quot;&#10;#include &quot;highgui.h&quot;&#10;#include &lt;stdio.h&gt;&#10;#include &lt;ctype.h&gt;&#10;#endif&#10;&#10;CvCapture* capture = 0;&#10;/**/&#10;&#10;/***initBlock***/&#10;capture = cvCaptureFromCAM( 0 );&#10;&#10;&#10;if( ! capture )&#10;{&#10;	fprintf(stderr,&quot;Could not initialize capturing...\n&quot;);&#10;	return -1;&#10;}&#10;&#10;/**/&#10;&#10;/***fireBlock***/&#10;// Assuming you have added an input port named &quot;input&quot;&#10;// and an output port named &quot;output&quot;, then the following&#10;// line results in the input being copied to the output.&#10;&#10;IplImage* captureFrame = 0;&#10;captureFrame = cvQueryFrame( capture );&#10;if( !captureFrame )&#10;	return - 1;&#10;$ref(frameOut) = (long)captureFrame; &#10;&#10;/**/&#10;&#10;/***wrapupBlock***/&#10;cvReleaseCapture( &amp;capture );&#10;/**/&#10;&#10;">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="embeddedCCode">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{115, 235}">
        </property>
        <property name="_hideName" class="ptolemy.data.expr.SingletonParameter" value="false">
        </property>
        <port name="frameOut" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_type" class="ptolemy.actor.TypeAttribute" value="long">
            </property>
        </port>
    </entity>
    <relation name="relation2" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="1">
        </property>
    </relation>
    <relation name="relation3" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="1">
        </property>
    </relation>
    <relation name="relation" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="1">
        </property>
        <vertex name="vertex1" value="[215.0, 235.0]">
        </vertex>
    </relation>
    <relation name="relation6" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="1">
        </property>
    </relation>
    <relation name="relation4" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="1">
        </property>
        <vertex name="vertex1" value="[430.0, 290.0]">
        </vertex>
    </relation>
    <relation name="relation5" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="1">
        </property>
        <vertex name="vertex1" value="[415.0, 305.0]">
        </vertex>
    </relation>
    <link port="Display.frameDisplayIn" relation="relation"/>
    <link port="Display.centerX" relation="relation2"/>
    <link port="Display.centerY" relation="relation3"/>
    <link port="Display.sizeX" relation="relation4"/>
    <link port="Display.sizeY" relation="relation5"/>
    <link port="Display.angle" relation="relation6"/>
    <link port="Sound.x" relation="relation4"/>
    <link port="Sound.y" relation="relation5"/>
    <link port="Tracker.frameIn" relation="relation"/>
    <link port="Tracker.centerX" relation="relation2"/>
    <link port="Tracker.centerY" relation="relation3"/>
    <link port="Tracker.sizeX" relation="relation4"/>
    <link port="Tracker.sizeY" relation="relation5"/>
    <link port="Tracker.angle" relation="relation6"/>
    <link port="Capture.frameOut" relation="relation"/>
</entity>
