# Template makefile from $PTII/ptolemy/codegen/c/jnimakefile.in
# $Id$
# The CCodeGenerator class subsitutes strings like "@modelName@" with
# the value of parameters and writes the results in the directory
# where the source code is created.
# To compile, run make -f @modelName@.mk

include $(PTII)/mk/ptII.mk

MODELNAME =	@modelName@

# The include files and libraries are determined in CCodeGeneratorHelper
PTCGINCLUDES = 			@PTCGIncludes@ -I$(PTOPENCV_INCLUDE_DIR)
PTCGLIBRARIES = 		@PTCGLibraries@

# Flag to use with JNI under Cygwin (-mno-cygwin)
PTJNI_NO_CYGWIN =		@PTJNI_NO_CYGWIN@

# GCC shared flag.  For Mac OS X, -dynamiclib.  For all others, -shared 
PTJNI_GCC_SHARED_FLAG =		@PTJNI_GCC_SHARED_FLAG@

# Mac OS X, need when we call the plotter from generated C code. 
PTJNI_PLATFORM_LDFLAG = 	@PTJNI_PLATFORM_LDFLAG@

# JNI shared library linker flag, under Solaris this would be -fPIC.
PTJNI_SHAREDLIBRARY_LDFLAG =	@PTJNI_SHAREDLIBRARY_LDFLAG@

# JNI shared library prefix, under Solaris this would be lib
PTJNI_SHAREDLIBRARY_PREFIX = 	@PTJNI_SHAREDLIBRARY_PREFIX@

# JNI shared library suffix, under Windows this would be dll.
PTJNI_SHAREDLIBRARY_SUFFIX = 	@PTJNI_SHAREDLIBRARY_SUFFIX@

# The name of the library we are generating
PTLIB = $(PTJNI_SHAREDLIBRARY_PREFIX)$(MODELNAME).$(PTJNI_SHAREDLIBRARY_SUFFIX)

# We need -lm so we can get floor() for ftoi() 
$(PTLIB): $(MODELNAME).c
	@PTCGCompiler@ $(PTJNI_NO_CYGWIN) $(PTCGINCLUDES) $(PTJNI_SHAREDLIBRARY_LDFLAG) $(PTJNI_GCC_SHARED_FLAG) -o $(PTLIB) @modelName@.c -lm $(PTCGLIBRARIES) $(PTJNI_PLATFORM_LDFLAG)

run:
	./@modelName@
