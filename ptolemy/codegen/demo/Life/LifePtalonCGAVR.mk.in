# Template makefile from $PTII/ptolemy/codegen/c/makefile.in
# $Id$
# The CodeGenerator class subsitutes strings like "@modelName@" with
# the value of parameters and writes the results in the directory
# where the source code is created.
# To compile, run make -f @modelName@.mk

PTCGLIBRARIES = @PTCGLibraries@
PTCGINCLUDES = @PTCGIncludes@

# Under Windows, to create a binary that does not pop up a console window,
# compile with: make -f @modelName@.mk CC_FLAGS=-mwindows
CC_FLAGS=

# If the user would like to add compile time options, run with
# make -f @modelName@.mk USER_CC_FLAGS=xxx
USER_CC_FLAGS =

# We need -lm so we can get floor() for ftoi() 
# We need -D__int64="long long" when invoking jni interface under cygwin
@modelName@: @modelName@.c
	gcc -Wall -D__int64="long long" $(CC_FLAGS) $(USER_CC_FLAGS) -g @modelName@.c $(PTCGINCLUDES) -o @modelName@ -lm $(PTCGLIBRARIES)

run: @modelName@
	./@modelName@

all: @modelName@.rom

AVR_OPT =  -O2
# compile @modelName@.c into @modelName@.o
@modelName@.o: @modelName@.c
	avr-gcc -c $(AVR_OPT) -DPT_NO_PRINTF -DPT_NO_STRDUP -DPT_NO_TIME_H -Wall -mmcu=atmega16 -I. @modelName@.c -o @modelName@.o
	avr-strip --keep-symbol=main @modelName@.o

# link up @modelName@.o into @modelName@.elf
@modelName@.elf: @modelName@.o 
	avr-gcc @modelName@.o -Wl,-Map=@modelName@.map,--cref -mmcu=atmega16 -o @modelName@.elf

# copy ROM (FLASH) object out of @modelName@.elf into @modelName@.rom
@modelName@.rom: @modelName@.elf
	avr-objcopy -O ihex @modelName@.elf @modelName@.rom
	ls -l @modelName@.o @modelName@.elf @modelName@.rom 
	avr-size -C --mcu=atmega16 @modelName@.elf

# command to clean up junk (no source files) (invoked by running "make clean")
clean:
	rm -f *.o *.rom *.elf *.map *~

# command to program chip (invoked by running "make install")
install:
	uisp -v=1 -dprog=stk500 -dserial=/dev/cu.USA19H1b1P1.1 -dpart=ATmega16 --erase --upload --verify if="@modelName@.rom"

# command to set oscillator fuse bits on chip to 8Mhz oscillator (invoked by running "make osc")
# default oscillator setting is 1Mhz, so this will make your chip run a lot faster
# NOTE! - if you change the oscillator setting of your chip to 8Mhz, you must change the F_CPU variable
# in game_of_life.h to 8000000UL!!
osc:
	uisp -v=2 -dprog=stk500 -dserial=/dev/cu.USA19H1b1P1.1 -dpart=ATmega16 --wr_fuse_l=0xe4

# command to disable JTAGEN fuse bit (invoked by "make unTAG")
# NOTE! - when JTAGEN fuse bit is enabled, pins c2-c5 do not work as I/0
unTAG:
	uisp -v=2 -dprog=stk500 -dserial=/dev/cu.USA19H1b1P1.1 -dpart=atmega16 --wr_fuse_h=0xd9

# Rule to compile with different optimizers
O_FLAGS=-O0 -O -Os -O2 -O3
optimize:
	for O_FLAG in $(O_FLAGS); do \
	    echo "Compiling with $$O_FLAG"; \
	    time gcc $$O_FLAG -D__int64="long long" $(CC_FLAGS) $(USER_CC_FLAGS) -g @modelName@.c $(PTCGINCLUDES) -o @modelName@_$$O_FLAG -lm $(PTCGLIBRARIES); \
	    cp @modelName@_$${O_FLAG}.exe @modelName@_$${O_FLAG}_stripped.exe; \
	    strip @modelName@_$${O_FLAG}_stripped.exe; \
	    ls -l @modelName@_$${O_FLAG}.exe @modelName@_$${O_FLAG}_stripped.exe; \
	    echo "Running @modelName@_$${O_FLAG}.exe"; \
	    time ./@modelName@_$${O_FLAG}.exe; \
	    time ./@modelName@_$${O_FLAG}.exe; \
	    time ./@modelName@_$${O_FLAG}.exe; \
	    echo "Running @modelName@_$${O_FLAG}_stripped.exe"; \
	    time ./@modelName@_$${O_FLAG}_stripped.exe; \
	    time ./@modelName@_$${O_FLAG}_stripped.exe; \
	    time ./@modelName@_$${O_FLAG}_stripped.exe; \
	done	

# Rule to compile with different optimizers
optimize_avr:
	for O_FLAG in $(O_FLAGS); do \
	    echo "Compiling with $$O_FLAG"; \
	    touch @modelName@.c; \
	    make -f @modelName@.mk AVR_OPT=$$O_FLAG all; \
	done	