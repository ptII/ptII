/***termBlock***/
#model('$actorSymbol(model))/**/

/***fireBlock($attr_terms)***/
< '$info(name) : $info(class) |
$attr_terms
>/**/

/***attr_Entity***/
computation : noComputation,
status : enabled,
ports : ($indent(
  $info(ports) 
)),
parameters : ($indent( 
  $info(parameters)
))/**/

/***semantics_Entity***/
(tomod ACTOR is 
  inc ACTOR-BASE .
  inc PARAMETERS .
  pr CASTING-DEF .
  pr PTOLEMY-EXP-SEMANTICS . 


  class Actor | ports : Configuration,          *** a bunch of ports
              parameters : Configuration,     *** ptolemy parameters
              status : ActorStatus ,
              computation : Computation .     *** local computation

  sort ActorStatus .
  ops enabled disabled : -> ActorStatus [ctor] .

  sort ComputationID .
  op #param : ParamId -> ComputationID [ctor] . --- for parameter computation
  op #port : PortId -> ComputationID [ctor]  .  --- for port computation

  sort Computation .
  op noComputation : -> Computation [ctor] .
  op _/_ : ComputationID KConfig -> Computation [ctor] .

  ---------------------------------------------------------------------
  --- Variable Declaration
  ---------------------------------------------------------------------

  vars CF PORTS PORTS' PARAMS : Configuration . 
  var NCF NCF' : NEConfiguration .
  vars REST : ObjectConfiguration . var OBJ : Object .

  vars O O' : Oid .  vars RI : ParamId . 
  vars PI PI' : PortId .  vars EPIS EPIS' : EPortIdSet .
  var PS PS' : PortStatus .  var DPS : DetPortStatus .

  var CI : ComputationID . var VI : VarId . 
  var V V' : Value . var E : Exp . var PE : ProperExp .  
  var K : K .  var ENV : EnvMap .

  ---------------------------------------------------------------------
  --- Message
  ---------------------------------------------------------------------

  --- add events to ports (before postfire)
  --- active-evt events are generated at the beginning of each executeStep,
  --- and dilivered to each port.
  eq active-evt(event(O ! PI, V))
    < O : Actor | 
       ports : < PI : Port | status : PS, value : V' > PORTS > 
  = 
    < O : Actor | 
       ports : < PI : Port | status : present, value : V > PORTS > .

  ---------------------------------------------------------------------
  --- Semantics Steps
  ---------------------------------------------------------------------

  *** 0] init
  eq init(Actor, < O : Actor | ports : PORTS >) 
  = < O : Actor | ports : transPorts(PORTS) > .

  op transPorts : Configuration ~> Configuration [frozen] .
  op trans : Object ~> Object [frozen] .

  --- only multi input ports are to be transformed.
  eq transPorts(< PI : MultiInPort | > PORTS) 
  = trans(< PI : MultiInPort | >) transPorts(PORTS) .
  eq transPorts(PORTS) = PORTS [owise] .

  --- multiport transform.
  eq < O : Actor | 
      ports : trans(< PI : MultiInPort | status : PS, value : V, 
                                         source : (O' ! PI') ; EPIS' >) PORTS >
   (O' ! PI' ==> (O ! PI) ; EPIS)
  = 
   < O : Actor | 
      ports : < PI # (O' ! PI') : InPort | status : PS, value : V >
              trans(< PI : MultiInPort | source : EPIS' >) PORTS >
   (O' ! PI' ==> (O ! (PI # (O' ! PI'))) ; EPIS) .
   
  eq < O : Actor | ports : trans(< PI : MultiInPort | source : noPort >) PORTS >
  = < O : Actor | ports : PORTS > .


  *** 1] prefire : operations need to be done before portFixPoints.

  --- in each new ports we must "reset" all ports to 'unknown'. 
  eq prefire(Actor, < O : Actor | ports : PORTS >) 
  = < O : Actor | ports : setAllPorts(PORTS, unknown) > .


  *** 2] portFixPoints : ports of an actor is computed.

  ----- A] connection -----

  --- deliver a value of ports to connected ports with the status 'unknown'
  eq portFixPoints(
    < O : Actor | status : enabled,
                  ports : < PI : OutPort | status : DPS, value : V > PORTS >
    (O ! PI ==> (O' ! PI') ; EPIS) 
    < O' : Actor | ports : < PI' : InPort | status : unknown > PORTS' > 
    REST)
  = 
   portFixPoints(
    < O : Actor | > 
    (O ! PI ==> (O' ! PI') ; EPIS)
    < O' : Actor | ports : < PI' : InPort | status : DPS, value : V > PORTS' >
    REST) .

  ----- B] isolated port -----

  --- if an input port is *isolated*, then the input port is absent.
  ceq portFixPoints(
     < O : Actor | ports : < PI : InPort | status : unknown > PORTS > 
     REST)
  = portFixPoints(
     < O : Actor | ports : < PI : InPort | status : absent > PORTS > 
     REST)
  if isolatedPort?(O ! PI, REST) .

  --- isolated if no connection from *enabled* actors to an input port, 
  op isolatedPort? : EPortId Configuration ~> Bool .
  eq isolatedPort?(O ! PI, (O' ! PI' ==> (O ! PI) ; EPIS)
                         < O' : Actor | status : enabled > CF) = false .
  eq isolatedPort?(O ! PI, CF) = true [owise] .

  ----- C] disabled actor -----

  --- if an actor is disabled, then all outports are absent.
  eq portFixPoints(
    < O : Actor | status : disabled,
                  ports : < PI : OutPort | status : unknown > PORTS > 
    REST)
  =
   portFixPoints(
    < O : Actor | ports : < PI : OutPort | status : absent >
                  setUnknownOutPortsAbsent(PORTS) > 
    REST) .


  *** 3] postfire
  --- during postfire, parameter is evaluated (if needed) and updated.
  --- NOTE: every change during postfire MUST NOT touch "value" attribute,
  ---       since other actor may require the previous value of the parameter.

  --- if disabled, do nothing
  eq postfire(Actor, < O : Actor | status : disabled > ) = < O : Actor | > .

  --- if enabled, update any changes in parameters
  --- FIXME: parameters can become invalid only if there exist some modified parameters.
  ceq postfire(Actor, < O : Actor | status : enabled, parameters : PARAMS >)
   = < O : Actor | parameters : initParams(PARAMS) >
   if < O : Actor | > :: StableObject .

  --- init parameters to be evaluated, and apply changes during postfire
  op initParams : Configuration ~> Configuration [frozen] .
  eq initParams(< RI : Parameter | status : valid, exp : PE > PARAMS)
   = < RI : Parameter | status : invalid > initParams(PARAMS) .
  eq initParams(< RI : Parameter | status : valid, exp : V > PARAMS)
   = < RI : Parameter | status : calculated(V) > initParams(PARAMS) .
  eq initParams(< RI : Parameter | status : calculated(V) > PARAMS)
   = < RI : Parameter | exp : V > initParams(PARAMS) . --- postfire result
  eq initParams(none) = none .


  --- NOTE: equations for computation are possible already started before
  --- the function initParams ends.


  *** 4] update
  --- update all parameters

  eq update(Actor, < O : Actor | parameters : PARAMS >)
  = < O : Actor | parameters : updateParams(PARAMS) > .

  ---------------------------------------------------------------------
  --- Computation
  ---------------------------------------------------------------------

  *** 0] Environments

  --- get env from parameters
  op paramEnv : Configuration ~> KItem .
  eq paramEnv(PARAMS) = env(getParamEnv(emptyEnv, PARAMS)) .

  --- get env from ports and parameters
  op portParamEnv : Configuration Configuration ~> KItem .
  eq portParamEnv(PORTS, PARAMS)
   = env(getParamEnv(getPortEnv(emptyEnv, PORTS), PARAMS)) .

  op getParamEnv : EnvMap Configuration ~> EnvMap .
  eq getParamEnv(ENV, < RI : Parameter | value : V > PARAMS) 
   = getParamEnv(ENV[RI <-| V], PARAMS) .
  eq getParamEnv(ENV, none) = ENV .

  op getPortEnv : EnvMap Configuration ~> EnvMap .
  eq getPortEnv(ENV, < PI : InPort | status : PS, value : V > PORTS) 
   = getPortEnv(ENV[if PS == present then PI <-| V else PI <-? fi], PORTS) .
  eq getPortEnv(ENV, PORTS) = ENV [owise] .

  *** 1] Parameter computation

  --- start computation for invalid parameters
  eq < O : Actor |
      parameters : < RI : Parameter | exp : E, status : invalid > PARAMS,
      computation : noComputation >
  =
   < O : Actor |
      parameters : < RI : Parameter | > PARAMS,
      computation : #param(RI) / k(E) paramEnv(< RI : Parameter | > PARAMS) > .

  --- if computation is finished and we get a value, update the parameter.
  eq < O : Actor |
      parameters : < RI : Parameter | > PARAMS,
      computation : #param(RI) / k(V) env(ENV) > 
  = 
   < O : Actor |
      parameters : < RI : Parameter | status : calculated(V) > PARAMS,
      computation : noComputation > .

  *** 2] port computation

  --- Any proper expression in output port is computed before transferred.
  eq < O : Actor |
      parameters : PARAMS,
      ports : < PI : OutPort | status : present, value : PE > PORTS,
      computation : noComputation >
  = 
   < O : Actor |
      ports : < PI : OutPort | > PORTS,
      computation : #port(PI) / k(PE) paramEnv(PARAMS) > .

  --- if the value of a port is computed, then it is pluged back.
  eq < O : Actor |
      ports : < PI : OutPort | status : present > PORTS,
      computation : #port(PI) / k(V) env(ENV) >
  =  
   < O : Actor |
      ports : < PI : OutPort | value : V > PORTS,
      computation : noComputation > .

  *** 3] propagate determined port value
  eq < O : Actor | 
        ports : < PI : InPort | status : present, value : V > PORTS,
        computation : CI / k(K) env(PI <-? ; ENV) >
   = 
     < O : Actor | computation : CI / k(K) env(PI <-| V ; ENV) > .
endtom)
/**/

/***formal_Entity***/
(tomod CHECK-ACTOR is
  inc MODELCHECK-BASE .
  pr ACTOR .

*** check syntax
  sorts PortCheck ParamCheck .
  op port_is_ : PortId Exp -> PortCheck [ctor prec 71] .
  op port_is_ : PortId PortStatus -> PortCheck [ctor prec 71] .
  op _=_ : ParamId Exp -> ParamCheck [ctor prec 71] .

  sort BasicCheckSet .
  subsorts PortCheck ParamCheck < BasicCheckSet .
  op `(`) : -> BasicCheckSet .
  op _`,_ : BasicCheckSet BasicCheckSet -> BasicCheckSet 
                            [ctor assoc comm id: () prec 121] .

*** variables 
  var PORTS PARAMS CF : Configuration .  var PS : PortStatus .  
  var O : Oid . var RI : ParamId .  var PI : PortId .
  var BCS : BasicCheckSet .  var V : Value . var BE : Exp .

*** Port && Parameter check
  op |_ : BasicCheckSet -> PropPattern [ctor] .
  
  eq < O : Actor | ports : PORTS, parameters : PARAMS > prop-query(O | BCS)
   = < O : Actor | > prop-result(basic-check?(PORTS, PARAMS, BCS)) .

--- definition for checking basic actor components
  op basic-check? : Configuration Configuration BasicCheckSet -> Bool .

  --- check port status
  eq basic-check?(< PI : Port | status : PS > PORTS, PARAMS, 
                  (port PI is PS, BCS))
   = basic-check?(PORTS, PARAMS, BCS) .
  
  --- check port value
  eq basic-check?(< PI : Port | status : present, value : V > PORTS, PARAMS, 
                  (port PI is V, BCS))
   = basic-check?(PORTS, PARAMS, BCS) .

  --- check parameter value
  eq basic-check?(PORTS, < RI : Parameter | value : V > PARAMS, (RI = V, BCS))
   = basic-check?(PORTS, PARAMS, BCS) .

  eq basic-check?(PORTS, PARAMS, ()) = true .
  eq basic-check?(PORTS, PARAMS, BCS) = false [owise] .


*** boolean Ptoelmy expression check
  op ?_ : Exp -> PropPattern [ctor] .

  --- check the exp result by evaluating it in the extra port
  eq < O : Actor | ports : PORTS > prop-query(O ? BE)
   = < O : Actor | 
        ports : < @CPI@ : OutPort | status : present, value : BE > PORTS >
     prop-query(O | (port @CPI@ is # true)) .

  op @CPI@ : -> PortId [ctor] .
endtom)
/**/