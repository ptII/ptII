---(- Definition of Ptolemy Expression
The Ptolemy expression is a simple java-like functional language.
It is typed language, but I assume that the type of translated 
expression is already correct.
---)----------------------------------

--- Identifiers for variable 
fmod PTOLEMY-ID is
  protecting QID .
  sort VarId .
  subsort Qid < VarId .
endfm

--- Values of Ptolemy expression
--- There are three categories of values: base, data structure, and closure
--- In this module, basic and structured values are defined
fmod PTOLEMY-VALUE is
  protecting CONVERSION .
  protecting RAT .
  protecting FLOAT .
  protecting STRING .
  protecting PTOLEMY-ID .

  --- basic values one of rational number, float point number, and boolean.
  sort Value .
  op nil : -> Value .

  sort NumberValue .
  ops NaN Infinity : -> NumberValue [ctor] .

  sort FiniteNumber RationalValue FloatValue .
  subsort RationalValue FloatValue < FiniteNumber < NumberValue < Value .
  op #_ : Rat -> RationalValue [ctor prec 0] .  
  op #_ : Float -> FloatValue [ctor prec 0] .

  sort BoolValue .
  subsort BoolValue < Value .
  op #_ : Bool -> BoolValue [ctor prec 0] .

  sort StringValue .
  subsort StringValue < Value .
  op #_ : String -> StringValue [ctor prec 0] .

  --- there are three data structure: array, record, and matrix
  op {_} : ValueList -> Value [ctor] .	--- array
  op {_} : ValueRow -> Value [ctor] .		--- record
  op [_] : ValueMatrix -> Value [ctor] .	--- matrix

--- list
  sort ValueList .
  subsort Value < ValueList .
  op `(`) : -> ValueList [ctor] .
  op _,_ : ValueList ValueList -> ValueList [ctor assoc id: () prec 121] .

--- record
  sort ValueRow .
  subsort ValueItem < ValueRow .
  op {} : -> ValueRow [ctor] .
  op _,_ : ValueRow ValueRow -> ValueRow [assoc comm id: {} prec 121] .

  sort ValueItem .
  op _<-_ : VarId Value -> ValueItem [ctor prec 110] .

--- matrix
  sort ValueMatrix .
  subsort ValueList < ValueMatrix .
  op Z : -> ValueMatrix [ctor] .
  op _;_ : ValueMatrix ValueMatrix -> ValueMatrix [ctor assoc id: Z prec 125] .
endfm

--------------------------
--- Ptolemy Expression ---
--------------------------

--- Definition of ptolemy expression
--- ProperExp is the expression which is *not* a value.
fmod PTOLEMY-EXP is
  extending PTOLEMY-VALUE .

  sort Exp .
  subsort Value < Exp .	--- value is expression.

  sort ProperExp .
  subsort VarId < ProperExp < Exp . --- variable is not a value

  --- function definition (closure). closure is also value
  --- FIXME: free variables in exp is ignored. Usually,
  ---  variable environments are closed together, but in Ptolemy,
  ---  it is complicated because of ancestors' environments
  op function(_)_ : VarIdList Exp -> Value .	

--- binary operators
  sort BinaryOp .
  op ___ : Exp BinaryOp Exp -> ProperExp .
  ops lessThan greaterThan <= >= equals != : -> BinaryOp . --- comparison
  ops << >> >>> : -> BinaryOp .	    --- shift
  ops & | # : -> BinaryOp .	    --- bitwise 
  ops && || : -> BinaryOp .	    --- logic
  ops + - * / % ^ : -> BinaryOp	.   --- numerical 

--- unary operators
  sort UnaryOp .
  op __ : UnaryOp Exp -> ProperExp .
  ops ~ ! - : -> UnaryOp . --- bitwise, logic, numerical

--- conditional expression
  op _?_:_ : Exp Exp Exp -> ProperExp [prec 60] .

--- function expression
  --- explist contains arguments for a function
  op _(_) : Exp ExpList -> ProperExp [prec 10] .   --- function/array/matrix app
  op _.._(_) : Exp VarId ExpList -> ProperExp [prec 12] .   --- method call

--- data types
  op {_} : ExpList -> Exp .		   --- array
  op {_} : ProperExpList -> ProperExp .  --- array

  op {_} : ExpRow -> Exp .		--- record
  op {_} : ProperExpRow -> ProperExp .  --- record

  op [_] : Matrix -> Exp .		--- matrix
  op [_] : ProperMatrix -> ProperExp .	--- matrix

-------------------------
--- Data Types
-------------------------

--- lists
  sort ExpList .
  subsort ValueList Exp < ExpList .
  op _,_ : ExpList ExpList -> ExpList [ditto] .

  sort ProperExpList .	--- for function argument
  subsort ProperExp < ProperExpList < ExpList .
  op _,_ : ProperExpList ExpList -> ProperExpList [ditto] .
  op _,_ : ExpList ProperExpList -> ProperExpList [ditto] .

  sort VarIdList .	--- for function argument
  subsort VarId < VarIdList < ProperExpList .
  op _,_ : VarIdList VarIdList -> VarIdList [ditto] .

--- record items
  sort ExpRow .
  subsort RecordItem ValueRow < ExpRow .
  op _,_ : ExpRow ExpRow -> ExpRow [assoc comm id: {} prec 121] .

  sort RecordItem .
  subsort ValueItem < RecordItem .
  op _<-_ : VarId Exp -> RecordItem [ctor prec 110] .

  --- proper
  sort ProperExpRow .
  subsort ProperRecordItem < ProperExpRow < ExpRow .
  op _,_ : ProperExpRow ExpRow -> ProperExpRow [ditto] .

  sort ProperRecordItem .
  subsort ProperRecordItem < RecordItem .
  op _<-_ : VarId ProperExp -> ProperRecordItem [ctor prec 110] .

--- matrix items
  sort Matrix .
  subsort ValueMatrix ExpList < Matrix .
  op _;_ : Matrix Matrix -> Matrix [ditto] .

  sort ProperMatrix .
  subsort ProperExpList < ProperMatrix < Matrix .
  op _;_ : Matrix ProperMatrix -> ProperMatrix [ditto] .
  op _;_ : ProperMatrix Matrix -> ProperMatrix [ditto] .
endfm

--- K-computation of ptolemy expression.
--- Basic definition for continuation-passing style
--- semantics of Ptolemy Expression
fmod K-COMPUTATION is
  sort K KLabel KResult KProper .
  subsort KLabel KResult KProper < K .

  op .K : -> K .
  op _->_ : K K -> K [prec 50 assoc id: .K] .
  op _->_ : KProper K -> KProper [ditto] .

  sort Computation .
  op k : K -> Computation .
endfm

--- A Ptolemy Exp environment is a map from
--- variable id to value (ValueMap).  Also, extended version
--- of ValueMap is defined for a later use.
fmod EXP-ENVIRONMENT is
  protecting PTOLEMY-EXP .

  sort VarAssignment ValueAssignment .
  subsort ValueAssignment < VarAssignment .
  op _|->_ : VarId Exp -> VarAssignment [ctor prec 80] .
  op _|->_ : VarId Value -> ValueAssignment [ditto] .

  sort AssignMap ValueMap .    --- set of variable assignments
  subsort ValueAssignment < VarAssignment ValueMap < AssignMap .
  op emptyMap : -> ValueMap [ctor] .
  op _;_ : AssignMap AssignMap -> AssignMap 
	[ctor assoc comm id: emptyMap prec 90] .
  op _;_ : ValueMap ValueMap -> ValueMap [ditto] .

  vars V V' : Value .  var VL : ValueList .  
  var I : VarId . var IL : VarIdList . 
  vars VM VM' : ValueMap . vars AM1 AM2 : AssignMap .  vars E1 E2 : Exp .

  --- Extended notion of mapping.
  --- "I1, I2, I3, ... In |-> E1, E2, ..., En" is equivalent to
  --- "I1 |-> E1 ; ... ; In |-> En"
  op _|->_ : VarIdList ValueList -> ValueMap [ditto] .
  eq (I, IL) |-> (V, VL) = (I |-> V) ; (IL |-> VL) .
  eq () |-> VL = emptyMap .

  --- check that a variable with a varId is defined in Memory
  op _in_ : VarId ValueMap -> Bool .
  eq I in ((I |-> V) ; VM) = true .
  eq I in VM = false [owise] .

  --- overwrite a value map
  op _<+_ : ValueMap ValueMap -> ValueMap .
  eq ((I |-> V) ; VM) <+ ((I |-> V') ; VM') = ((I |-> V) ; VM) <+ VM' .
  eq VM <+ VM' = VM ; VM' [owise] .
endfm

--- Heating and Cooling of Ptolemy expression.
--- When heating an expression, its non-value sub-part is
--- activated and computed first. The sub-part will be plugged into
--- original expression during cooling.
fmod PTOLEMY-STRICTNESS is
  protecting K-COMPUTATION .
  protecting PTOLEMY-EXP .

  subsort Value < KResult .
  subsort ProperExp < KProper .
  subsort Exp < K .

  var K : K .  var I : VarId .  var Bop : BinaryOp . var Uop : UnaryOp .
  var E1 E2 : Exp .  var P1 P2 : ProperExp .  var V1 V2 : Value .
  var EL EL' : ExpList . var ER : ExpRow . var EM EM' : Matrix .
  var PL : ProperExpList . var VL : ValueList .

--- binary and unary ops
  op []__ : BinaryOp Exp -> KProper .
  op __[] : Exp BinaryOp -> KProper .
  op _[] : UnaryOp -> KProper .

  eq k(      P1 Bop E2 -> K)
   = k(P1 -> [] Bop E2 -> K) .
  eq k(V1 -> [] Bop E2 -> K)
   = k(      V1 Bop E2 -> K) .
  eq k(      E1 Bop P2 -> K)
   = k(P2 -> E1 Bop [] -> K) .
  eq k(V2 -> E1 Bop [] -> K)
   = k(      E1 Bop V2 -> K) .

  eq k(      Uop P1 -> K)
   = k(P1 -> Uop [] -> K) .
  eq k(V1 -> Uop [] -> K)
   = k(      Uop V1 -> K) .

--- conditional expression
  op []?_:_ : Exp Exp -> KProper .

  eq k(     P1 ? E1 : E2 -> K)
   = k(P1 -> []? E1 : E2 -> K) .
  eq k(V1 -> []? E1 : E2 -> K)
   = k(     V1 ? E1 : E2 -> K) .

--- function expression
  op _(_[]_) : Exp ExpList ExpList -> KProper .  
  op [](_) : ExpList -> KProper .

  --- FIXME: free variable of function clousre should be heated?!

  eq k(      P1(EL) -> K)
   = k(P1 -> [](EL) -> K) .
  eq k(V1 -> [](E1) -> K)
   = k(      V1(E1) -> K) .
  eq k(    E1(EL, P2, EL') -> K)
   = k(P2 -> E1(EL [] EL') -> K) .
  eq k(V1 -> E1(EL [] EL') -> K)
   = k(    E1(EL, V1, EL') -> K) .

  op _.._(_[]_) : Exp VarId ExpList ExpList -> KProper .  
  op [].._ : Exp -> KProper .

  eq k(     P1 .. I(EL) -> K)
   = k(P1 -> [].. I(EL) -> K) .
  eq k(V1 -> [].. I(EL) -> K)
   = k(     V1 .. I(EL) -> K) .
  eq k(    E1 .. I(EL, P1, EL') -> K)
   = k(P1 -> E1 .. I(EL [] EL') -> K) .
  eq k(V1 -> E1 .. I(EL [] EL') -> K)
   = k(    E1 .. I(EL, V1, EL') -> K) .

---------------------------
--- data types
  op {_[]_} : ExpList ExpList -> ProperExp .  ---  array
  op {_<-[]_} : VarId ExpRow -> ProperExp .  --- record
  op [_[]_] : Matrix Matrix -> ProperExp .  --- matrix

  eq k(    { EL, P1, EL' } -> K)
   = k(P1 -> { EL [] EL' } -> K) .
  eq k(V1 -> { EL [] EL' } -> K)
   = k(    { EL, V1, EL' } -> K) .

  eq k(    {I <- P1, ER} -> K)
   = k(P1 -> {I <-[] ER} -> K) .
  eq k(V1 -> {I <-[] ER} -> K)
   = k(    {I <- V1, ER} -> K) .

  eq k(  [EM ; PL ; EM'] -> K)
   = k(PL -> [EM [] EM'] -> K) .
  eq k(VL -> [EM [] EM'] -> K)
   = k(  [EM ; VL ; EM'] -> K) .
endfm

--- Computation of each expression.
fmod PTOLEMY-EXP-DEFINITION is
  inc PTOLEMY-EXP .

  var I : VarId . vars V1 V2 : Value .  vars E E1 E2 : Exp . 
  var N1 N2 : Nat . vars R1 R2 : Rat . vars F1 F2 : Float . vars B1 B2 : Bool .
  vars EL : ExpList . var ER : ExpRow . var EM : Matrix .
  var FNV : FiniteNumber .

-----------------------------
--- comparison operators
-----------------------------
  eq #(F1) lessThan #(F2) = #(F1 < F2) .
  eq #(R1) lessThan #(R2) = #(R1 < R2) .
  eq #(R1) lessThan #(F2) = #(float(R1) < F2) .
  eq #(F1) lessThan #(R2) = #(F1 < float(R2)) .
  eq FNV lessThan Infinity = # true .
  eq Infinity lessThan FNV = # false .

  eq #(F1) greaterThan #(F2) = #(F1 > F2) .
  eq #(R1) greaterThan #(R2) = #(R1 > R2) .
  eq #(R1) greaterThan #(F2) = #(float(R1) > F2) .
  eq #(F1) greaterThan #(R2) = #(F1 > float(R2)) .
  eq FNV greaterThan Infinity = # false .
  eq Infinity greaterThan FNV = # true .

  eq V1 equals V1 = # true .
  eq #(R1) equals #(F2) = #(float(R1) == F2) .
  eq #(F1) equals #(R2) = #(F1 == float(R2)) .
  eq V1 equals V2 = # false [owise] .
  ---FIXME: equality for other values

  eq V1 <= V2 = ! (V1 greaterThan V2) .
  eq V1 >= V2 = ! (V1 lessThan V2) .
  eq V1 != V2 = ! (V1 equals V2) .

-----------------------------
--- shift operators
-----------------------------
  eq #(N1) << #(N2) = #(N1 << N2) .
  eq #(N1) >> #(N2) = #(N1 >> N2) .
  eq #(N1) >>> #(N2) = #(N1 >> N2) .  ---FIXME: Correct the def of >>>

-----------------------------
--- bitwise operators
-----------------------------
  eq ~ #(N1) = #(N1 xor -1) .
  eq #(N1) & #(N2) = #(N1 & N2) .
  eq #(N1) | #(N2) = #(N1 | N2) .
  eq #(N1) # #(N2) = #(N1 xor N2) .

-----------------------------
--- logic operators
-----------------------------
  eq ! #(B1) = #(not B1) .
  eq #(B1) && #(B2) = #(B1 and B2) .
  eq #(B1) || #(B2) = #(B1 or B2) .

-----------------------------
--- numerical operators
-----------------------------
  eq - (#(F1)) = #(- F1) .
  eq - (#(R1)) = #(- R1) .

  eq #(F1) + #(F2) = #(F1 + F2) .
  eq #(R1) + #(R2) = #(R1 + R2) .
  eq #(R1) + #(F2) = #(R1 + rat(F2)) .
  eq #(F1) + #(R2) = #(rat(F1) + R2) .

  eq #(F1) - #(F2) = #(F1 - F2) .
  eq #(R1) - #(R2) = #(R1 - R2) .
  eq #(R1) - #(F2) = #(R1 - rat(F2)) .
  eq #(F1) - #(R2) = #(rat(F1) - R2) .

  eq #(F1) * #(F2) = #(F1 * F2) .
  eq #(R1) * #(R2) = #(R1 * R2) .
  eq #(R1) * #(F2) = #(R1 * rat(F2)) .
  eq #(F1) * #(R2) = #(rat(F1) * R2) .

  eq #(F1) / #(F2) = #(F1 / F2) .
  eq #(R1) / #(R2) = #(R1 / R2) .
  eq #(R1) / #(F2) = #(R1 / rat(F2)) .
  eq #(F1) / #(R2) = #(rat(F1) / R2) .

  eq #(R1) % #(R2) = #(R1 rem R2) .
  eq #(F1) % #(F2) = #(rat(F1) rem rat(F2)) .
  eq #(R1) % #(F2) = #(R1 rem rat(F2)) .
  eq #(F1) % #(R2) = #(rat(F1) rem R2) .

  eq #(F1) ^ #(F2) = #(F1 ^ F2) .
  eq #(R1) ^ #(R2) = #(R1 ^ R2) .
  eq #(R1) ^ #(F2) = #(R1 ^ rat(F2)) .
  eq #(F1) ^ #(R2) = #(rat(F1) ^ R2) .

-----------------------------
--- conditional expression
-----------------------------
  eq #(true) ? E1 : E2 = E1 .
  eq #(false) ? E1 : E2 = E2 .

-----------------------------
--- function expression
-----------------------------
  
  --- default functions 

  ---FIXME : 'sin is not a value. closure?
  --- defined as base library
  eq 'sin(#(F1)) = #( sin(F1) ) .

  --- data structure
  eq { () } .. 'length(()) = #(0) .
  eq { E, EL } .. 'length(()) = #(1) + ({ EL } .. 'length(())) .

-----------------------------
--- data structures
-----------------------------

  --- array
  eq { E, EL }(#(0)) = E .
  ceq { E, EL }(#(N1)) = { EL }(#(N1 - 1)) if N1 > 0 .

  --- record
  eq {(I <- E), ER} .. I(()) = E .

  --- matrix
  eq [(E, EL) ; EM](#(0), #(0)) = E .
  ceq [(E, EL) ; EM](#(N1), #(0)) 
    = [EL ; EM](#(N1 - 1), #(0)) if N1 > 0 .
  ceq [EL ; EM](#(N1), #(N2)) 
    = [EM](#(N1), #(N2 - 1)) if N2 > 0  .

  ***FIXME : basic operation for data structures such as *
  ***FIXME : default methods for data structures
endfm
