load ptolemy-exp
load real-time-maude

*** NOTE: All 'frozen' attributes are NOT needed, since all
*** the rewrites happen at the GlobalSystem level!

*** NOTE: Port Parameters should be defined for each actor...
*** (Behavior: if something is arrived at the port, the value is used. 
***  Otherwise, the default value is used.)

--- new Configuration 
(tomod NEW-CONFIG is
  --- for ACU matching of ObjectConfiguration
  op none : -> EmptyConfiguration [ctor] .

  --- stable object (for expression computation)
  sort StableObject .
  subsort StableObject < Object .

  --- stable configuration
  sort StableConfiguration NEStableConfiguration .
  subsorts EmptyConfiguration < StableConfiguration < ObjectConfiguration .
  subsorts StableObject < NEStableConfiguration <
                StableConfiguration NEObjectConfiguration .
  op __ : NEStableConfiguration NEStableConfiguration ->
                                        NEStableConfiguration [ditto] .
  op __ : StableConfiguration StableConfiguration ->
                                        StableConfiguration [ditto] .
endtom)

(omod ACTOR-ID is
  pr NEW-CONFIG .

  --- ActorID is an extended version of OID, which
  --- can describe a hierarchical position of an actor
  --- "O1 . O2. ... On . O" : O1, O2, ..., On are ancestors of O
  sort ActorID NEActorID .
  subsort Oid < NEActorID < ActorID .
  op this : -> ActorID [ctor] .
  op parent : -> NEActorID [ctor] .
  op _._ : ActorID ActorID -> ActorID [ctor assoc id: this] .
  eq O1:Oid . O2:Oid . parent = O1:Oid .
endom)

-------------------------------------------------
---       Port, Parameter and Connection      ---
-------------------------------------------------

(omod PORTS is 
  pr QID .
  pr ACTOR-ID .
  pr PTOLEMY-EXP .

  class Port | status : PortStatus, value : Exp .
  class InPort .    
    subclass InPort < Port .
  class OutPort .   
    subclass OutPort < Port .

  --- stable port
  mb (< PI : Port | value : V:Value >) : StableObject .

----- multi port -----
  class MultiInPort | source : EPortIdSet .
    subclass MultiInPort < InPort .

  op _#_ : PortId EPortId -> PortId [ctor] .

----- port id and status -----
  sorts PortId .
  subsort Qid < PortId < Oid .   --- names for (local) ports

  sort PortStatus DetPortStatus .
  subsort DetPortStatus < PortStatus .
  op unknown : -> PortStatus [ctor] .
  ops present absent : -> DetPortStatus [ctor] .

----- Extend port id -----
  --- EPortId is the "global" name of a port. 
  sorts EPortId .
  op _!_ : ActorID PortId -> EPortId [ctor] . 

  sort EPortIdSet .
  subsort EPortId < EPortIdSet .
  op noPort : -> EPortIdSet [ctor] .
  op _;_ : EPortIdSet EPortIdSet -> EPortIdSet [ctor assoc comm id: noPort] .

----- equations -----
  var C : Cid .  var PORTS : Configuration .  
  var PI : PortId . vars PS PS' : PortStatus . 

  op setAllPorts : Configuration PortStatus ~> Configuration .
  eq setAllPorts(< PI : Port | status : PS' > PORTS, PS)
   = < PI : Port | status : PS > setAllPorts(PORTS, PS) .
  eq setAllPorts(none, PS) = none .

  op setUnknownOutPortsAbsent : Configuration ~> Configuration [frozen] .
  eq setUnknownOutPortsAbsent(< PI : OutPort | status : PS > PORTS)
   = < PI : OutPort | status : if PS == unknown then absent else PS fi >
     setUnknownOutPortsAbsent(PORTS) .
  eq setUnknownOutPortsAbsent(< PI : InPort | > PORTS)
   = < PI : InPort | > setUnknownOutPortsAbsent(PORTS) .
  eq setUnknownOutPortsAbsent(none) = none .

  op allInputPortsAbsent? : Configuration ~> Bool [frozen] .
  eq allInputPortsAbsent?(< PI : InPort | status : PS > PORTS)
   = (PS == absent) and allInputPortsAbsent?(PORTS) .
  eq allInputPortsAbsent?(none) = true .
endom)

--- PARAMETERS.
(omod PARAMETERS is
  pr QID .
  pr NEW-CONFIG .
  pr PTOLEMY-EXP .

  --- during 
  class Parameter | exp : Exp,
                    value : Value,
                    status : ParamStatus .

  sort ParamStatus .
  op invalid : -> ParamStatus [ctor] .		--- parameter will be computed
  op valid : -> ParamStatus [ctor] .		--- exp == value attribute
  op calculated : Value -> ParamStatus [ctor] . --- exp == Value

  --- stable parameter
  mb (< RI : Parameter | status : valid >) : StableObject .
  mb (< RI : Parameter | status : calculated(V) >) : StableObject .

  --- Parameter ID
  sort ParamId .
  subsort Qid < ParamId < Oid .

  var RI : ParamId . var PARAMS : Configuration . var V : Value .

  op _in_ : ParamId Configuration ~> Bool .
  eq RI in < RI : Parameter | > PARAMS = true .
  eq RI in PARAMS = false [owise] .

  op updateParams : Configuration ~> Configuration .
  eq updateParams(< RI : Parameter | status : calculated(V) > PARAMS)
   = < RI : Parameter | status : valid, value : V > updateParams(PARAMS) .
  eq updateParams(PARAMS) = PARAMS [owise] .

endom)

--- CONNECTIONS.
(omod CONNECTIONS is 
  pr PORTS .
  sort Connection .
  op _==>_ : EPortId EPortIdSet -> Connection [ctor] .

  --- Connections are in the global configuration, 
  --- we need to state that connections are also, e.g., objects
  --- but it's not exactly object!
  subsort Connection < NEStableConfiguration .

  var EPI : EPortId . var EPIS : EPortIdSet .

  eq EPI ==> noPort     = none .	    --- empty connection
  eq EPI ==> EPI ; EPIS = EPI ==> EPIS .    --- self connection
endom)

-------------------------------------------------
---                   Events                  ---
-------------------------------------------------

(tomod EVENTS is
  pr PORTS .
  pr POSRAT-TIME-DOMAIN-WITH-INF .

  --- event in Ptolemy
  --- An atomic event consists maybe of a port and the value that 
  --- port should take.
  op event : EPortId Value -> Event [ctor] .

  --- Event, and Multisets of such basic events:
  sort Event Events .
  subsort Event < Events .
  op noEvent : -> Events [ctor] .
  op __ : Events Events -> Events [ctor assoc comm id: noEvent] .

  --- Events with "timer" (not "time") stamp:
  sort TimedEvent .
  op _;_;_ : Events Time Nat -> TimedEvent [ctor] .
endtom)

(tomod EVENT-QUEUE is
  pr EVENTS .
  sort EventQueue .
  subsort TimedEvent < EventQueue .
  op nil : -> EventQueue [ctor] .
  op _::_ : EventQueue EventQueue -> EventQueue [ctor assoc id: nil] .

  vars EQ : EventQueue .  var EVENT : Event .  var EVTS : Events .
   vars T T' : Time .  var N N' : Nat . 

  op addEvent : Event Time Nat EventQueue ~> EventQueue .

  --- add event first:
  ceq addEvent(EVENT, T, N, (EVTS ; T' ; N') :: EQ) 
    = ((EVENT ; T ; N) :: (EVTS ; T' ; N') :: EQ)
   if T < T' or (T == T' and N < N') .

  --- add event to the first event:
  eq addEvent(EVENT, T, N, (EVTS ; T ; N) :: EQ) 
   = (EVENT EVTS ; T ; N) :: EQ .

  --- add event to rest of queue:
  ceq addEvent(EVENT, T, N, (EVTS ; T' ; N') :: EQ) 
    = ((EVTS ; T' ; N') :: addEvent(EVENT, T, N, EQ))
   if T' < T or (T' == T and N' < N) .

  eq addEvent(EVENT, T, N, nil) = (EVENT ; T ; N) .

  --- In a first attempt, the global event queue is just an "object":
  class EventQueue | queue : EventQueue .
  op global : -> Oid [ctor] .

  --- generated events are just an "message" and delivered to an event queue.
  msg schedule-evt : Event Time Nat -> Msg .

  --- event message is dilivered to global event queue
  eq < global : EventQueue | queue : EQ > schedule-evt(EVENT, T, N)
   = < global : EventQueue | queue : addEvent(EVENT, T, N, EQ) > .

  --- events will be also delivered from a queue to each port.
  --- the acceptance of a message must be defined .
  msg active-evt : Event -> Msg .

  --- generate active events. 
  op releaseEvt : Events ~> Configuration .
  eq releaseEvt(EVENT EVTS) = active-evt(EVENT) releaseEvt(EVTS) .
  eq releaseEvt(noEvent) = none .
endtom)

-------------------------------------------------
---         Basic definition for Actor        ---
-------------------------------------------------

(tomod ACTOR-BASE is
  pr EVENT-QUEUE .
  pr CONNECTIONS .

  var C : Cid .  vars CF : Configuration .  var NCF NCF' : NEConfiguration .  
  var OBJ : Object .  var OBJS : ObjectConfiguration .  
  var SOBJ : StableObject . var SOBJS : StableConfiguration . 
  var CONN : Connection .  var M : Msg .  
  vars EQ : EventQueue . var EVENT : Event . var EVTS : Events . var T : Time .

*** delta function for configuration
  op delta : Configuration Time ~> Configuration [frozen] .
  eq delta(NCF NCF', T) = delta(NCF, T) delta(NCF', T) .
  eq delta(OBJ, T) = OBJ [owise] .
  eq delta(CONN, T) = CONN .
  eq delta(M, T) = M .
  eq delta(none, T) = none .

*** 
  op relative-evt : Event Time -> Msg [ctor] .
  eq relative-evt(EVENT, T) 
   = schedule-evt(EVENT, T, if T == 0 then 1 else 0 fi) .

*** The followings are steps for actor execution.
*** Each step should be implemented for each actor, or
*** the default operations (do nothing) will be taken.

  op ^_ : Cid ~> Cid .

*** 0. init
  op init : Cid Object ~> Configuration [frozen (2)] .
  eq init(C, M CF) = M init(C, CF) .            --- when msg generated
  eq init(C, OBJ) = init(^ C, OBJ) [owise] .    --- call super class

  op initAll : Configuration ~> Configuration [frozen] .
  eq initAll(OBJ CF) = init(class(OBJ), OBJ) initAll(CF) .
  eq initAll(CF) = CF [owise] .

*** 1. preparing computation step.  (prefire)
  op prefire : Cid Object ~> Configuration [frozen (2)] .
  eq prefire(C, M CF) = M prefire(C, CF) .
  eq prefire(C, OBJ) = prefire(^ C, OBJ) [owise] .

  --- functions for configuration level. 
  op prefire : Configuration ~> Configuration [frozen] .
  eq prefire(OBJ OBJS) = prefire(class(OBJ), OBJ) prefire(OBJS) .
  eq prefire(OBJS) = OBJS [owise] .

*** 2. Compute fixed points for the various ports. (fire)
  op portFixPoints : Configuration ~> Configuration [frozen] .

  --- terminate portFixPoints if no change, when stable
  eq portFixPoints(SOBJS) = SOBJS [owise] .

*** 3. Generating events and updating states and parameters. (post-fire)
  op postfire : Cid Object ~> Configuration [frozen (2)].
  eq postfire(C, M CF) = M postfire(C, CF) .    --- when msg generated 
  eq postfire(C, OBJ) = postfire(^ C, OBJ) [owise] .

  op postfire : Configuration ~> Configuration [frozen] .
  eq postfire(OBJ OBJS) = postfire(class(OBJ), OBJ) postfire(OBJS) .
  eq postfire(OBJS) = OBJS [owise] .

*** 4. Parameter Computation
  --- initiated only if stable

  op update : Cid Object ~> Configuration [frozen (2)] .
  eq update(C, OBJ) = update(^ C, OBJ) [owise] .

  op update : Configuration ~> Configuration [frozen] .
  eq update(SOBJ SOBJS) = update(class(SOBJ), SOBJ) update(SOBJS) .
  eq update(SOBJS) = SOBJS [owise] .

  --- make the global event queue reachable to the event
  eq update(schedule-evt(EVENT,T,N:Nat) CF) 
   = schedule-evt(EVENT,T,N:Nat) update(CF) .
endtom)

------------------------------------------------
---           Execution Semantics            ---
------------------------------------------------

(tomod DE-DYNAMICS is 
  pr ACTOR-BASE .    

  vars SYSTEM : StableConfiguration . 
  var O : Oid .  var P : PortId .  var PORTS : Configuration .
  vars T T' : Time .  var NZT : NzTime . var N : Nat . var NZ : NzNat .
  var EVTS : Events .  var QUEUE : EventQueue .

  --- delta rules for event queue
  op delta : EventQueue Time ~> EventQueue .
  eq delta((EVTS ; T ; N) :: QUEUE, T') 
   = (EVTS ; T monus T' ; N) :: delta(QUEUE, T') .
  eq delta(nil, T) = nil .

  --- Although we could probably be happy with ONE single rules, for conceptual
  --- clarity, we use three rules in the first attempt.

  --- NOTE: each rule is applied only for *stable* object configuration.

  --- Basically, the rules advance time till the next event, 
  --- and then, IN A SEPARATE rule, executes a transition.
  --- These rules could obviously be combined into one ...

  rl [tick] : 
     { SYSTEM < global : EventQueue | queue : (EVTS ; NZT ; N) :: QUEUE > }
  => { delta(SYSTEM, NZT) 
       < global : EventQueue | queue : (EVTS ; 0 ; N) :: delta(QUEUE, NZT) > }
  in time NZT .

  --- shortTick should be invoked for non-zero case (for model checking)
  rl [shortTick] : 
     { SYSTEM < global : EventQueue | queue : (EVTS ; 0 ; NZ) :: QUEUE > }
  =>
     { SYSTEM < global : EventQueue | queue : (EVTS ; 0 ; 0) :: QUEUE > } .

  --- execute a step:
  rl [executeStep] : 
     { < global : EventQueue | queue : (EVTS ; 0 ; 0) :: QUEUE > SYSTEM }
  =>
     { < global : EventQueue | queue : QUEUE > 
       update(postfire(                             --- postfire
               portFixPoints(                       --- fire
                releaseEvt(EVTS) prefire(SYSTEM)    --- prefire
      )))} .

endtom)

(tomod MODELCHECK-BASE is
  pr ACTOR-BASE .
  inc TIMED-MODEL-CHECKER .

  sorts PropPattern .
  op __ : ActorID PropPattern -> Prop [ctor] .

  --- define checking under context. The context is the outside configuration.
  msg prop-query : Prop -> Msg .
  msg prop-result : Bool -> Msg .

  var CF : Configuration . var B : Bool . var PROP : Prop .

  --- make a query to the system. 
  --- NOTE: Only one query is possible for a system
  eq {CF} |= PROP = checkprop(CF prop-query(PROP)) .

  --- return true if the quary result is true
  op checkprop : Configuration ~> Bool [frozen] .
  eq checkprop(prop-result(B) CF) = B .
endtom)

(tomod CASTING-DEF is
  pr PTOLEMY-VALUE .
  pr POSRAT-TIME-DOMAIN-WITH-INF .

  op toTime : NumberValue ~> TimeInf .
  eq toTime(# R:Rat) = R:Rat .
  eq toTime(# F:Float) = rat(F:Float) .
  eq toTime(Infinity) = INF .   ---FIXME
endtom)

(tomod OBJECT-WITH-TIMER is
  inc ACTOR-BASE .

  class TimeObj | current-time : Time .

  var T T' : Time . var O : Oid .

  eq delta(< O : TimeObj | current-time : T >, T')
     = < O : TimeObj | current-time : T + T' > .
endtom)

