/***attr_FSMActor***/
currState : '$info(initState),
initState : '$info(initState),
transitions : ($indent( $info(transitions) ))/**/

/***semantics_FSMActor***/
(tomod FSM-ACTOR is 
  inc ACTOR .

  class FSM-Actor | currState : Location, 
                    initState : Location,
                    transitions : TransitionSet .
    subclass FSM-Actor < Actor .
  eq ^ FSM-Actor = Actor .

  --- stable FSM-Actor
  mb (< O : FSM-Actor | 
         ports : SPORTS:StableConfiguration,
         parameters : SPARAMS:StableConfiguration >) : StableObject .

  --- Location is a name of a state
  sort Location .
  subsorts Qid < Location .

  sort TransitionId .
  subsort Qid < TransitionId .
  
  sort Transition TransitionSet .
  subsort Transition < TransitionSet .
  op _:_-->_`{_`} : TransitionId Location Location TransBody 
                                                    -> Transition [ctor] .
  op emptyTransitionSet : -> TransitionSet [ctor] .
  op _;_ : TransitionSet TransitionSet -> TransitionSet
                               [ctor assoc comm id: emptyTransitionSet] .

  --- The transition body has guard, output, and set.
  sort TransBody .
  op guard:_output:_set:_ : Exp AssignMap AssignMap -> TransBody [ctor] .

---------------------------------------------------------------------
--- Variable Declaration
---------------------------------------------------------------------

  vars CF PORTS PORTS' PARAMS : Configuration .  
  vars REST : ObjectConfiguration .
  vars O O' QUE : Oid . var RI : ParamId . vars PI PI' : PortId .

  var TRANSSET : TransitionSet . var BODY : TransBody . var TI : TransitionId .
  vars L STATE STATE' STATE'' : Location . 
  vars E TG : Exp . var OL AL : AssignMap .

  var VI : VarId . vars V : Value . var VREC : ValueRow .
  var VM : ValueMap .

---------------------------------------------------------------------
--- Semantics Steps
---------------------------------------------------------------------

*** 0] init

*** 1] prefire

*** 2] portFixPoints

  --- ASSUME: FSM actor has at least one output port.

----- A] compute guards -----
  --- set to calculate the guards of transitions from the current state
  --- we set to compute ALL guards here.
  eq portFixPoints(
      < O : FSM-Actor | 
         status : enabled,
         currState : STATE, 
         transitions : TRANSSET,
	 parameters : PARAMS,
         ports : < PI : InPort | status : present > 
                 < PI' : OutPort | status : unknown > PORTS,
         computation : noComputation > 
      REST)
  = 
     portFixPoints(
      < O : FSM-Actor | 
         computation : #guards / k({guardExps(STATE, TRANSSET)}) penv(PARAMS) >
      REST) .

  op #guards : -> ComputationID [ctor] .
  op @guard : TransitionId -> VarId [ctor] .

  op guardExps : Location TransitionSet ~> ExpRow .
  eq guardExps(STATE, 
        (TI : STATE --> STATE' {guard: TG output: OL set: AL}) ; TRANSSET)
   = @guard(TI) <- TG, guardExps(STATE, TRANSSET) .
  eq guardExps(STATE, TRANSSET) = {} [owise] .

----- B-1] Take a transition -----
  --- Take a transition and compute its outputs,
  --- if only one guard condition is true
  ceq portFixPoints(
       < O : FSM-Actor |
          ports : PORTS,
          computation : #guards / k({@guard(TI) <- # true, VREC}) env(VM),
          transitions : (TI : STATE --> STATE' 
                         {guard: TG output: OL set: AL}) ; TRANSSET > 
       REST)
  = 
      portFixPoints(
       < O : FSM-Actor |
          ports : updateOutPorts(OL, PORTS),
          computation : noComputation > 
       REST)
   if noGuardExpTrue(VREC) .

  op noGuardExpTrue : ValueRow ~> Bool .
  eq noGuardExpTrue((@guard(TI) <- # true, VREC)) = false .
  eq noGuardExpTrue(VREC) = true [owise] .

  op updateOutPorts : AssignMap Configuration ~> Configuration .
  eq updateOutPorts(VI |-> E ; OL, < VI : OutPort | status : unknown > PORTS)
   = updateOutPorts(OL, < VI : OutPort | status : present, value : E > PORTS) .
  eq updateOutPorts(OL, PORTS) = setUnknownOutPortsAbsent(PORTS) [owise] .

----- B-2] no transition -----
  --- if no transition is applicable, set every outport absent.
  ceq portFixPoints(
       < O : FSM-Actor |
          ports :  PORTS,
          computation : #guards / k({VREC}) env(VM) >
       REST)
  =  
      portFixPoints(
       < O : FSM-Actor |
          ports : setUnknownOutPortsAbsent(PORTS),
          computation : noComputation >
       REST)
   if noGuardExpTrue(VREC) .

----- B-3] no input
  --- if all input ports in FSM actors are absent, 
  --- then every unknown out port is absent.
  --- NOTE: FSMActor is *not* atomic in Ptolemy II.
  ceq portFixPoints(
       < O : FSM-Actor | 
          ports : < PI' : InPort | status : absent >
                  < PI : OutPort | status : unknown > PORTS > 
       REST)
  =
      portFixPoints(
       < O : FSM-Actor |
          ports : < PI' : InPort | status : absent >
                  < PI : OutPort | status : absent >
                  setUnknownOutPortsAbsent(PORTS) > 
       REST)
   if allInputPortsAbsent?(PORTS) .


*** 2] postfire

  *** FSM-Actor does NOT generate events in our first version, only changes
  *** the internal state/valuation as a result of applying one transition ...

  --- compute guards again, if there is a present port.
  eq postfire(FSM-Actor,
      < O : FSM-Actor | 
         status : enabled,
         currState : STATE, 
         transitions : TRANSSET,
	 parameters : PARAMS,
         ports : < PI : InPort | status : present > PORTS,
         computation : noComputation >)
  = 
     postfire(FSM-Actor,
      < O : FSM-Actor | 
         computation : #guards / k({guardExps(STATE,TRANSSET)}) penv(PARAMS) >) .

  --- if only one guard is true, take the transition, compute its set actions,
  --- and update the state.
  ceq postfire(FSM-Actor,
       < O : FSM-Actor |
          parameters : PARAMS,
          computation : #guards / k({@guard(TI) <- # true, VREC}) env(VM),
          transitions : (TI : STATE --> STATE' 
                         {guard: TG output: OL set: AL}) ; TRANSSET >)
  = 
      postfire(Actor,
       < O : FSM-Actor |
          currState : STATE', 
          parameters : setActions(AL, PARAMS),
          computation : noComputation >)
   if noGuardExpTrue(VREC) .

  --- if no transition is applicable, just clear computation. 
  ceq postfire(FSM-Actor, 
        < O : FSM-Actor | computation : #guards / k({VREC}) env(VM) >)
  = 
      postfire(Actor, < O : FSM-Actor | computation : noComputation >)
   if noGuardExpTrue(VREC) .

  --- NOTE: if all ports are absent, defalut postfire called 
  ---       since there is no computation.

  op setActions : AssignMap Configuration ~> Configuration .
  eq setActions(VI |-> E ; AL, < VI : Parameter | > PARAMS) 
   = < VI : Parameter | exp : E, status : invalid > setActions(AL, PARAMS) .
  eq setActions(AL, PARAMS) = PARAMS [owise] .
endtom)
/**/

/***formal_FSMActor***/
(tomod CHECK-FSM-ACTOR is
  pr FSM-ACTOR .
  pr CHECK-ACTOR .

  var CF : Configuration .  var O : Oid .   vars L L' : Location . 

  op @_ : Location -> PropPattern [ctor] .
  eq < O : FSM-Actor | currState : L > prop-query(O @ L') 
   = < O : FSM-Actor | > prop-result(L == L') .
endtom)
/**/