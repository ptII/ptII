/***attr_ModalModel***/
controller : '$info(controller),
refinement : $info(refinement)/**/

/***refineStateBlock($state, $actor)***/
refine-state('$state,'$actor)/**/

/***semantics_ModalModel***/
(tomod MODAL-MODEL is 
  inc COMPOSITE-ACTOR .
  pr FSM-ACTOR .

  class ModalModel | controller : Oid,
                     refinement : RefinementSet .
    subclass ModalModel < CompositeActor .
  eq ^ ModalModel = CompositeActor .

  sort RefinementItem .
  op refine-state : Location Oid -> RefinementItem [ctor] .
  
  sort RefinementSet .
  subsort RefinementItem < RefinementSet .
  op empty : -> RefinementSet [ctor] .
  op __ : RefinementSet RefinementSet -> RefinementSet 
                                            [ctor comm assoc id: empty] .

---------------------------------------------------------------------
--- Variable Declaration
---------------------------------------------------------------------

  vars CF PORTS PORTS' : Configuration .
  vars O CO RO : Oid . 
  vars PI PI' : PortId .  var EPIS : EPortIdSet .
  var ACTS REST : ObjectConfiguration .
  var REFS : RefinementSet . 
  var STATE STATE' : Location .
  var V : Value .
  
---------------------------------------------------------------------
--- Semantics Steps
---------------------------------------------------------------------

  --- We reguards a modal model as the composite actor where only
  --- refinement of the current state is enabled.
  --- Also, input/output ports are regards as coupled input/output
  --- whose names are identical.
  ---
  --- ASSUME: We assume that every port name is distinct in Ptolemy II.
  ---         This is actually very general assumetion for other actors as well.
  ---
  --- ASSUME: Currently, we assume that input/output port exists only 
  ---         in Modal models


*** 0] init

  --- some connections are changed here
  eq init(ModalModel,
      < O : ModalModel |
         controller : CO,
         refinement : REFS,
         innerActors : < CO : FSM-Actor | ports :  PORTS > ACTS >)
  =  init(CompositeActor,
      < O : ModalModel |
         innerActors : < CO : FSM-Actor | >
                       transModalConn(CO, REFS, ACTS) >) .
  

  --- transform connections for coupled input/output semantics.
  op transModalConn : Oid RefinementSet Configuration ~> Configuration [frozen] .
  
  --- remove connections from CO ! PI to parent
  eq transModalConn(CO, REFS, (CO ! PI ==> (parent ! PI) ; EPIS) CF)
   = transModalConn(CO, REFS, (CO ! PI ==> EPIS) CF) .
  
  --- remove connections from RO ! PI to parent ! PI, if RO is a refinement.
  eq transModalConn(CO, refine-state(STATE, RO) REFS,
                    (RO ! PI ==> (parent ! PI) ; EPIS) CF)
   = transModalConn(CO, refine-state(STATE, RO) REFS,
                    (RO ! PI ==> EPIS) CF) .
  eq transModalConn(CO, REFS, CF) = CF [owise] .

*** 1] prefire

  --- before fix-computation, refinement actors for current states are enabled.
  eq prefire(ModalModel,
      < O : ModalModel |
         controller : CO,
         refinement : REFS,
         innerActors :  < CO : FSM-Actor | currState : STATE > ACTS >)
  = 
     prefire(CompositeActor,
      < O : ModalModel |
         innerActors : < CO : FSM-Actor | > 
                       setStateRefinement(STATE, REFS, ACTS) >) .

  op setStateRefinement : Location RefinementSet Configuration 
                                                    ~> Configuration .
  eq setStateRefinement(STATE, refine-state(STATE', O) REFS,
                        < O : Actor | > REST)
   = < O : Actor | status : if STATE == STATE' then enabled else disabled fi >
     setStateRefinement(STATE, REFS, REST) .
  eq setStateRefinement(STATE, empty, REST) = REST .

*** 2] portFixPoints

  --- The outport value of controller is transferred to the parent.
  --- NOTE: outports in modal models are identital to those in the controller.
  eq portFixPoints(
      < O : ModalModel |
         status : enabled,
         controller : CO,
         ports : < PI : OutPort | status : unknown > PORTS,
         innerActors : 
            < CO : FSM-Actor | 
               ports : < PI : OutPort | status : present, value : V > PORTS' >
            ACTS >
      REST)
   = 
     portFixPoints( 
      < O : ModalModel |
         ports : < PI : OutPort | status : present, value : V > PORTS >
      REST) .

  --- Coupled input/output ports 
  --- NOTE: Connections from inout ports of controller to parent are removed,
  --- so absent values will not propagate to the parent yet.
  eq portFixPoints(
      < O : ModalModel |
         status : enabled,
         controller : CO,
         innerActors : 
            < CO : FSM-Actor | 
               ports : < PI : InPort | status : present, value : V >
                       < PI : OutPort | status : absent > PORTS > 
            ACTS > 
      REST)
   = 
     portFixPoints( 
      < O : ModalModel |
         innerActors : 
            < CO : FSM-Actor | 
               ports : < PI : InPort | > 
                       < PI : OutPort | status : present, value : V > PORTS >
            ACTS >
      REST) .

  --- absent case: only if both coupled input and output ports are absent
  eq portFixPoints(
      < O : ModalModel |
         status : enabled,
         controller : CO,
         ports : < PI : OutPort | status : unknown > PORTS,
         innerActors : 
            < CO : FSM-Actor | 
               ports : < PI : InPort | status : absent >
                       < PI : OutPort | status : absent > PORTS' >
            ACTS > 
      REST)
   = 
     portFixPoints( 
      < O : ModalModel |
         ports : < PI : OutPort | status : absent > PORTS >
      REST) .
      

--- not isolated if it is related to coupled input/output ports
  eq isolatedCompositeOutPort?(PI, 
       < O : Actor | status : enabled, 
                     ports : < PI : InPort | > < PI : OutPort | > PORTS > CF)
   = false .

  *** 3] postfire
  
endtom)
/**/

/***formal_ModalModel***/
(tomod CHECK-MODALMODEL-ACTOR is
  pr CHECK-FSM-ACTOR .
  pr MODAL-MODEL .

  var ACTS : Configuration .  vars O CO : Oid .  var L : Location . 

  eq < O : ModalModel | controller : CO, innerActors : ACTS > prop-query(O @ L)
   = < O : ModalModel | innerActors : ACTS prop-query(CO @ L) > .
endtom)
/**/