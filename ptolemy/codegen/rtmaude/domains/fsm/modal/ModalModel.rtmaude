/***attr_ModalModel***/
controller : '$info(controller),
refinement : $info(refinement)/**/

/***refineStateBlock($state, $actor)***/
refine-state('$state,'$actor)/**/

/***semantics_ModalModel***/
(tomod MODAL-MODEL is 
  inc COMPOSITE-ACTOR .
  pr FSM-ACTOR .

  class ModalModel | controller : Oid,
                     refinement : RefinementSet .
    subclass ModalModel < CompositeActor .
  eq ^ ModalModel = CompositeActor .
  
  sort RefinementItem .
  op refine-state : Location Oid -> RefinementItem .
  
  sort RefinementSet .
  subsort RefinementItem < RefinementSet .
  op empty : -> RefinementSet .
  op __ : RefinementSet RefinementSet -> RefinementSet [ctor comm assoc id: empty] .
  
---------------------------------------------------------------------
--- Semantics Steps
---------------------------------------------------------------------

  var O CO : Oid . 
  var ACTS REST : ObjectConfiguration .
  var REFS : RefinementSet . 
  var STATE STATE' : Location .
  var ACTSTAT : ActorStatus .
  var UPDATED UPDATED' FLAG : Bool .

  --- before fix-computation, refinement actors for current states
  --- are enabled, and the controller is disabled.
  eq prefire(ModalModel,
    < O : ModalModel |
      controller : CO,
      refinement : REFS,
      innerActors :  
        < CO : FSM-Actor | 
          status : ACTSTAT,
          currState : STATE 
        > 
        ACTS
    >)
   = prefire(^ ModalModel,
    < O : ModalModel |
      innerActors : 
        < CO : FSM-Actor | 
          status : disabled 
        > 
        setStateRefinement(STATE, REFS, ACTS)
    >) .

  op setStateRefinement : Location RefinementSet Configuration -> Configuration .
  eq setStateRefinement(STATE, refine-state(STATE', O) REFS,
     < O : Actor | status : ACTSTAT > REST)
   = < O : Actor | status : if STATE == STATE' then enabled else disabled fi >
     setStateRefinement(STATE, REFS, REST) .
  eq setStateRefinement(STATE, empty, REST) = REST .

  ---Enable a controller. Before this,
  ---I assume that all innerActors are already computed
  ---by the default Maude equation strategy (inner-most one reduced first)
  eq portFixPoints(UPDATED,
    < O : ModalModel |
      controller : CO,
      innerActors : portFixPoints(UPDATED',
            < CO : FSM-Actor | status : disabled > ACTS)
    > REST)
   = portFixPoints(true,
    < O : ModalModel |
      innerActors : portFixPoints(true,
            < CO : FSM-Actor | status : enabled > ACTS)
    > REST) .

  ---FIXME: 'controller ==> parent' connection should overwrite 
  
endtom)
/**/

/***formal_ModalModel***/
(tomod CHECK-MODALMODEL-ACTOR is
  pr CHECK-FSM-ACTOR .
  pr MODAL-MODEL .

  var ACTS CF : Configuration .  vars O CO : Oid .
  var L : Location . 

  eq {< O : ModalModel | 
        controller : CO, innerActors : ACTS > CF} |= O @ L 
   = {ACTS} |= CO @ L .
endtom)
/**/