/***moduleName***/
NONINTERRUPTIBLE-TIMER/**/

/***className***/
NonInterruptibleTimer/**/

/***sharedBlock***/
(tomod NONINTERRUPTIBLE-TIMER  is
  inc ACTOR .

  class NonInterruptibleTimer |
        processing : Bool,
        wait-queue : TimeList,
        output-value : VarId .
    subclass NonInterruptibleTimer < Actor .
  eq ^ NonInterruptibleTimer = Actor .

  sort TimeList .
  subsort Time < TimeList .
  op emptyList : -> TimeList .
  op __ : TimeList TimeList -> TimeList [ctor assoc id: emptyList] .

  vars PORTS : Configuration . vars PI PI' : PortId . var PS : PortStatus .
  var REST : ObjectConfiguration . vars O : Oid .
  var V : Value .  vars T  : Time . vars TL UQ : TimeList .
  var AM : AssignMap . var MEM : Memory .
  var VI : VarId . var NV : NumberValue . var E : Exp .
  vars UPDATED FLAG : Bool .

---------------------------------------------------------------------
--- Semantics Steps
---------------------------------------------------------------------

  --- set each status of ports to 'unknown'
  eq prefire(NonInterruptibleTimer, 
    < O : NonInterruptibleTimer | 
      output-value : VI,
      variables : VI |-> E ; AM
    >)
   = prefire(^ NonInterruptibleTimer, 
     < O : NonInterruptibleTimer | 
       store : VI |-> k(E)
     >) .

  eq portFixPoints(UPDATED,
     < O : NonInterruptibleTimer |
        status : enabled,
        ports :  < PI : OutPort | status : unknown > PORTS
    >
    REST)
   = portFixPoints(true,
     < O : NonInterruptibleTimer |
        ports : < PI : OutPort | status : absent > PORTS
    >
    REST) .

  ceq executeStep(NonInterruptibleTimer,
    < O : NonInterruptibleTimer |
        processing : true,
        wait-queue : TL,
        output-value : VI,
        store : VI |-> V ; MEM,
        ports : (
            < 'input : InPort | status : PS, value : NV >
            < 'output : OutPort | status : present >
            PORTS)
    >)
  = if UQ =/= emptyList then
        evt(event(O ! 'output, V), first(UQ))
        executeStep(^ NonInterruptibleTimer,
        < O : NonInterruptibleTimer |
            wait-queue : rest(UQ)
        >)
    else
        executeStep(^ NonInterruptibleTimer,
        < O : NonInterruptibleTimer |
            processing : false
        >)
    fi
  if UQ := (if PS == present then (TL toTime(NV)) else TL fi) .

  eq executeStep(NonInterruptibleTimer,
    < O : NonInterruptibleTimer |
        processing : FLAG,
        wait-queue : TL,
        output-value : VI,
        store : VI |-> V ; MEM,
        ports : (
            < 'input : InPort | status : present, value : NV >
            < 'output : OutPort | status : absent >
            PORTS)
    >)
  = if FLAG then
        executeStep(^ NonInterruptibleTimer,
        < O : NonInterruptibleTimer |
            wait-queue : (TL toTime(NV))
        >)
    else
        evt(event(O ! 'output, V), toTime(NV))
        executeStep(^ NonInterruptibleTimer,
        < O : NonInterruptibleTimer |
            processing : true
        >)
    fi .

  op first : TimeList ~> Time .
  eq first(T TL) = T .

  op rest : TimeList ~> TimeList .
  eq rest(T TL) = TL .
endtom)
/**/
