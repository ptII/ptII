/***semantics_TimedDelay***/
(tomod DELAY-ACTOR  is 
  inc ATOMIC-ACTOR .

  class Delay .  subclass Delay < AtomicActor .
  eq ^ Delay = AtomicActor .

---------------------------------------------------------------------
--- Variable Declaration
---------------------------------------------------------------------

  vars PORTS PARAMS : Configuration .  vars PI PI' : PortId .
  var REST : ObjectConfiguration . vars O : Oid .
  var E : Exp . var V TV : Value .

---------------------------------------------------------------------
--- Semantics Steps
---------------------------------------------------------------------

*** 0] init

*** 1] prefire

*** 2] portFixPoints

  --- Note: Delay actors generate events "later" and hence
  --- do not generate output WHEN their ports are in unknown state
  eq portFixPoints(
      < O : Delay | ports :  < PI : OutPort | status : unknown > PORTS >
      REST) 
  = 
     portFixPoints(
      < O : Delay | ports : < PI : OutPort | status : absent > PORTS > 
      REST) .

*** 3] postfire

  *** execute a step for delay operators ... : do NOT generate new output.
  *** IF input, then generate new event, otherwise do nothing. 
  *** Note that generated events are now just messages, which will be dilivered
  *** to globalEventQueue actor.

  eq postfire(Delay, 
      < O : Delay | 
         status : enabled,
         ports : < 'input : InPort | status : present, value : V >  
                 < 'output : OutPort | > PORTS, 
         parameters : < 'delay : Parameter | value : TV > PARAMS >)
  = 
     relative-evt(event(O ! 'output, V), toTime(TV)) 
     postfire(Actor, < O : Delay | >) .
endtom)
/**/