/***moduleName***/
VARIABLE-DELAY-ACTOR/**/

/***className***/
VariableDelay/**/

/***sharedBlock***/
(tomod VARIABLE-DELAY-ACTOR  is 
  inc ACTOR .

  class VariableDelay | delay : VarId .
    subclass VariableDelay < Actor .
  eq ^ VariableDelay = Actor .
    
    ---FIXME: hierarchical OO desigin of actors is required. 

  vars O QUE : Oid . var REST : ObjectConfiguration .
  var PORTS : Configuration . vars PI PI' : PortId . var PS : PortStatus .
  var E : Exp . var V TV : Value . var NV : NumberValue . vars T : Time .
  var VI : VarId . var AM : AssignMap . var MEM : Memory .
  var UPDATED : Bool .

---------------------------------------------------------------------
--- Semantics Steps
---------------------------------------------------------------------

  --- set each status of ports to 'unknown'
  eq prefire(VariableDelay, 
    < O : VariableDelay | 
      delay : VI, 
      variables : (VI |-> E ; AM) 
    >) 
   = prefire(^ VariableDelay, 
    < O : VariableDelay | 
      store : VI |-> k(E) 
    >) .

  --- Note: Delay actors generate events "later" and hence
  --- do not generate output WHEN their ports are in unknown state
  eq portFixPoints(UPDATED,
     < O : VariableDelay | 
       status : enabled,
       ports :  < PI : OutPort | status : unknown > PORTS 
     > 
     REST) 
   = portFixPoints(true,
     < O : VariableDelay | 
       ports : < PI : OutPort | status : absent > PORTS 
     > REST) .

  *** execute a step for variable delay operators
  *** if 'delay port is present, it should be used instead of delay value.
  *** (it will also updated at the top level as well. )

  eq executeStep(VariableDelay, 
    < O : VariableDelay | 
      ports : ( 
        < 'input : InPort | status : present, value : V >
        < 'delay : InPort | status : PS, value : NV >
        < 'output : OutPort | > PORTS), 
      delay : VI,
      store : VI |-> TV ; MEM
    >)
  = evt(event(O ! 'output, V), toTime(if PS == present then NV else TV fi)) 
    executeStep(^ VariableDelay, < O : VariableDelay | >) .
endtom)
/**/