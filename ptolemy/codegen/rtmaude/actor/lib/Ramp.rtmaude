/***attr_Ramp***/
count : 0,
output-value : # 0/**/

/***semantics_Ramp***/
(tomod RAMP is 
  inc ACTOR .

  class Ramp | count : Nat,
               output-value : Value .
    subclass Ramp < Actor .
  eq ^ Ramp = Actor .

  var PORTS : Configuration . vars PI PI' : PortId .
  var O : Oid . var REST : ObjectConfiguration .
  var AM : AssignMap . var MEM : Memory .
  var V VI VS : Value . var EI ES : Exp .
  var UPDATED : Bool . var N : Nat .
  
---------------------------------------------------------------------
--- Semantics Steps
---------------------------------------------------------------------

  --- set each status of ports to 'unknown'
  eq prefire(Ramp, 
    < O : Ramp | 
      parameters : ('init |-> EI ; 'step |-> ES ; AM)
    >) 
   = prefire(^ Ramp, 
    < O : Ramp | 
      store : 'init |-> k(EI) ; 'step |-> k(ES)
    >) .

  eq portFixPoints(UPDATED,
     < O : Ramp | 
       status : enabled,
       store : 'init |-> VI ; 'step |-> VS,
       count : N,
       output-value : V,
       ports : 
         < PI : InPort | status : present >  
         < PI' : OutPort | status : unknown > PORTS 
     > REST)
   = portFixPoints(true,
     < O : Ramp | 
       ports : 
         < PI : InPort | > PORTS
         < PI' : OutPort | status : present, 
                            value : if N > 0 then V + VS else VI fi >
     > REST) .
     
  eq portFixPoints(UPDATED,
     < O : Ramp | 
       status : enabled,
       ports : 
         < PI : InPort | status : absent >  
         < PI' : OutPort | status : unknown > PORTS 
     > REST)
   = portFixPoints(true,
     < O : Ramp | 
       ports : 
         < PI : InPort | > 
         < PI' : OutPort | status : absent > PORTS
     > REST) .

  eq postfire(Ramp,
    < O : Ramp | 
      status : enabled,
      store : 'init |-> VI ; 'step |-> VS,
      count : N,
      output-value : V,
      ports : < PI : OutPort | status : present >  PORTS
    >) 
  = postfire(^ Ramp, 
    < O : Ramp | 
      count : s(N),
      output-value : if N > 0 then V + VS else VI fi
    >) .
endtom)
/**/