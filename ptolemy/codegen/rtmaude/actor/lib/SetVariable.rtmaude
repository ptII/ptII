/***attr_SetVariable***/
variableName : '$info(variableName)/**/

/***semantics_SetVariable***/
(tomod SET-VARIABLE is 
  inc COMPOSITE-ACTOR .    --- assuming composite actor

  class SetVariable | variableName : VarId .
    subclass SetVariable < Actor .
  eq ^ SetVariable = Actor .

  --- message to change a variables of the container.
  msg setv : VarId Value -> Msg .

  var O : Oid . var REST : ObjectConfiguration .
  vars PORTS CF : Configuration .
  var VI : VarId . var E : Exp . var V : Value . 
  var VAL : AssignMap . var VM : ValueMap .
  vars PI PI' : PortId . 
  var PS : PortStatus . var DPS : DetPortStatus .
  var UPDATED : Bool .

---------------------------------------------------------------------
--- Message
---------------------------------------------------------------------

---- set a variables of a parent actor by the 'setv' message
  eq < O : CompositeActor | 
       parameters : ((VI |-> E) ; VAL),
       innerActors : CF setv(VI, V)
     >
   = < O : CompositeActor | 
       parameters : ((VI |-> V) ; VAL), 
       innerActors : CF 
     > .

---------------------------------------------------------------------
--- Semantics Steps
---------------------------------------------------------------------

  --- The output port returns the same value to the input port
  --- Assume that there are EXACTLY two ports.
  eq portFixPoints(UPDATED,
     < O : SetVariable | 
       status : enabled,
       ports : 
         < PI : InPort | status : DPS, value : V > 
         < PI' : OutPort | status : unknown > 
     > REST)
   = portFixPoints(true,
     < O : SetVariable |
       ports : 
         < PI : InPort | >
         < PI' : OutPort | status : DPS, value : V > 
     > REST) .

  --- generate a message to change a variables of the container.
  eq postfire(SetVariable,
    < O : SetVariable | variableName : VI, 
      ports : < PI : InPort | status : present, value : V > PORTS >) 
   = setv(VI, V)
     postfire(^ SetVariable, < O : SetVariable | >) .
endtom)
/**/
