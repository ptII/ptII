/***attr_Clock***/
index : 0/**/

/***semantics_Clock***/
(tomod CLOCK is 
  inc ATOMIC-ACTOR .

  class Clock | index : Nat .
    subclass Clock < AtomicActor .
  eq ^ Clock = AtomicActor .

---------------------------------------------------------------------
--- Variable Declaration
---------------------------------------------------------------------

  vars PORTS PARAMS : Configuration . var REST : ObjectConfiguration .
  vars PI : PortId .  var O : Oid . 
  var VP VO VV : Value .  var NI : Nat .

---------------------------------------------------------------------
--- Semantics Steps
---------------------------------------------------------------------

*** 0] init

  --- generate the first event for this clock
  eq init(Clock,
     < O : Clock |
        parameters : < 'offsets : Parameter | value : VO >
                     < 'values : Parameter | value : VV > PARAMS >)
   = init(Actor, < O : Clock | >)
     schedule-evt(event(O ! 'output, VV(# 0)), toTime(VO(# 0)), 0) .

*** 1] prefire

*** 2] portFixPoints

  --- Note: Clock actors generate events "later" and hence
  --- do not generate output WHEN their ports are in unknown state
  eq portFixPoints(
      < O : Clock | ports : < PI : OutPort | status : unknown > PORTS > 
      REST)
  =  
     portFixPoints(
      < O : Clock | ports : < PI : OutPort | status : absent > PORTS > 
      REST) .

*** 3] postfire

  --- When should clock generate "next" event?? Maybe when it has something
  --- in its current output port??? 

  ---FIXME: Offset could be Infinity
  ceq postfire(Clock,
       < O : Clock | 
          status : enabled,
          index : NI,
          ports : < 'output : OutPort | status : present > PORTS, 
          parameters : < 'offsets : Parameter | value : VO >
                       < 'values : Parameter | value : VV > PARAMS >)
  =
      relative-evt(event(O ! 'output, VV(#(s NI))), 
                   toTime((VO(#(s NI))) - (VO(# NI))))
      postfire(Actor, < O : Clock | index : s(NI) >)
   if ((# NI + # 1) lessThan (VO .. 'length(()) )) == # true .

  ceq postfire(Clock,
       < O : Clock | 
          status : enabled,
          index : NI,
          ports : < 'output : OutPort | status : present >  PORTS, 
          parameters : < 'period : Parameter | value : VP >
                       < 'offsets : Parameter | value : VO >
                       < 'values : Parameter | value : VV > PARAMS >)
  = 
      relative-evt(event(O ! 'output, VV(# 0)), 
                   toTime((VP - (VO(# NI))) + (VO(# 0))))
      postfire(Actor, < O : Clock | index : 0 >)
   if ((# NI + # 1) equals (VO .. 'length(()) )) == # true /\ 
      (VP lessThan Infinity) == # true .
endtom)
/**/
