/***attr_CompositeActor***/
innerActors : ($indent( 
  $info(actors)
$info(connections)
))
/**/

/***semantics_TypedCompositeActor***/
(tomod COMPOSITE-ACTOR is 
  inc ACTOR .

  class CompositeActor | innerActors : Configuration .
    subclass CompositeActor < Actor .
  eq ^ CompositeActor = Actor .

--- stable composite actor
  mb (< O : CompositeActor | 
         ports : SPORTS:StableConfiguration,
         parameters : SPARAMS:StableConfiguration,
         innerActors : SACTS:StableConfiguration >) : StableObject .

---------------------------------------------------------------------
--- Variable Declaration
---------------------------------------------------------------------

  vars CF CF' PORTS PORTS' PARAMS : Configuration . 
  var ECF : [Configuration] .
  vars NCF NCF' : NEConfiguration .  var MSGS : MsgConfiguration .
  vars REST ACTS : ObjectConfiguration . var OBJ : Object .  var CLASS : Cid .

  vars O O' : Oid .  var AI : ActorID . vars NAI : NEActorID .
  var RI : ParamId . var RS : ParamStatus .
  vars PI PI' : PortId . var EPIS : EPortIdSet . 
  var PS : PortStatus . var DPS : DetPortStatus .

  var K : K .  var VM : ValueMap . 
  var VI : VarId . var CI : ComputationID . var V V' : Value . var E : Exp .
  var T : Time . var N : Nat .

---------------------------------------------------------------------
--- Message & Time
---------------------------------------------------------------------

--- Pass events to different level
--- An event dilivery (to event-queue or to ports) is accomplished
--- by related event message. 

  --- evt message (to top)
  eq < O : CompositeActor | 
        innerActors : CF schedule-evt(event(AI ! PI, V), T, N) >
  = 
     < O : CompositeActor | innerActors : CF >
     schedule-evt(event((O . AI) ! PI, V), T, N)  .

  --- active-evt message (from top) will be defined
  --- using portFixPoints
     
  eq delta(< O : CompositeActor | innerActors : CF >, T)
   = < O : CompositeActor | innerActors : delta(CF, T) > .

---------------------------------------------------------------------
--- Semantics Steps
---------------------------------------------------------------------
  
*** 0] init

  eq init(CompositeActor, < O : CompositeActor | innerActors : CF >)
   = init(Actor, < O : CompositeActor | innerActors : initAll(CF) >) .

*** 1] prefire

  --- children actors are also initialized for computational step
  eq prefire(CompositeActor, < O : CompositeActor | innerActors : CF >)
   = prefire(Actor, < O : CompositeActor | innerActors : prefire(CF) >) .

*** 2] portFixPoints 

--- In hierarchical model of actors, Fix-point computation of all levels 
--- will be executed at the same time. 
--- NOTE: we consider only transparent case since everything is DE. 
    
----- A] event passing -----
  ---if an event is passed to innerActors, start portFixPoints for them.
  --- Fix of innerActors is set when every event is delivered.
  ---NOTE: all events must be passed at the same time to the down level,
  --- otherwise, some fixpoint computation may be done before arriving events

  ceq portFixPoints(
       active-evt(event((O . NAI) ! PI, V)) 
       < O : CompositeActor | status : enabled, innerActors : ACTS > 
       CF)
    = 
      portFixPoints(
       < O : CompositeActor | innerActors : portFixPoints(MSGS ACTS) > 
       CF')
   if fr(MSGS, CF') := filterMsg(O, CF, active-evt(event(NAI ! PI, V))) .

   sort FilterResult .
   op fr : MsgConfiguration Configuration -> FilterResult [ctor] .
   
   op filterMsg : Oid Configuration MsgConfiguration ~> FilterResult .
   eq filterMsg(O, active-evt(event((O . NAI) ! PI, V)) CF, MSGS)
    = filterMsg(O, CF, active-evt(event(NAI ! PI, V)) MSGS) .
   eq filterMsg(O, CF, MSGS) = fr(MSGS, CF) [owise] .

----- B] inter-level connection -----
  --- The value of ports can be dilivered among different levels
  --- if connections exist.

  --- Pass(Inner level)
  eq portFixPoints(
      < O : CompositeActor |
         status : enabled,
         ports : < PI : InPort | status : DPS, value : V > 
                 < PI' : OutPort | status : unknown > PORTS,
         innerActors : (parent ! PI ==> (parent ! PI') ; EPIS) ACTS >)
  =
     portFixPoints(
      < O : CompositeActor |
         ports : < PI : InPort | > 
                 < PI' : OutPort | status : DPS, value : V > PORTS >) .

  --- Down(Inner Actor): set fix of children 
  eq portFixPoints(
      < O : CompositeActor |
         status : enabled,
         ports : < PI : InPort | status : DPS, value : V > PORTS,
         innerActors :
            (parent ! PI ==> (O' ! PI') ; EPIS)
            < O' : Actor | 
                ports : < PI' : InPort | status : unknown > PORTS' > ACTS > 
      REST)
  = 
     portFixPoints(
      < O : CompositeActor |
         innerActors :  portFixPoints(   *** [re-] start the inner fixed-point
            (parent ! PI ==> (O' ! PI') ; EPIS)
            < O' : Actor |
               ports : < PI' : InPort | status : DPS, value : V > PORTS' > 
            ACTS) > 
      REST) .

  --- Up(Inner Actor): up only if fix of children done.
  eq portFixPoints(
      < O : CompositeActor |
         ports : < PI : OutPort | status : unknown > PORTS,
         innerActors :
            (O' ! PI' ==> (parent ! PI) ; EPIS)
            < O' : Actor | 
                status : enabled,
                ports : < PI' : OutPort | status : DPS, value : V > PORTS' >
            ACTS > 
      REST)
  =  portFixPoints(
      < O : CompositeActor |
         ports : < PI : OutPort | status : DPS, value : V > PORTS,
         innerActors :
            (O' ! PI' ==> (parent ! PI) ; EPIS) < O' : Actor | > ACTS >
     REST) .

----- C]  isolatedPort port -----

  --- connections from a parent actor
  eq isolatedPort?(O ! PI, (parent ! PI' ==> (O ! PI) ; EPIS) CF) = false .

  --- if an outport of a composite actor is *isolated*, then it is absent.
  ceq portFixPoints(
       < O : CompositeActor |
          status : enabled,
          innerActors : ACTS,
          ports : < PI : OutPort | status : unknown > PORTS > 
       REST)
  =
      portFixPoints(
       < O : CompositeActor |
          ports : < PI : OutPort | status : absent > PORTS > 
       REST)
   if isolatedCompositeOutPort?(PI, ACTS) .

  --- isolated if not connected with *enabled* inner actor, 
  op isolatedCompositeOutPort? : PortId Configuration ~> Bool .
  eq isolatedCompositeOutPort?(PI, 
       (O' ! PI' ==> (parent ! PI) ; EPIS)
       < O' : Actor | status : enabled > CF) = false .
  eq isolatedCompositeOutPort?(PI,
       (parent ! PI' ==> (parent ! PI) ; EPIS) CF) = false .
  eq isolatedCompositeOutPort?(PI, CF) = true [owise] .

----- D] disabled actor -----
  eq portFixPoints(
      < O : CompositeActor | 
         status : disabled,
         innerActors :
            < O' : Actor | 
                ports : < PI : Port | status : unknown > PORTS > ACTS >
      REST)
  =
     portFixPoints(
      < O : CompositeActor | 
         innerActors : setPortsAbsentAll(< O' : Actor | > ACTS) >
      REST) .

  op setPortsAbsentAll : Configuration ~> Configuration [frozen] .
  eq setPortsAbsentAll(OBJ REST)
   = setPortsAbsentInner(OBJ) setPortsAbsentAll(REST) .
  eq setPortsAbsentAll(CF) = CF [owise] .

  op setPortsAbsent : Object ~> Configuration [frozen] .
  eq setPortsAbsent(< O : Actor | ports : PORTS >)
   = < O : Actor | ports : setAllPorts(PORTS, absent) > .

  op setPortsAbsentInner : Object ~> Configuration [frozen] .
  eq setPortsAbsentInner(< O : CompositeActor | innerActors : ACTS >)
   = setPortsAbsent(
      < O : CompositeActor | innerActors : setPortsAbsentAll(ACTS) >) .
  eq setPortsAbsentInner(OBJ) = setPortsAbsent(OBJ) [owise] .


*** 3] postfire

  --- variables of inner actors cannot be accessed from
  --- outside. Hence, updating those before doing parent actor
  --- events sholud be also considered.
  --- NOTE: ACTS is an ObjectConfiguration.
  eq postfire(CompositeActor,
      < O : CompositeActor | status : enabled, innerActors : ACTS >)
  =  
     postfire(Actor,
      < O : CompositeActor | innerActors : postfire(ACTS) >) .


*** 4] update
  --- update all parameters

  eq update(CompositeActor, < O : CompositeActor | innerActors : ACTS >)
   = update(Actor, < O : CompositeActor | innerActors : update(ACTS) >) .

---------------------------------------------------------------------
--- Computation
---------------------------------------------------------------------

  msg query-var : ActorID VarId -> Msg .
  msg return-var : ActorID VarId Value -> Msg .

*** 1] General computation

  op requesting : VarId -> KLabel [ctor] .

  --- if a variable is not in the current actor, request it.
  ceq < O : Actor |
         computation : CI / k(VI -> K) env(VM) >
  =
      query-var(O, VI)
      < O : Actor | 
         computation : CI / k(requesting(VI) -> K) env(VM) > 
  if not VI in VM .

  --- continue the computation if a value is returned.
  eq return-var(O, VI, V)
     < O : Actor | computation : CI / k(requesting(VI) -> K) env(VM) > 
  =
     < O : Actor | computation : CI / k(V -> K) env(VM[VI |-> V]) > .

  --- if the desired parameter is found, return it.
  eq < O : CompositeActor |
        parameters : < VI : Parameter | value : V > PARAMS,
        innerActors : query-var(AI, VI) ECF >
  =  
     < O : CompositeActor |
        parameters : < VI : Parameter | > PARAMS,
        innerActors : return-var(AI, VI, V) ECF > .

  --- if there is no desired parameter in the current level, toss it upward.
  ceq < O : CompositeActor | 
         parameters : PARAMS,
         innerActors : query-var(AI, VI) ECF >
  =  
      query-var(O . AI, VI)
      < O : CompositeActor | innerActors : ECF > 
   if not VI in PARAMS .

  --- send a returned msg down.
  eq return-var(O . NAI, VI, V)
     < O : CompositeActor | innerActors : ECF >
  =
     < O : CompositeActor | innerActors : return-var(NAI, VI, V) ECF > .

*** 2] computation during portFixPoints and postfire
  eq portFixPoints(query-var(AI, VI) ECF) 
   = query-var(AI, VI) portFixPoints(ECF) .

  eq return-var(O . AI, VI, V) portFixPoints(< O : Actor | > ECF) 
   = portFixPoints(return-var(O . AI, VI, V) < O : Actor | > ECF) .

  eq postfire(CLASS, query-var(AI, VI) ECF) 
   = query-var(AI, VI) postfire(CLASS, ECF) .

  eq return-var(O . AI, VI, V) postfire(CLASS, < O : Actor | > ECF)
   = postfire(CLASS, return-var(O . AI, VI, V) < O : Actor | > ECF) .

endtom)
/**/

/***formal_TypedCompositeActor***/
(tomod CHECK-COMPOSITE-ACTOR is
  pr COMPOSITE-ACTOR .
  pr CHECK-ACTOR .

  var CF ACTS : Configuration .  var O : Oid .  var B : Bool .
  var AI AI' : ActorID .  var AP : PropPattern .

  eq < O : CompositeActor | innerActors : ACTS > prop-query((O . AI) AP)
   = < O : CompositeActor | innerActors : prop-query(AI AP) ACTS > .

  eq < O : CompositeActor | innerActors : prop-result(B) CF >
   = < O : CompositeActor | innerActors : CF > prop-result(B) .

  --- formula convention with an actor scope
  op _:_ : ActorID Formula -> Formula .
  
  vars F1 F2 : Formula .
  
  eq AI : True = True .
  eq AI : False = False .
  eq AI : (~ F1) = ~ (AI : F1) .
  eq AI : (O F1) = O (AI : F1) .
  eq AI : (F1 /\ F2) = (AI : F1) /\ (AI : F2) .
  eq AI : (F1 \/ F2) = (AI : F1) \/ (AI : F2) .
  eq AI : (F1 U F2) = (AI : F1) U (AI : F2) .
  eq AI : (F1 R F2) = (AI : F1) R (AI : F2) .
  
  eq AI : (AI' AP) = (AI . AI') AP .
  
endtom)
/**/


