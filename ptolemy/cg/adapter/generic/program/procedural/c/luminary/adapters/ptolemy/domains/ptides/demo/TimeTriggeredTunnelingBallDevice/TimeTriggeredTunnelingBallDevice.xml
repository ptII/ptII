<?xml version="1.0" standalone="no"?>
<!DOCTYPE entity PUBLIC "-//UC Berkeley//DTD MoML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd">
<entity name="TimeTriggeredTunnelingBallDevice" class="ptolemy.actor.TypedCompositeActor">
    <property name="_createdBy" class="ptolemy.kernel.attributes.VersionAttribute" value="8.1.devel">
    </property>
    <property name="PtidesTopLevelDirector" class="ptolemy.domains.ptides.kernel.PtidesTopLevelDirector">
        <property name="stopTime" class="ptolemy.data.expr.Parameter" value="10.0">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[-130.0, 45.0]">
        </property>
        <property name="_numberOfMpiConnections" class="ptolemy.data.expr.Parameter" value="60">
        </property>
    </property>
    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={251, 195, 823, 530}, maximized=false}">
    </property>
    <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[600, 416]">
    </property>
    <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="0.8393075712537">
    </property>
    <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{132.7746212121212, 190.9135101010101}">
    </property>
    <property name="discDefaultRate" class="ptolemy.data.expr.Parameter" value="4 * encoderTicksPerRevolution">
        <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
        </property>
        <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
            <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 1.0, 1.0}">
            </property>
        </property>
        <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
            <configure>
      <svg>
        <text x="20" style="font-size:14; font-family:SansSerif; fill:blue" y="20">-P-</text>
      </svg>
    </configure>
        </property>
        <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[-15.0, 35.0]">
        </property>
    </property>
    <property name="discMaxRate" class="ptolemy.data.expr.Parameter" value="8 * encoderTicksPerRevolution">
        <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
        </property>
        <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
            <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 1.0, 1.0}">
            </property>
        </property>
        <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
            <configure>
      <svg>
        <text x="20" style="font-size:14; font-family:SansSerif; fill:blue" y="20">-P-</text>
      </svg>
    </configure>
        </property>
        <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[-15.0, 50.0]">
        </property>
    </property>
    <property name="dropSensorAltitude" class="ptolemy.data.expr.Parameter" value="450e-3">
        <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
        </property>
        <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
            <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 1.0, 1.0}">
            </property>
        </property>
        <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
            <configure>
      <svg>
        <text x="20" style="font-size:14; font-family:SansSerif; fill:blue" y="20">-P-</text>
      </svg>
    </configure>
        </property>
        <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[-15.0, 65.0]">
        </property>
    </property>
    <property name="encoderTicksPerRevolution" class="ptolemy.data.expr.Parameter" value="1000.0">
        <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
        </property>
        <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
            <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 1.0, 1.0}">
            </property>
        </property>
        <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
            <configure>
      <svg>
        <text x="20" style="font-size:14; font-family:SansSerif; fill:blue" y="20">-P-</text>
      </svg>
    </configure>
        </property>
        <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[-15.0, 20.0]">
        </property>
    </property>
    <property name="dropSensorImpactDelay" class="ptolemy.data.expr.Parameter" value="1.5">
        <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
        </property>
        <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
            <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 1.0, 1.0}">
            </property>
        </property>
        <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
            <configure>
      <svg>
        <text x="20" style="font-size:14; font-family:SansSerif; fill:blue" y="20">-P-</text>
      </svg>
    </configure>
        </property>
        <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[-15.0, 80.0]">
        </property>
    </property>
    <property name="dropSensorSeparation" class="ptolemy.data.expr.Parameter" value="0.10">
        <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
        </property>
        <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
            <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 1.0, 1.0}">
            </property>
        </property>
        <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
            <configure>
      <svg>
        <text x="20" style="font-size:14; font-family:SansSerif; fill:blue" y="20">-P-</text>
      </svg>
    </configure>
        </property>
        <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[-15.0, 95.0]">
        </property>
    </property>
    <property name="dropSensorMeanNoise" class="ptolemy.data.expr.Parameter" value="0.25">
        <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
        </property>
        <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
            <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 1.0, 1.0}">
            </property>
        </property>
        <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
            <configure>
      <svg>
        <text x="20" style="font-size:14; font-family:SansSerif; fill:blue" y="20">-P-</text>
      </svg>
    </configure>
        </property>
        <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[-15.0, 110.0]">
        </property>
    </property>
    <property name="startupDelay" class="ptolemy.data.expr.Parameter" value="0.0">
        <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
        </property>
        <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
            <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 1.0, 1.0}">
            </property>
        </property>
        <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
            <configure>
      <svg>
        <text x="20" style="font-size:14; font-family:SansSerif; fill:blue" y="20">-P-</text>
      </svg>
    </configure>
        </property>
        <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[-15.0, 125.0]">
        </property>
    </property>
    <entity name="Tunnelling Ball Device Controller" class="ptolemy.actor.TypedCompositeActor">
        <property name="_location" class="ptolemy.kernel.util.Location" value="{360.0, 215.0}">
        </property>
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={99, 151, 1143, 568}, maximized=false}">
        </property>
        <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[920, 454]">
        </property>
        <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.0900941281936">
        </property>
        <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{272.1988367408213, 199.9738978376292}">
        </property>
        <property name="PtidyOSCodeGenerator" class="ptolemy.cg.kernel.generic.program.procedural.c.ptidyos.PtidyOSCodeGenerator">
            <property name="generatorPackageList" class="ptolemy.data.expr.StringParameter" value="generic.program.procedural.c.luminary">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{390.0, 85.0}">
            </property>
        </property>
        <property name="PtidesPreemptiveEDFDirector" class="ptolemy.domains.ptides.kernel.PtidesPreemptiveEDFDirector">
            <property name="_location" class="ptolemy.kernel.util.Location" value="[190.0, 85.0]">
            </property>
        </property>
        <port name="port" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[-45.0, 165.0]">
            </property>
            <property name="realTimeDelay" class="ptolemy.data.expr.Parameter" value="0.0">
            </property>
        </port>
        <port name="port3" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[650.0, 195.0]">
            </property>
            <property name="minDelay" class="ptolemy.data.expr.Parameter" value="{Infinity}">
            </property>
        </port>
        <port name="port2" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[-45.0, 225.0]">
            </property>
            <property name="realTimeDelay" class="ptolemy.data.expr.Parameter" value="0.0">
            </property>
        </port>
        <port name="port4" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[-50.0, 320.0]">
            </property>
        </port>
        <entity name="TimeDelay" class="ptolemy.actor.lib.TimeDelay">
            <property name="delay" class="ptolemy.data.expr.Parameter" value="0.000320">
            </property>
            <property name="TimedDelayIcon" class="ptolemy.vergil.icon.EditorIcon">
                <property name="ParameterValue" class="ptolemy.vergil.kernel.attributes.AttributeValueAttribute">
                    <property name="_location" class="ptolemy.kernel.util.Location" value="[-24.0, 0.0]">
                    </property>
                </property>
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[420.0, 195.0]">
            </property>
            <property name="_highlightColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 1.0, 1.0, 1.0}">
            </property>
            <property name="_flipPortsHorizontal" class="ptolemy.data.expr.Parameter" value="false">
            </property>
            <port name="input" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
                <property name="_type" class="ptolemy.actor.TypeAttribute" value="int">
                </property>
                <property name="delayOffset" class="ptolemy.data.expr.Parameter" value="{0.0}">
                </property>
                <property name="relativeDeadline" class="ptolemy.data.expr.Parameter" value="3.2E-4">
                </property>
            </port>
            <port name="output" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
                <property name="_type" class="ptolemy.actor.TypeAttribute" value="int">
                </property>
            </port>
        </entity>
        <entity name="DropSensorHandler" class="ptolemy.domains.ptides.lib.luminary.DropSensorHandler">
            <property name="_location" class="ptolemy.kernel.util.Location" value="{110.0, 165.0}">
            </property>
            <port name="input" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
                <property name="delayOffset" class="ptolemy.data.expr.Parameter" value="{0.0}">
                </property>
                <property name="relativeDeadline" class="ptolemy.data.expr.Parameter" value="-Infinity">
                </property>
            </port>
            <port name="output" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
                <property name="_type" class="ptolemy.actor.TypeAttribute" value="int">
                </property>
            </port>
        </entity>
        <entity name="TimeDelay2" class="ptolemy.actor.lib.TimeDelay">
            <property name="delay" class="ptolemy.data.expr.Parameter" value="0.004">
            </property>
            <property name="TimedDelayIcon" class="ptolemy.vergil.icon.EditorIcon">
                <property name="ParameterValue" class="ptolemy.vergil.kernel.attributes.AttributeValueAttribute">
                    <property name="_location" class="ptolemy.kernel.util.Location" value="[-21.0, -1.0]">
                    </property>
                </property>
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[165.0, 310.0]">
            </property>
            <property name="_highlightColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 1.0, 1.0, 1.0}">
            </property>
            <property name="_flipPortsHorizontal" class="ptolemy.data.expr.Parameter" value="true">
                <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
                </property>
            </property>
            <port name="input" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
                <property name="delayOffset" class="ptolemy.data.expr.Parameter" value="{0.0}">
                </property>
                <property name="relativeDeadline" class="ptolemy.data.expr.Parameter" value="0.00432">
                </property>
            </port>
        </entity>
        <entity name="Control" class="ptolemy.cg.lib.EmbeddedCodeActor">
            <property name="generatorPackage" class="ptolemy.data.expr.StringParameter" value="generic.program.procedural.c">
            </property>
            <property name="overwriteFiles" class="ptolemy.data.expr.Parameter" value="true">
            </property>
            <property name="embeddedCode" class="ptolemy.kernel.util.StringAttribute" value="/***sharedBlock***/&#10;&#10;//Number of encoder pulses per revolution of the disc; this takes into account gearing ratio&#10;#define ENCODER_TICKS_PER_REV	500&#10;#define NANOSECS_IN_SECS 1000000000&#10;#define RETURN_TO_DEFAULT_PERIOD					//Return to the default period after the ball has fallen through&#10;//Period, in ns, encoder pulses should arrive to achieve a desired disc rate&#10;#define discPeriod(rps)			( NANOSECS_IN_SECS / ENCODER_TICKS_PER_REV / rps )&#10;&#10;#define DISC_PERIOD_1RPS		discPeriod( 1)			//	1 encoder pulse / 1000 us = 1000 pulses / 1000 ms = 1 rot / 1000 ms  =  1.0 rps&#10;#define DISC_PERIOD_2RPS		discPeriod( 2)			//	1 encoder pulse /  500 us = 1000 pulses /  500 ms = 1 rot /  500 ms  =  2.0 rps&#10;#define DISC_PERIOD_3RPS		discPeriod( 3)			//	1 encoder pulse /  333 us = 1000 pulses /  333 ms = 1 rot /  333 ms ~=  3.0 rps&#10;#define DISC_PERIOD_4RPS		discPeriod( 4)			//	1 encoder pulse /  250 us = 1000 pulses /  250 ms = 1 rot /  250 ms  =  4.0 rps&#10;#define DISC_PERIOD_5RPS		discPeriod( 5)			//	1 encoder pulse /  200 us = 1000 pulses /  200 ms = 1 rot /  200 ms  =  5.0 rps&#10;#define DISC_PERIOD_6RPS		discPeriod( 6)			//	1 encoder pulse /  167 us = 1000 pulses /  167 ms = 1 rot /  167 ms ~=  6.0 rps&#10;#define DISC_PERIOD_7RPS		discPeriod( 7)			//	1 encoder pulse /  143 us = 1000 pulses /  143 ms = 1 rot /  143 ms ~=  7.0 rps&#10;#define DISC_PERIOD_8RPS		discPeriod( 8)			//	1 encoder pulse /  125 us = 1000 pulses /  125 ms = 1 rot /  125 ms  =  8.0 rps	&#10;#define DISC_PERIOD_9RPS		discPeriod( 9)			//	1 encoder pulse /  111 us = 1000 pulses /  111 ms = 1 rot /  111 ms ~=  9.0 rps&#10;#define DISC_PERIOD_10RPS		discPeriod(10)			//	1 encoder pulse /  100 us = 1000 pulses /  100 ms = 1 rot /  100 ms  = 10.0 rps&#10;#define DISC_PERIOD_11RPS		discPeriod(11)			//	1 encoder pulse /   91 us = 1000 pulses /   91 ms = 1 rot /   91 ms ~= 11.0 rps&#10;#define DISC_PERIOD_12RPS		discPeriod(12)			//	1 encoder pulse /   83 us = 1000 pulses /   83 ms = 1 rot /   83 ms ~= 12.0 rps&#10;#define DISC_PERIOD_13RPS		discPeriod(13)			//	1 encoder pulse /   77 us = 1000 pulses /   77 ms = 1 rot /   77 ms ~= 13.0 rps&#10;#define DISC_PERIOD_14RPS		discPeriod(14)			//	1 encoder pulse /   71 us = 1000 pulses /   71 ms = 1 rot /   71 ms ~= 14.1 rps&#10;#define DISC_PERIOD_15RPS		discPeriod(15)			//	1 encoder pulse /   67 us = 1000 pulses /   67 ms = 1 rot /   67 ms ~= 14.9 rps&#10;#define DISC_PERIOD_16RPS		discPeriod(16)			//	1 encoder pulse /   62 us = 1000 pulses /   62 ms = 1 rot /   62 ms ~= 16.1 rps&#10;#define DISC_PERIOD_17RPS		discPeriod(17)			//	1 encoder pulse /   59 us = 1000 pulses /   59 ms = 1 rot /   59 ms ~= 16.9 rps&#10;#define DISC_PERIOD_18RPS		discPeriod(18)			//	1 encoder pulse /   56 us = 1000 pulses /   56 ms = 1 rot /   56 ms ~= 17.8 rps&#10;#define DISC_PERIOD_19RPS		discPeriod(19)			//	1 encoder pulse /   53 us = 1000 pulses /   53 ms = 1 rot /   53 ms ~= 18.9 rps&#10;#define DISC_PERIOD_20RPS		discPeriod(20)			//	1 encoder pulse /   50 us = 1000 pulses /   50 ms = 1 rot /   50 ms  = 20.0 rps&#10;#define DISC_PERIOD_21RPS		discPeriod(21)			//	1 encoder pulse /   48 us = 1000 pulses /   48 ms = 1 rot /   48 ms ~= 20.8 rps&#10;#define DISC_PERIOD_22RPS		discPeriod(22)			//	1 encoder pulse /   46 us = 1000 pulses /   46 ms = 1 rot /   46 ms ~= 21.7 rps&#10;&#10;#define DISC_DEFAULT_PERIOD		DISC_PERIOD_2RPS	//Default desired encoder pulse period (in us) for the disc; sets initial disc rate.&#10;&#10;#ifndef _UTILITY_H&#10;#define _UTILITY_H&#10;&#10;#define sign(x)					((x) &lt; 0 ? -1 : 1)			//Signum function&#10;#define ABS(x) 					((x) &gt; 0 ? (x) : -(x))		//Absolute value&#10;#define MIN(x, y)				((x) &lt; (y) ? (x) : (y) )	//Least of two numbers&#10;#define MAX(x, y)				((x) &gt; (y) ? (x) : (y) )	//Greatest of two numbers&#10;#define coerce(min, x, max) 	((x) &lt; (min) ? (min) : ((x) &gt; (max) ? (max) : (x)))	//Coerce a number to fall within a range&#10;&#10;//Byte-level operations&#10;#define LO(x)					((x) &amp; 0xFF)			//Low order byte of a 16 bit number&#10;#define HO(x)					((x) &gt;&gt; 0x08)			//High order byte of a 16 bit number&#10;#define LLO(x)					((x) &amp; 0xFF)			//Byte 0 (lowest order) byte of a 32-bit number&#10;#define LHO(x)					(((x) &gt;&gt; 0x08) &amp; 0xFF)	//Byte 1 of a 32-bit number&#10;#define HLO(x)					(((x) &gt;&gt; 0x10) &amp; 0xFF)	//Byte 2 of a 32-bit number&#10;#define HHO(x)					((x) &gt;&gt; 0x18)			//Byte 3 (highest order) byte of a 32-bit number&#10;&#10;typedef unsigned long long      uint64;&#10;typedef unsigned long           uint32;&#10;typedef unsigned int            uint16;&#10;typedef unsigned char           uint8;&#10;typedef uint8                   byte;&#10;typedef signed long long        int64;&#10;typedef signed long             int32;&#10;typedef signed int              int16;&#10;typedef signed char             int8;&#10;&#10;#endif&#10;&#10;#define DISC_SMALLEST_RATE		(~(1 &lt;&lt; 30))	// Smallest rate (closest to zero) corresponds to the largest encoder period&#10;						// Used as a reasonable initial value for Disc variables&#10;//Dics position and period object captures the state of the disc&#10;typedef struct{&#10;	int32	position;		//Absolute position of the disc, in encoder ticks&#10;	int32	period;			//Period between encoder ticks&#10;} Disc;&#10;&#10;const Disc Disc_0 = {0, DISC_SMALLEST_RATE};			// Disc with zero position and large encoder period (essentially zero rate)&#10;static Disc g_desiredTrajectory = {0, DISC_SMALLEST_RATE};		//Planned state of the disc&#10;&#10;void userGPIOInit(void);&#10;void debugUARTInit(void);&#10;void debugSendPacket(const Disc * const, const Disc * const, const int32, const int32, const uint32);&#10;#define UART_DEBUG_PERIF		SYSCTL_PERIPH_UART0		// UART debug peripheral&#10;#define UART_DEBUG_PERIF_GPIO	SYSCTL_PERIPH_GPIOA		// UART GPIO peripheral&#10;#define UART_DEBUG_GPIO_BASE	GPIO_PORTA_BASE			// UART GPIO port&#10;#define UART_DEBUG_PINS			GPIO_PIN_0 | GPIO_PIN_1 // Set GPIO A0 and A1 as UART0 pins.&#10;#define UART_DEBUG_PORT			UART0_BASE				// Use UART0 (USB) as debug port&#10;#define UART_DEBUG_INT			INT_UART0	&#10;&#10;/**/&#10;&#10;&#10;/***preinitBlock***/&#10;//Global variables&#10;static int32 	g_discPowerOffset = 0;		//Essentially a DC offset to overcome static friction; determined dynamically in main()&#10;static uint8	g_run = 0;					// Boolean, used to control start/stop state of the TBD&#10;static Time previousTrajectoryTime = {0, 0};&#10;&#10;// Return the desired trajectory of the disc&#10;void getCurrentTrajectory(Disc * const disc, const Time currentTime) {&#10;	Time tempTime;&#10;	int numSteps;&#10;	if (-1 == timeSub(currentTime, previousTrajectoryTime, &amp;tempTime)) {&#10;		die(&quot;trajectory time backwards&quot;);&#10;	}	&#10;	if (tempTime.secs &gt; 0) {&#10;		/*&#10;		disableInterrupts();&#10;	    debugMessageNumber(&quot;tempTime sec =&quot;, tempTime.secs);&#10;        debugMessageNumber(&quot;tempTime nsec=&quot;, tempTime.nsecs);&#10;		while(1);&#10;		*/&#10;		die(&quot;trajectory time difference too big&quot;);&#10;	}&#10;	numSteps = tempTime.nsecs / g_desiredTrajectory.period;&#10;	//g_desiredTrajectory.period doesn't change.&#10;	g_desiredTrajectory.position += numSteps;&#10;	previousTrajectoryTime.nsecs += numSteps * g_desiredTrajectory.period;&#10;	if (previousTrajectoryTime.nsecs &gt;= 1000000000) {&#10;		previousTrajectoryTime.nsecs -= 1000000000;&#10;		previousTrajectoryTime.secs++;&#10;	}&#10;	*disc = g_desiredTrajectory;&#10;}&#10;&#10;void trajectoryPeriodSet(const int32 period) {&#10;	Disc tempDisc;&#10;	getCurrentTrajectory(&amp;tempDisc, currentModelTime);&#10;	g_desiredTrajectory.period = period;&#10;}&#10;&#10;int32 trajectoryCorrectionPeriod(uint32 impactTime) {&#10;	int32 positionProjectedChange;&#10;	int32 positionCorrection;&#10;&#10;	// FIXME: instead of getting the actually period, we assume the disc is always&#10;	// rotating at its desired period when the ball falls through.&#10;	positionProjectedChange = impactTime / DISC_DEFAULT_PERIOD;&#10;	positionCorrection = (g_disc.position + positionProjectedChange) % ENCODER_TICKS_PER_REV;&#10;	&#10;	if (positionCorrection &lt; (ENCODER_TICKS_PER_REV / 4))	// If the disk needs to slow down for the ball to fall into the hole at 0 degrees&#10;		return impactTime/(positionProjectedChange - positionCorrection);&#10;	else if(positionCorrection &gt;= (ENCODER_TICKS_PER_REV / 4) &amp;&amp; positionCorrection &lt; ((ENCODER_TICKS_PER_REV * 3)/4)) //For the hole at 180 degrees&#10;		return impactTime/(positionProjectedChange + (ENCODER_TICKS_PER_REV / 2) - positionCorrection);&#10;	else	// If the disk needs to speed up for the ball to fall into the hole at 0 degrees&#10;		return impactTime/(positionProjectedChange + ENCODER_TICKS_PER_REV - positionCorrection);&#10;}&#10;&#10;// Set the device to run mode&#10;void userTriggerStart(void){&#10;	g_run = 1;&#10;}&#10;&#10;// Set the device to stop mode&#10;void userTriggerStop(void){&#10;	g_run = 0;&#10;}&#10;&#10;// Initialize GPIO for user input&#10;void userGPIOInit(void){&#10;	g_run = 0;&#10;&#10;	//  Select button&#10;	SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF);&#10;	GPIOPinTypeGPIOInput(GPIO_PORTF_BASE, GPIO_PIN_1);&#10;	GPIOPadConfigSet(GPIO_PORTF_BASE, GPIO_PIN_1, GPIO_STRENGTH_2MA, GPIO_PIN_TYPE_STD_WPU);&#10;	GPIOIntTypeSet(GPIO_PORTF_BASE, GPIO_PIN_1, GPIO_FALLING_EDGE);&#10;	GPIOPinIntEnable(GPIO_PORTF_BASE, GPIO_PIN_1);&#10;	IntEnable(INT_GPIOF);&#10;}&#10;&#10;// Button press ISR; triggers progrma start&#10;void userButtonHandler(void){&#10;	GPIOPinIntClear(GPIO_PORTF_BASE, GPIOPinIntStatus(GPIO_PORTF_BASE, 0));&#10;	userTriggerStart();&#10;}&#10;&#10;Disc saved_discDesired, saved_g_disc;&#10;uint32 saved_timeLeft, saved_tempTime;&#10;int32 saved_controlSignal;&#10;void debugSavePacket(const Disc * const discDesired, const Disc * const disc,&#10;		const uint32 timeToImpact, const int32 controlSignal, const uint32 time) {&#10;	saved_discDesired = *discDesired;&#10;	saved_g_disc = *disc;&#10;	saved_timeLeft = timeToImpact;&#10;	saved_controlSignal = controlSignal;&#10;	saved_tempTime = time;&#10;}&#10;&#10;//Clear Rx buffer&#10;void UARTClear(void){&#10;	while(UARTCharsAvail(UART_DEBUG_PORT)){&#10;		UARTCharGet(UART_DEBUG_PORT);&#10;	}&#10;}&#10;&#10;//Initialize UART for debug messages&#10;void debugUARTInit(void){&#10;	SysCtlPeripheralEnable(UART_DEBUG_PERIF);&#10;	SysCtlPeripheralEnable(UART_DEBUG_PERIF_GPIO);&#10;	GPIOPinTypeUART(UART_DEBUG_GPIO_BASE, UART_DEBUG_PINS);&#10;	&#10;	UARTFIFOLevelSet(UART_DEBUG_PORT, UART_FIFO_RX1_8, UART_FIFO_TX7_8);&#10;	&#10;	//Configure for 115.2 kbaud, 8-N-1 operation&#10;	UARTConfigSetExpClk(UART_DEBUG_PORT, SysCtlClockGet(), 115200, UART_CONFIG_WLEN_8 | UART_CONFIG_STOP_ONE | UART_CONFIG_PAR_NONE);&#10;	UARTEnable(UART_DEBUG_PORT);&#10;	&#10;	//Configure UART interrupt for debug input messages&#10;	UARTIntEnable(UART_DEBUG_PORT, UART_INT_RX);&#10;	IntEnable(UART_DEBUG_INT);&#10;	&#10;	//Clear any unprocessed UART messages&#10;	UARTClear();&#10;}&#10;&#10;//Send a debug packet&#10;void debugSendPacket(const Disc * const discDesired, const Disc * const disc, const int32 timeToImpact, const int32 controlSignal, const uint32 time){&#10;	char szMsg[32];				//Message to transmit&#10;	uint8 szMsgLen = 0;			//Length of message&#10;	uint8 szMsgIndex = 0;		//Byte of message to transmit&#10;	byte cxsum = 0;				//Checksum&#10;	&#10;	//Header byte&#10;	cxsum += szMsg[szMsgLen++] = 0xFF;&#10;	&#10;	//Desired position (4-byte)&#10;	cxsum += szMsg[szMsgLen++] = HHO(discDesired-&gt;position);&#10;	cxsum += szMsg[szMsgLen++] = HLO(discDesired-&gt;position);&#10;	cxsum += szMsg[szMsgLen++] = LHO(discDesired-&gt;position);&#10;	cxsum += szMsg[szMsgLen++] = LLO(discDesired-&gt;position);&#10;	&#10;	//Desired period (4-byte)&#10;	cxsum += szMsg[szMsgLen++] = HHO(discDesired-&gt;period);&#10;	cxsum += szMsg[szMsgLen++] = HLO(discDesired-&gt;period);&#10;	cxsum += szMsg[szMsgLen++] = LHO(discDesired-&gt;period);&#10;	cxsum += szMsg[szMsgLen++] = LLO(discDesired-&gt;period);&#10;	&#10;	//Position (4-byte)&#10;	cxsum += szMsg[szMsgLen++] = HHO(disc-&gt;position);&#10;	cxsum += szMsg[szMsgLen++] = HLO(disc-&gt;position);&#10;	cxsum += szMsg[szMsgLen++] = LHO(disc-&gt;position);&#10;	cxsum += szMsg[szMsgLen++] = LLO(disc-&gt;position);&#10;		&#10;	//Encoder period (4-byte)&#10;	cxsum += szMsg[szMsgLen++] = HHO(disc-&gt;period);&#10;	cxsum += szMsg[szMsgLen++] = HLO(disc-&gt;period);&#10;	cxsum += szMsg[szMsgLen++] = LHO(disc-&gt;period);&#10;	cxsum += szMsg[szMsgLen++] = LLO(disc-&gt;period);&#10;	&#10;	//Time to impact (4-byte)&#10;	cxsum += szMsg[szMsgLen++] = HHO(timeToImpact);&#10;	cxsum += szMsg[szMsgLen++] = HLO(timeToImpact);&#10;	cxsum += szMsg[szMsgLen++] = LHO(timeToImpact);&#10;	cxsum += szMsg[szMsgLen++] = LLO(timeToImpact);&#10;	&#10;	//Control signal (4-byte)&#10;	cxsum += szMsg[szMsgLen++] = HHO(controlSignal);&#10;	cxsum += szMsg[szMsgLen++] = HLO(controlSignal);&#10;	cxsum += szMsg[szMsgLen++] = LHO(controlSignal);&#10;	cxsum += szMsg[szMsgLen++] = LLO(controlSignal);&#10;	&#10;	//System time (4-byte)&#10;	cxsum += szMsg[szMsgLen++] = HHO(time);&#10;	cxsum += szMsg[szMsgLen++] = HLO(time);&#10;	cxsum += szMsg[szMsgLen++] = LHO(time);&#10;	cxsum += szMsg[szMsgLen++] = LLO(time);&#10;	&#10;	szMsg[szMsgLen] = ~cxsum + 1;		//Calculate checksum&#10;	&#10;	//Send via UART&#10;	while(szMsgIndex &lt;= szMsgLen){&#10;		UARTCharPut(UART_DEBUG_PORT, szMsg[szMsgIndex++]);&#10;	}&#10;}&#10;&#10;#define DBG_MSG_NULL			0		//No message; used as padding to force FIFO level interrupts&#10;#define DBG_MSG_STOP			1		//Stop (or pause) the program; restarting with out resetting is a bad idea&#10;										//		if the clock is used to determine desired position&#10;#define DBG_MSG_START			2		//Start the program&#10;#define DBG_MSG_RESET			3		//Reset the entire system&#10;&#10;//Debug UART handler&#10;void debugUARTHandler(void){&#10;	UARTIntClear(UART_DEBUG_PORT, UARTIntStatus(UART_DEBUG_PORT, 1));&#10;	&#10;	//Receive bytes&#10;	while(UARTCharsAvail(UART_DEBUG_PORT)){&#10;		switch(UARTCharGet(UART_DEBUG_PORT)){&#10;		case DBG_MSG_START:		userTriggerStart(); break;	//Start the program&#10;		case DBG_MSG_STOP:		userTriggerStop();	break;	//Stop the program&#10;		case DBG_MSG_RESET:		SysCtlReset();		break;	//Reset the entire device&#10;		case DBG_MSG_NULL:&#10;		default:									break;&#10;		}&#10;	}&#10;}&#10;/**/&#10;&#10;/***initBlock***/&#10;userGPIOInit();&#10;debugUARTInit();&#10;/**/&#10;&#10;/***fireBlock***/&#10;{&#10;Disc   discDesired = Disc_0;					//Desired disc position and rate&#10;int32  discPositionError = 0;					//Difference between desired and actual position&#10;static int32  discPositionPreviousError = 0;			//Disc position error from the previous control loop iteration&#10;int32  errorDerivative = 0;						//Low pass filtered change of error&#10;&#10;int32  proportional = 0;						//Proportional component of control signal&#10;int32  derivative = 0;							//Derivative component of control signal&#10;int32  controlSignal = 0;						//Control signal (sum of proportional, integral, and derivative components)&#10;static int8 discAligned = 0;&#10;static Time impactTime;&#10;static Time timeLeft;&#10;#ifdef RETURN_TO_DEFAULT_PERIOD&#10;Time thisTime;&#10;#endif&#10;int32 discPositionErrorSmooth = 0;				//discPositionError after butterworth filter&#10;static int32 discPositionPreviousErrorSmooth = 0;		//Disc position error from the previous control loop iteration&#10;static Time startTime, tempTime, actualTime;&#10;long leftOverTime;&#10;&#10;// drop sensor, updates the desired disc period.&#10;if ($hasToken(dropSensor#0)) {&#10;	// the expected impact time is the timestamp of the incoming event(in ns) + timeToImpact (in ns).&#10;	// timeLeft is calculated as the above value - current real time.&#10;	trajectoryPeriodSet(trajectoryCorrectionPeriod($get(dropSensor#0)));&#10;        impactTime.nsecs = currentModelTime.nsecs + $get(dropSensor#0);&#10;        if (impactTime.nsecs &gt;= 1000000000) {&#10;        	impactTime.secs = currentModelTime.secs + 1;&#10;		impactTime.nsecs -= 1000000000;&#10;        } else {&#10;        	impactTime.secs = currentModelTime.secs;&#10;        }&#10;}&#10;&#10;// The following is ordinary C code, except for&#10;// the macro references to the input and output&#10;// ports.&#10;//If an external event has stopped the device, stop the motor and do nothing.&#10;if(!g_run){&#10;	$put(actuation, 0);&#10;	// keep updating start time until we are not in here anymore.&#10;        getRealTime(&amp;startTime);&#10;} else {&#10;	if ($hasToken(controlStart#0)) {&#10;		if ($get(controlStart#0) == 0 &amp;&amp; !discAligned) {&#10;			g_discPowerOffset += MOTOR_MAX_SPEED &gt;&gt; 12;&#10;			$put(actuation, g_discPowerOffset);&#10;			previousTrajectoryTime = currentModelTime;&#10;		} else {&#10;		    // disc is aligned, no longer needs to spin up the disc.&#10;		    discAligned = 1;&#10;                    //ATOMIC: Capture state of the system&#10;                    getCurrentTrajectory(&amp;discDesired, currentModelTime);	// Record planned trajectory&#10;                    //END ATOMIC&#10;                    discPositionError = discDesired.position - $get(controlStart#0);&#10;                    discPositionErrorSmooth = ((discPositionError + discPositionPreviousError)*46 + (discPositionErrorSmooth&gt;&gt;9)*420);&#10;		    controlSignal = 0;&#10;                    //Kp&#10;                    proportional = discPositionError &lt;&lt; 8;	//Kp = 2^shift&#10;                    controlSignal += proportional;&#10;&#10;                    //Kd&#10;                    //FIXME: This Kd assumes fixed-step size;&#10;                    //		implement with variable step size.&#10;                    // 	errorDerivative(t) = 3/4*errorDerivative(t-1) + 1/4*e(t)&#10;                    //	e = error derivative (discPositionError - discPositionPreviousError)&#10;                    //  errorDerivative = exponential moving average of error derivative&#10;                    errorDerivative = discPositionErrorSmooth - discPositionPreviousErrorSmooth;&#10;                    derivative = errorDerivative &lt;&lt; 5;	// Kd / dt = 2^shift&#10;                    controlSignal += derivative;&#10;                    //Ki&#10;                    //FIXME: Implement Ki with variable step size.&#10;                    // Only use integeral control when position error is low&#10;                    // so as not to accumulate too much in the integeral component&#10;                    //if (errorDerivative &lt; 5) {&#10;                    //    integral += discPositionError;&#10;                    //	  controlSignal += integral;&#10;                    //}&#10;                    //DC offset&#10;                    controlSignal += g_discPowerOffset;&#10;&#10;		    //Send the control signal. motorSetPower handles saturation.&#10;		    $put(actuation, controlSignal);&#10;&#10;                    #ifdef RETURN_TO_DEFAULT_PERIOD&#10;                        getRealTime(&amp;thisTime);&#10;                        if ((-1 == timeSub(impactTime, thisTime, &amp;timeLeft)) &amp;&amp;&#10;				(discDesired.period != DISC_DEFAULT_PERIOD)) {&#10;                            trajectoryPeriodSet(DISC_DEFAULT_PERIOD);&#10;							timeLeft.nsecs = 0;&#10;                        }&#10;                    #endif&#10;&#10;                    discPositionPreviousError = discPositionError;&#10;                    discPositionPreviousErrorSmooth = discPositionErrorSmooth;&#10;&#10;			//FIXME: this is very tricky, what time do we actually want to output here?&#10;			getRealTime(&amp;actualTime);&#10;			if (-1 == timeSub(actualTime, startTime, &amp;tempTime)) {&#10;				die(&quot;tempTime backwards&quot;);&#10;			}&#10;			leftOverTime = tempTime.nsecs / 1000;&#10;			leftOverTime += tempTime.secs * 1000000;&#10;			debugSavePacket(&amp;discDesired, (const Disc*) &amp;g_disc, timeLeft.nsecs, controlSignal, leftOverTime);&#10;   &#10;		}&#10;	}&#10;}&#10;}&#10;/**/&#10;&#10;/***wrapupBlock***/&#10;/**/&#10;&#10;">
            </property>
            <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
                <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="embeddedCode">
                </property>
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{295.0, 195.0}">
            </property>
            <property name="_hideName" class="ptolemy.data.expr.SingletonParameter" value="false">
            </property>
            <property name="CodeGenerator_AutoAdded" class="ptolemy.cg.kernel.generic.program.procedural.c.CCodeGenerator">
                <property name="codeDirectory" class="ptolemy.data.expr.FileParameter" value="$HOME/cg/">
                    <property name="allowFiles" class="ptolemy.data.expr.Parameter" value="false">
                    </property>
                    <property name="allowDirectories" class="ptolemy.data.expr.Parameter" value="true">
                    </property>
                </property>
                <property name="generatorPackageList" class="ptolemy.data.expr.StringParameter" value="generic.program.procedural.c">
                </property>
                <property name="overwriteFiles" class="ptolemy.data.expr.Parameter" value="true">
                </property>
                <property name="generateComment" class="ptolemy.data.expr.Parameter" value="true">
                </property>
                <property name="inline" class="ptolemy.data.expr.Parameter" value="false">
                </property>
                <property name="measureTime" class="ptolemy.data.expr.Parameter" value="false">
                </property>
                <property name="run" class="ptolemy.data.expr.Parameter" value="true">
                </property>
                <property name="compile" class="ptolemy.data.expr.Parameter" value="true">
                </property>
                <property name="generateEmbeddedCode" class="ptolemy.data.expr.Parameter" value="true">
                </property>
                <property name="generateCpp" class="ptolemy.data.expr.Parameter" value="false">
                </property>
                <property name="sourceLineBinding" class="ptolemy.data.expr.Parameter" value="false">
                </property>
                <property name="compileTarget" class="ptolemy.data.expr.StringParameter" value="">
                </property>
            </property>
            <property name="PtidesPreemptiveEDFDirector" class="ptolemy.domains.ptides.kernel.PtidesPreemptiveEDFDirector">
                <property name="startTime" class="ptolemy.data.expr.Parameter" value="0.0">
                </property>
                <property name="stopTime" class="ptolemy.data.expr.Parameter" value="Infinity">
                </property>
                <property name="stopWhenQueueIsEmpty" class="ptolemy.data.expr.Parameter" value="false">
                </property>
                <property name="synchronizeToRealTime" class="ptolemy.data.expr.Parameter" value="false">
                </property>
                <property name="isCQAdaptive" class="ptolemy.data.expr.Parameter" value="true">
                </property>
                <property name="minBinCount" class="ptolemy.data.expr.Parameter" value="2">
                </property>
                <property name="binCountFactor" class="ptolemy.data.expr.Parameter" value="2">
                </property>
                <property name="timeResolution" class="ptolemy.actor.parameters.SharedParameter" value="1.0E-10">
                </property>
                <property name="animateExecution" class="ptolemy.data.expr.Parameter" value="false">
                </property>
                <property name="forceActorsToProcessEventsInTimestampOrder" class="ptolemy.data.expr.Parameter" value="false">
                </property>
                <property name="highlightModelTimeDelay" class="ptolemy.data.expr.Parameter" value="false">
                </property>
                <property name="schedulerExecutionTime" class="ptolemy.data.expr.Parameter" value="0.0">
                </property>
                <property name="AssumedSynchronizationErrorBound" class="ptolemy.data.expr.Parameter" value="0.0">
                </property>
                <property name="synchronizationError" class="ptolemy.data.expr.Parameter" value="0.0">
                </property>
            </property>
            <port name="dropSensor" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
                <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
                </property>
                <property name="delayOffset" class="ptolemy.data.expr.Parameter" value="{0.0}">
                </property>
                <property name="relativeDeadline" class="ptolemy.data.expr.Parameter" value="3.2E-4">
                </property>
            </port>
            <port name="actuation" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
                <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
                </property>
                <property name="_type" class="ptolemy.actor.TypeAttribute" value="int">
                </property>
            </port>
            <port name="controlStart" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
                <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
                </property>
                <property name="delayOffset" class="ptolemy.data.expr.Parameter" value="{0.0}">
                </property>
                <property name="relativeDeadline" class="ptolemy.data.expr.Parameter" value="3.2E-4">
                </property>
            </port>
        </entity>
        <entity name="TimeTriggeredEncoderHandler" class="ptolemy.domains.ptides.lib.luminary.TimeTriggeredEncoderHandler">
            <property name="_location" class="ptolemy.kernel.util.Location" value="[130.0, 235.0]">
            </property>
            <port name="input" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
                <property name="delayOffset" class="ptolemy.data.expr.Parameter" value="{0.0}">
                </property>
                <property name="relativeDeadline" class="ptolemy.data.expr.Parameter" value="-Infinity">
                </property>
            </port>
            <port name="trigger" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
                <property name="multiport"/>
                <property name="delayOffset" class="ptolemy.data.expr.Parameter" value="{0.0, 0.0}">
                </property>
                <property name="relativeDeadline" class="ptolemy.data.expr.Parameter" value="-Infinity">
                </property>
            </port>
        </entity>
        <entity name="MotorSetup" class="ptolemy.domains.ptides.lib.luminary.MotorSetup">
            <property name="_location" class="ptolemy.kernel.util.Location" value="[540.0, 195.0]">
            </property>
            <port name="input" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
                <property name="delayOffset" class="ptolemy.data.expr.Parameter" value="{3.2E-4}">
                </property>
                <property name="relativeDeadline" class="ptolemy.data.expr.Parameter" value="0.0">
                </property>
            </port>
        </entity>
        <entity name="GPInputHandler" class="ptolemy.domains.ptides.lib.luminary.GPInputHandler">
            <property name="_location" class="ptolemy.kernel.util.Location" value="[25.0, 320.0]">
            </property>
            <port name="input" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
                <property name="delayOffset" class="ptolemy.data.expr.Parameter" value="{0.0}">
                </property>
                <property name="relativeDeadline" class="ptolemy.data.expr.Parameter" value="-Infinity">
                </property>
            </port>
        </entity>
        <relation name="relation" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation3" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation5" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation2" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation6" class="ptolemy.actor.TypedIORelation">
            <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
            </property>
            <vertex name="vertex1" value="[215.0, 235.0]">
            </vertex>
        </relation>
        <relation name="relation7" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation8" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation9" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation10" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation4" class="ptolemy.actor.TypedIORelation">
        </relation>
        <link port="port" relation="relation"/>
        <link port="port3" relation="relation8"/>
        <link port="port2" relation="relation2"/>
        <link port="port4" relation="relation10"/>
        <link port="TimeDelay.input" relation="relation3"/>
        <link port="TimeDelay.output" relation="relation7"/>
        <link port="DropSensorHandler.input" relation="relation"/>
        <link port="DropSensorHandler.output" relation="relation5"/>
        <link port="TimeDelay2.input" relation="relation6"/>
        <link port="TimeDelay2.output" relation="relation4"/>
        <link port="Control.dropSensor" relation="relation5"/>
        <link port="Control.actuation" relation="relation3"/>
        <link port="Control.controlStart" relation="relation6"/>
        <link port="TimeTriggeredEncoderHandler.input" relation="relation2"/>
        <link port="TimeTriggeredEncoderHandler.output" relation="relation6"/>
        <link port="TimeTriggeredEncoderHandler.trigger" relation="relation9"/>
        <link port="TimeTriggeredEncoderHandler.trigger" relation="relation4"/>
        <link port="MotorSetup.input" relation="relation7"/>
        <link port="MotorSetup.output" relation="relation8"/>
        <link port="GPInputHandler.input" relation="relation10"/>
        <link port="GPInputHandler.output" relation="relation9"/>
    </entity>
    <entity name="Dynamics Model" class="ptolemy.actor.TypedCompositeActor">
        <property name="_location" class="ptolemy.kernel.util.Location" value="{195.0, 215.0}">
        </property>
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={351, 237, 929, 464}, maximized=false}">
        </property>
        <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[706, 350]">
        </property>
        <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.0">
        </property>
        <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{24.9393939393939, 238.3236268939394}">
        </property>
        <property name="A" class="ptolemy.data.expr.Parameter" value="[ -1.775e4,0,-16.77; 0,0,1 ; 2.30e4,0,0.472]">
        </property>
        <property name="B" class="ptolemy.data.expr.Parameter" value="[92.46 / .039 ; 0 ; 0]">
        </property>
        <property name="C" class="ptolemy.data.expr.Parameter" value="[0,1,0]">
        </property>
        <property name="D" class="ptolemy.data.expr.Parameter" value="[0.0]">
        </property>
        <property name="initialStates" class="ptolemy.data.expr.Parameter" value="[0,0,0]">
        </property>
        <port name="photoPulse" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{105.0, 150.0}">
            </property>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="encoderPulse" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[105.0, 290.0]">
            </property>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="ballTrigger" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[-225.0, 225.0]">
            </property>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="controlSignal" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[-225.0, 290.0]">
            </property>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <entity name="Disc Model" class="ptolemy.actor.TypedCompositeActor">
            <property name="_location" class="ptolemy.kernel.util.Location" value="[-20.0, 290.0]">
            </property>
            <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={5, 287, 1275, 468}, maximized=false}">
            </property>
            <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[1052, 354]">
            </property>
            <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.0">
            </property>
            <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{258.6221808231238, 207.9355014068912}">
            </property>
            <property name="_hideName" class="ptolemy.data.expr.SingletonParameter" value="false">
            </property>
            <property name="Annotation" class="ptolemy.vergil.kernel.attributes.TextAttribute">
                <property name="text" class="ptolemy.kernel.util.StringAttribute" value="This is a COMPLETELY HACKED model for the disc&#10;that simply delays and scales its input.&#10;The correct Continuous model breaks things :-(">
                </property>
                <property name="_location" class="ptolemy.kernel.util.Location" value="[-110.0, 135.0]">
                </property>
            </property>
            <port name="v" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
                <property name="_location" class="ptolemy.kernel.util.Location" value="[-329.25, 295.5]">
                </property>
                <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="false">
                </property>
            </port>
            <port name="encoderPulse" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
                <property name="_location" class="ptolemy.kernel.util.Location" value="[460.0, 280.0]">
                </property>
                <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="false">
                </property>
            </port>
            <entity name="DiscreteClock" class="ptolemy.actor.lib.DiscreteClock">
                <property name="period" class="ptolemy.actor.parameters.PortParameter" value="0.001">
                </property>
                <doc>Create periodic timed events.</doc>
                <property name="_location" class="ptolemy.kernel.util.Location" value="[365.0, 280.0]">
                </property>
            </entity>
            <entity name="damp" class="ptolemy.actor.lib.Const">
                <property name="value" class="ptolemy.data.expr.Parameter" value="100.0">
                </property>
                <doc>Create a constant sequence.</doc>
                <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
                    <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="value">
                    </property>
                    <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
                    </property>
                </property>
                <property name="_location" class="ptolemy.kernel.util.Location" value="{-245.0, 275.0}">
                </property>
            </entity>
            <entity name="Saturate" class="ptolemy.actor.TypedCompositeActor">
                <property name="_location" class="ptolemy.kernel.util.Location" value="[170.0, 300.0]">
                </property>
                <port name="ceil" class="ptolemy.actor.TypedIOPort">
                    <property name="input"/>
                    <property name="_location" class="ptolemy.kernel.util.Location" value="{20.0, 200.0}">
                    </property>
                </port>
                <port name="x" class="ptolemy.actor.TypedIOPort">
                    <property name="input"/>
                    <property name="_location" class="ptolemy.kernel.util.Location" value="{20.0, 240.0}">
                    </property>
                </port>
                <port name="floor" class="ptolemy.actor.TypedIOPort">
                    <property name="input"/>
                    <property name="_location" class="ptolemy.kernel.util.Location" value="{20.0, 280.0}">
                    </property>
                </port>
                <port name="sat" class="ptolemy.actor.TypedIOPort">
                    <property name="output"/>
                    <property name="_location" class="ptolemy.kernel.util.Location" value="[305.0, 195.0]">
                    </property>
                </port>
                <entity name="Maximum" class="ptolemy.actor.lib.Maximum">
                    <property name="_location" class="ptolemy.kernel.util.Location" value="[110.0, 245.0]">
                    </property>
                </entity>
                <entity name="Minimum" class="ptolemy.actor.lib.Minimum">
                    <property name="_location" class="ptolemy.kernel.util.Location" value="[225.0, 205.0]">
                    </property>
                </entity>
                <relation name="relation" class="ptolemy.actor.TypedIORelation">
                </relation>
                <relation name="relation2" class="ptolemy.actor.TypedIORelation">
                </relation>
                <relation name="relation3" class="ptolemy.actor.TypedIORelation">
                </relation>
                <relation name="relation4" class="ptolemy.actor.TypedIORelation">
                </relation>
                <relation name="relation5" class="ptolemy.actor.TypedIORelation">
                </relation>
                <link port="ceil" relation="relation3"/>
                <link port="x" relation="relation"/>
                <link port="floor" relation="relation2"/>
                <link port="sat" relation="relation5"/>
                <link port="Maximum.input" relation="relation"/>
                <link port="Maximum.input" relation="relation2"/>
                <link port="Maximum.maximumValue" relation="relation4"/>
                <link port="Minimum.input" relation="relation3"/>
                <link port="Minimum.input" relation="relation4"/>
                <link port="Minimum.minimumValue" relation="relation5"/>
            </entity>
            <entity name="maxRate" class="ptolemy.actor.lib.Const">
                <property name="value" class="ptolemy.data.expr.Parameter" value="discMaxRate">
                </property>
                <doc>Create a constant sequence.</doc>
                <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
                    <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="value">
                    </property>
                    <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
                    </property>
                </property>
                <property name="_location" class="ptolemy.kernel.util.Location" value="[20.0, 280.0]">
                </property>
                <property name="_hideName" class="ptolemy.data.expr.SingletonParameter" value="true">
                </property>
            </entity>
            <entity name="Const3" class="ptolemy.actor.lib.Const">
                <property name="value" class="ptolemy.data.expr.Parameter" value="0.25 * discDefaultRate">
                </property>
                <doc>Create a constant sequence.</doc>
                <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
                    <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="value">
                    </property>
                    <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
                    </property>
                </property>
                <property name="_location" class="ptolemy.kernel.util.Location" value="[40.0, 325.0]">
                </property>
                <property name="_hideName" class="ptolemy.data.expr.SingletonParameter" value="true">
                </property>
            </entity>
            <entity name="MultiplyDivide" class="ptolemy.actor.lib.MultiplyDivide">
                <property name="_location" class="ptolemy.kernel.util.Location" value="[-120.0, 305.0]">
                </property>
            </entity>
            <entity name="MultiplyDivide2" class="ptolemy.actor.lib.MultiplyDivide">
                <property name="_location" class="ptolemy.kernel.util.Location" value="[255.0, 290.0]">
                </property>
            </entity>
            <relation name="relation2" class="ptolemy.actor.TypedIORelation">
            </relation>
            <relation name="relation5" class="ptolemy.actor.TypedIORelation">
                <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
                </property>
                <vertex name="vertex1" value="[-294.25, 295.5]">
                </vertex>
            </relation>
            <relation name="relation3" class="ptolemy.actor.TypedIORelation">
            </relation>
            <relation name="relation6" class="ptolemy.actor.TypedIORelation">
                <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
                </property>
                <vertex name="vertex1" value="[-45.0, 305.0]">
                </vertex>
            </relation>
            <relation name="relation" class="ptolemy.actor.TypedIORelation">
            </relation>
            <relation name="relation9" class="ptolemy.actor.TypedIORelation">
            </relation>
            <relation name="relation4" class="ptolemy.actor.TypedIORelation">
            </relation>
            <relation name="relation8" class="ptolemy.actor.TypedIORelation">
            </relation>
            <link port="v" relation="relation5"/>
            <link port="encoderPulse" relation="relation2"/>
            <link port="DiscreteClock.output" relation="relation2"/>
            <link port="DiscreteClock.period" relation="relation9"/>
            <link port="damp.output" relation="relation4"/>
            <link port="damp.trigger" relation="relation5"/>
            <link port="Saturate.ceil" relation="relation3"/>
            <link port="Saturate.x" relation="relation6"/>
            <link port="Saturate.floor" relation="relation"/>
            <link port="Saturate.sat" relation="relation8"/>
            <link port="maxRate.output" relation="relation3"/>
            <link port="maxRate.trigger" relation="relation6"/>
            <link port="Const3.output" relation="relation"/>
            <link port="Const3.trigger" relation="relation6"/>
            <link port="MultiplyDivide.multiply" relation="relation4"/>
            <link port="MultiplyDivide.multiply" relation="relation5"/>
            <link port="MultiplyDivide.output" relation="relation6"/>
            <link port="MultiplyDivide2.divide" relation="relation8"/>
            <link port="MultiplyDivide2.output" relation="relation9"/>
        </entity>
        <entity name="DiscreteClock" class="ptolemy.actor.lib.DiscreteClock">
            <property name="period" class="ptolemy.actor.parameters.PortParameter" value="5*dropSensorImpactDelay">
            </property>
            <property name="offsets" class="ptolemy.data.expr.Parameter" value="{dropSensorImpactDelay}">
            </property>
            <doc>Create periodic timed events.</doc>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[-145.0, 150.0]">
            </property>
        </entity>
        <entity name="Ball Plant" class="ptolemy.actor.TypedCompositeActor">
            <property name="_location" class="ptolemy.kernel.util.Location" value="{-25.0, 150.0}">
            </property>
            <property name="Annotation" class="ptolemy.vergil.kernel.attributes.TextAttribute">
                <property name="text" class="ptolemy.kernel.util.StringAttribute" value="When triggered, generate two photo pulses that correspond to the physical times&#10;a ball passes through two photodetectors separated by a fixed distance.&#10;&#10;Introduce a random delay between photo events, which will randomize the initial&#10;velocity of the ball in motion.">
                </property>
                <property name="_location" class="ptolemy.kernel.util.Location" value="[-240.0, 30.0]">
                </property>
            </property>
            <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={58, 115, 975, 547}, maximized=false}">
            </property>
            <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[752, 433]">
            </property>
            <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.0">
            </property>
            <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{70.7121212121211, 164.8844696969697}">
            </property>
            <port name="trigger" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
                <property name="multiport"/>
                <property name="_location" class="ptolemy.kernel.util.Location" value="[-245.0, 185.0]">
                </property>
                <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
                </property>
                <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
                </property>
            </port>
            <port name="photoPulse" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
                <property name="_location" class="ptolemy.kernel.util.Location" value="[350.0, 305.0]">
                </property>
                <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
                </property>
            </port>
            <entity name="Pulse" class="ptolemy.actor.lib.Pulse">
                <property name="_location" class="ptolemy.kernel.util.Location" value="{175.0, 200.0}">
                </property>
            </entity>
            <entity name="Sensor2 Timer" class="ptolemy.actor.lib.ResettableTimer">
                <property name="_location" class="ptolemy.kernel.util.Location" value="[160.0, 305.0]">
                </property>
            </entity>
            <entity name="Const" class="ptolemy.actor.lib.Const">
                <property name="value" class="ptolemy.data.expr.Parameter" value="true">
                </property>
                <doc>Create a constant sequence.</doc>
                <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
                    <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="value">
                    </property>
                    <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
                    </property>
                </property>
                <property name="_location" class="ptolemy.kernel.util.Location" value="[270.0, 305.0]">
                </property>
            </entity>
            <entity name="Const2" class="ptolemy.actor.lib.Const">
                <property name="value" class="ptolemy.data.expr.Parameter" value="dropSensorMeanNoise">
                </property>
                <doc>Create a constant sequence.</doc>
                <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
                    <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="value">
                    </property>
                    <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
                    </property>
                </property>
                <property name="_location" class="ptolemy.kernel.util.Location" value="[-70.0, 305.0]">
                </property>
                <property name="_hideName" class="ptolemy.data.expr.SingletonParameter" value="true">
                </property>
            </entity>
            <entity name="Sensor1 Timer" class="ptolemy.actor.lib.ResettableTimer">
                <property name="_location" class="ptolemy.kernel.util.Location" value="{85.0, 200.0}">
                </property>
            </entity>
            <entity name="AddSubtract" class="ptolemy.actor.lib.AddSubtract">
                <property name="_location" class="ptolemy.kernel.util.Location" value="{10.0, 200.0}">
                </property>
                <property name="_hideName" class="ptolemy.data.expr.SingletonParameter" value="true">
                </property>
            </entity>
            <entity name="Const3" class="ptolemy.actor.lib.Const">
                <property name="value" class="ptolemy.data.expr.Parameter" value="dropSensorImpactDelay">
                </property>
                <doc>Create a constant sequence.</doc>
                <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
                    <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="value">
                    </property>
                    <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
                    </property>
                </property>
                <property name="_location" class="ptolemy.kernel.util.Location" value="{-100.0, 160.0}">
                </property>
                <property name="_hideName" class="ptolemy.data.expr.SingletonParameter" value="true">
                </property>
            </entity>
            <entity name="CurrentTime" class="ptolemy.actor.lib.CurrentTime">
                <doc>Output the current time.</doc>
                <property name="_location" class="ptolemy.kernel.util.Location" value="{-155.0, 230.0}">
                </property>
            </entity>
            <entity name="Gaussian" class="ptolemy.actor.lib.Gaussian">
                <property name="mean" class="ptolemy.actor.parameters.PortParameter" value="dropSensorMeanNoise">
                </property>
                <property name="standardDeviation" class="ptolemy.actor.parameters.PortParameter" value="0.05">
                </property>
                <doc>Create a sequence of gaussian random variables</doc>
                <property name="_location" class="ptolemy.kernel.util.Location" value="[75.0, 305.0]">
                </property>
            </entity>
            <relation name="relation" class="ptolemy.actor.TypedIORelation">
                <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
                </property>
                <vertex name="vertex1" value="[225.0, 265.0]">
                </vertex>
            </relation>
            <relation name="relation3" class="ptolemy.actor.TypedIORelation">
            </relation>
            <relation name="relation4" class="ptolemy.actor.TypedIORelation">
                <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
                </property>
                <vertex name="vertex1" value="[20.0, 305.0]">
                </vertex>
            </relation>
            <relation name="relation5" class="ptolemy.actor.TypedIORelation">
            </relation>
            <relation name="relation6" class="ptolemy.actor.TypedIORelation">
            </relation>
            <relation name="relation7" class="ptolemy.actor.TypedIORelation">
                <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
                </property>
                <vertex name="vertex1" value="{-190.0, 185.0}">
                </vertex>
            </relation>
            <relation name="relation8" class="ptolemy.actor.TypedIORelation">
            </relation>
            <relation name="relation9" class="ptolemy.actor.TypedIORelation">
            </relation>
            <relation name="relation10" class="ptolemy.actor.TypedIORelation">
            </relation>
            <relation name="relation2" class="ptolemy.actor.TypedIORelation">
            </relation>
            <link port="trigger" relation="relation7"/>
            <link port="photoPulse" relation="relation10"/>
            <link port="Pulse.output" relation="relation"/>
            <link port="Pulse.trigger" relation="relation6"/>
            <link port="Sensor2 Timer.input" relation="relation2"/>
            <link port="Sensor2 Timer.output" relation="relation3"/>
            <link port="Const.output" relation="relation10"/>
            <link port="Const.trigger" relation="relation"/>
            <link port="Const.trigger" relation="relation3"/>
            <link port="Const2.output" relation="relation4"/>
            <link port="Const2.trigger" relation="relation"/>
            <link port="Sensor1 Timer.input" relation="relation9"/>
            <link port="Sensor1 Timer.output" relation="relation6"/>
            <link port="AddSubtract.plus" relation="relation7"/>
            <link port="AddSubtract.plus" relation="relation5"/>
            <link port="AddSubtract.minus" relation="relation8"/>
            <link port="AddSubtract.output" relation="relation9"/>
            <link port="Const3.output" relation="relation5"/>
            <link port="Const3.trigger" relation="relation7"/>
            <link port="CurrentTime.output" relation="relation8"/>
            <link port="CurrentTime.trigger" relation="relation7"/>
            <link port="Gaussian.output" relation="relation2"/>
            <link port="Gaussian.trigger" relation="relation4"/>
            <link port="Gaussian.mean" relation="relation4"/>
        </entity>
        <relation name="relation4" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation2" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation3" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation5" class="ptolemy.actor.TypedIORelation">
        </relation>
        <link port="photoPulse" relation="relation2"/>
        <link port="encoderPulse" relation="relation4"/>
        <link port="ballTrigger" relation="relation5"/>
        <link port="controlSignal" relation="relation3"/>
        <link port="Disc Model.v" relation="relation3"/>
        <link port="Disc Model.encoderPulse" relation="relation4"/>
        <link port="DiscreteClock.output" relation="relation"/>
        <link port="DiscreteClock.start" relation="relation5"/>
        <link port="Ball Plant.trigger" relation="relation"/>
        <link port="Ball Plant.photoPulse" relation="relation2"/>
    </entity>
    <entity name="Control Delay" class="ptolemy.domains.de.lib.TimedDelay">
        <property name="delay" class="ptolemy.data.expr.Parameter" value="(1.0/discMaxRate)">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[15.0, 280.0]">
        </property>
        <property name="_flipPortsHorizontal" class="ptolemy.data.expr.Parameter" value="false">
        </property>
    </entity>
    <entity name="Get 'er Done!" class="ptolemy.domains.de.lib.SingleEvent">
        <property name="time" class="ptolemy.data.expr.Parameter" value="0.0">
        </property>
        <property name="value" class="ptolemy.data.expr.Parameter" value="5.0">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[-170.0, 205.0]">
        </property>
    </entity>
    <entity name="Spinup Delay" class="ptolemy.domains.de.lib.TimedDelay">
        <property name="delay" class="ptolemy.data.expr.Parameter" value="startupDelay">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[10.0, 205.0]">
        </property>
    </entity>
    <entity name="Merge" class="ptolemy.domains.de.lib.Merge">
        <property name="_location" class="ptolemy.kernel.util.Location" value="[-70.0, 280.0]">
        </property>
    </entity>
    <entity name="Const" class="ptolemy.actor.lib.Const">
        <property name="value" class="ptolemy.data.expr.Parameter" value="1.0">
        </property>
        <doc>Create a constant sequence.</doc>
        <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="value">
            </property>
            <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{105, 160}">
        </property>
    </entity>
    <relation name="relation" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation2" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation4" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
            <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
            </property>
        </property>
        <vertex name="vertex1" value="[-100.0, 205.0]">
        </vertex>
    </relation>
    <relation name="relation5" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation6" class="ptolemy.actor.TypedIORelation">
        <vertex name="vertex1" value="[-100.0, 335.0]">
        </vertex>
    </relation>
    <relation name="relation7" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation3" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation8" class="ptolemy.actor.TypedIORelation">
        <vertex name="vertex1" value="[-100.0, 160.0]">
        </vertex>
    </relation>
    <relation name="relation9" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
        </property>
        <vertex name="vertex1" value="[290.0, 160.0]">
        </vertex>
    </relation>
    <link port="Tunnelling Ball Device Controller.port" relation="relation"/>
    <link port="Tunnelling Ball Device Controller.port3" relation="relation6"/>
    <link port="Tunnelling Ball Device Controller.port2" relation="relation2"/>
    <link port="Tunnelling Ball Device Controller.port4" relation="relation9"/>
    <link port="Dynamics Model.photoPulse" relation="relation"/>
    <link port="Dynamics Model.encoderPulse" relation="relation2"/>
    <link port="Dynamics Model.ballTrigger" relation="relation7"/>
    <link port="Dynamics Model.controlSignal" relation="relation3"/>
    <link port="Control Delay.input" relation="relation5"/>
    <link port="Control Delay.output" relation="relation3"/>
    <link port="Get 'er Done!.output" relation="relation4"/>
    <link port="Spinup Delay.input" relation="relation4"/>
    <link port="Spinup Delay.output" relation="relation7"/>
    <link port="Merge.input" relation="relation4"/>
    <link port="Merge.input" relation="relation6"/>
    <link port="Merge.output" relation="relation5"/>
    <link port="Const.output" relation="relation9"/>
    <link port="Const.trigger" relation="relation8"/>
    <link relation1="relation4" relation2="relation8"/>
</entity>
