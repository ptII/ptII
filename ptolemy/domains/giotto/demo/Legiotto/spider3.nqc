/* This program interprets commands from the LegoDriver and sets
   OUT_A and OUT_C accordingly.
*/

// The ID of this tank.
#define LEGO_ID 0x03

// Bit mask for message type.
#define MSG_TYPE 0xe0
// Bit mask for ID message.
#define MSG_ID 0xe0
// Bit mask for OUT_A control.
#define MSG_LEFT 0x20
// Bit mask for OUT_C control.
#define MSG_RIGHT 0x40

// Bit mask for reply ID.
#define REP_ID 0x80
// Bit mask for reply switch status.
#define REP_SW 0xc0
// Bit mask for reply light sensor.
#define REP_LT 0xa0

// Bit mask for stop message.
#define STOP 0x10
// Bit mask for direction.
#define DIR 0x80
// Bit mask for forward.
#define FWD 0x00
// Bit mask for reverse.
#define REV 0x08
// Bit mask for power level.
#define POW 0x07

#define RECV_ID 0x80
#define RECV_DATA 0xc0
#define SEND 0x20

int cmd;
int msgL, msgR;

/* The main tank task. This waits for commands from the LegoDriver,
   and sets OUT_A and OUT_C accordingly.
*/
task main() {

    int CMD1 = RECV_ID | (LEGO_ID << 2);
    int id;

    msgR = 0;
    start touch_record;

    SetTxPower(TX_POWER_HI);

    SetSensor(SENSOR_1, SENSOR_TOUCH);
    SetSensor(SENSOR_3, SENSOR_TOUCH);
    SetSensor(SENSOR_2, SENSOR_LIGHT);

    SetPower(OUT_A + OUT_C, 4);
    Off(OUT_A + OUT_C);

    while (true) {

        cmd = 0;
        while ((cmd & 0x80) == 0) {
            ClearMessage();
            until (Message() != 0);
            cmd = Message();
        }

	id = (cmd & 0x70) / 16;

	msgL = cmd & 0x0f;

	if (id == 0 || id == LEGO_ID) {
	    if (msgL == 0) {
  	        Off(OUT_A + OUT_C);
	    } else if (msgL == 1) {
                OnFwd(OUT_A + OUT_C);
            } else if (msgL == 2) {
                OnRev(OUT_A + OUT_C);
            } else if (msgL == 3) {
		OnFwd(OUT_A);
		OnRev(OUT_C);
            } else if (msgL == 4) {
		OnFwd(OUT_C);
	        OnRev(OUT_A);
            }
	}

	PlaySound(SOUND_CLICK);

	Wait((LEGO_ID - 1) * 15);
	SendMessage(SEND | (LEGO_ID << 2) | (SENSOR_1 * 2 + SENSOR_3));
	//SendMessage(SEND | (LEGO_ID << 2) | msgR);
	msgR = 0;

    }

    Off(OUT_A + OUT_C);

}

task touch_record() {

    while (true) {
	if (msgR == 0) {
	    msgR = SENSOR_1 * 2 + SENSOR_3;
        }
	Wait(5);
    }
}
