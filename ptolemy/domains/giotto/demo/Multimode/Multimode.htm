<!-- $Id$
  @author: Xiaojun Liu and Edward A. Lee
-->
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<link href="../../../../../doc/default.css" rel="stylesheet" type="text/css">
<TITLE>Multimode</TITLE>
</HEAD>
<BODY>

<H1>Multimode Giotto Model</H1>
<p>
This (toy)
example illustrates the use of a finite-state machine (implemented
in the FSM domain) to get a modal Giotto model.  The block diagram
is given below:
<CENTER>
<P>

<!-- PT JNLP APPLET CONVERTER -->
<!-- We use both the older applet style and the JDK1.6.0_10 and later
     JNLP Applets.  In this way, we can support pre-JDK1.6.0_10 installs.
     See https://jdk6.dev.java.net/plugin2/jnlp/ -->
<APPLET 
   code = "ptolemy.vergil.VergilApplet"
   codebase = "../../../../.."
   archive = "ptolemy/domains/giotto/demo/Multimode/Multimode.jar,ptolemy/domains/giotto/giotto.jar,ptolemy/data/data.jar,ptolemy/domains/fsm/fsm.jar,ptolemy/ptsupport.jar,ptolemy/domains/sdf/sdf.jar,lib/diva.jar,ptolemy/domains/modal/modal.jar,ptolemy/domains/fsm/fsm.jar,ptolemy/domains/ct/ct.jar,ptolemy/vergil/vergilApplet.jar"
   width = "400"
   height = "650"
   >
  <PARAM name="jnlp_href" value="ptolemy/domains/giotto/demo/Multimode/Multimode.jnlp">
  <PARAM NAME = "commandLineArguments" VALUE = "-ptinyViewer ptolemy/domains/giotto/demo/Multimode/Multimode.xml">
  <PARAM NAME = "NAME" VALUE = "Multimode" >
  <PARAM NAME = "background" VALUE = "#ffffff" >
  <PARAM NAME = "controls" VALUE = "buttons" >
  <PARAM NAME = "orientation" VALUE = "vertical" > \
  <PARAM NAME = "modelURL" VALUE = "Multimode.xml" > \
  <a href="Multimode.xml">MoML specification for this model.</a> \
</APPLET>
<!-- /PT JNLP APPLET CONVERTER -->
</CENTER>
This model contains three components, all of which have frequency one.
The middle component is defined by the following FSM:
<CENTER>
<P>

<!-- PT JNLP CONVERTER -->
<a href="Multimode.jnlp">Run the demo using Web Start</a>
<!-- /PT JNLP CONVERTER -->
</CENTER>
<P>
This state machine has three states and starts in state <I>Init</I>.
The transition from <I>Init</I> to <I>State0</I> is always enabled and
will be taken in the first firing of the state machine. The actions on
the transition properly initialize the refinement of <I>State0</I>.
The guards on the transitions between <I>State0</I> and <I>State1</I>
cause the transitions to be taken each time the input to the state
machine is a multiple of 4. The guards read:
<pre>
    in_isPresent && (in % 4 == 0)
</pre>
which is interpreted as follows. The variable <code>in_isPresent</code>
has value <i>true</i> when the input <i>in</i> is present.
The variable <code>in</code> is the value of the input.
The expression will be true when the input is a multiple of 4.
<p>
Each state refines to a separate instance of the following model:
<CENTER>
<P>

<!-- PT JNLP CONVERTER -->
<a href="Multimode.jnlp">Run the demo using Web Start</a>
<!-- /PT JNLP CONVERTER -->
</CENTER>
In <I>State1</I>, the lower ramp has frequency 2, and therefore increments
at twice the rate of the version in <I>State0</I>.
This is the behavior exhibited by the plot above.
<p>
</BODY>
</HTML>
