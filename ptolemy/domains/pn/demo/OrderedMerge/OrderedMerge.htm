<!-- $Id$
 -->
<html>
<head>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<title>Process Network Demo</title>
<link href="../../../../../doc/default.css" rel="stylesheet" type="text/css">
</head>
<body>
<H1>Process Network Demo</H1>
<P>
Calculate all multiples of 2, 3, and 5, with no redundancies.
<!-- PT DEPLOYJAVA CONVERTER -->
<p>
OrderedMerge is available as:
<ul>
<!-- See http://blogs.sun.com/thejavatutorials/entry/deployment_toolkit_101 -->
<script src="../../../../../doc/deployJava.js"></script>
<script >
    var dir = location.href.substring(0,location.href.lastIndexOf('/')+1);
    var url = dir + "OrderedMerge.jnlp";
    deployJava.createWebStartLaunchButton(url);
</script>
 <li>An <a href="OrderedMergeVergil.htm">applet</a>.
</ul>  
<script>

deployJava.displayWebStartMessage("../../../../../"); </script>
<!-- /PT DEPLOYJAVA CONVERTER -->

 <p>
This model, whose structure is due to Kahn and MacQueen, calculates
integers whose prime factors are only 2, 3, and 5, with no
redundancies.  It uses the OrderedMerge actor, which takes two
monotonically increasing input sequences and merges them into one
monotonically increasing output sequence.

<p>In the PN domain, each actor executes
in its own Java thread. That thread
iteratively reads inputs, performs
computation, and produces outputs.

 <p>This applet is implemented in MoML, as shown
in a <a href="OrderedMergeVergil.htm">Vergil block diagram</a>.
</P>
<P></P>
</BODY>
</HTML>
