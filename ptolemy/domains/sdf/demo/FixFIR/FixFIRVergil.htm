<!-- $Id$-->
<HTML>
<HEAD>
<link href="../../../../../doc/default.css" rel="stylesheet" type="text/css">
<TITLE>Fixed-Point FIR Filter</TITLE>
<LINK href="../../../../../doc/default.css" rel="stylesheet" type="text/css">
</HEAD>
<body>
<H1>Fixed-Point FIR Filter</H1>
<p>
This model illustrates fixed-point computation using the data-polymorphic
FIR filter:
<center>
<!-- The HTML below is for the Java Plugin.  The first
     section is for IE, the second is for Netscape
-->
<!-- PT JNLP APPLET CONVERTER -->
<!-- We use both the older applet style and the JDK1.6.0_10 and later
     JNLP Applets.  In this way, we can support pre-JDK1.6.0_10 installs.
     See https://jdk6.dev.java.net/plugin2/jnlp/ -->
<APPLET 
   code = "ptolemy.vergil.VergilApplet"
   codebase = "../../../../.."
   archive = "ptolemy/domains/sdf/demo/FixFIR/FixFIR.jar,ptolemy/data/data.jar,ptolemy/ptsupport.jar,ptolemy/domains/sdf/sdf.jar,lib/diva.jar,ptolemy/domains/modal/modal.jar,ptolemy/domains/fsm/fsm.jar,ptolemy/domains/ct/ct.jar,ptolemy/vergil/vergilApplet.jar"
   width = "100"
   height = "100"
   >
  <!-- PARAM name="jnlp_href" value="ptolemy/domains/sdf/demo/FixFIR/FixFIR.jnlp" -->
<PARAM NAME = "commandLineArguments" VALUE = "-ptinyViewer FixFIR.xml">
  <PARAM NAME = "NAME" VALUE = "FixFIR" >
  <PARAM NAME = "background" VALUE = "#ffffff" >
  <PARAM NAME = "controls" VALUE = "buttons" >
  <PARAM NAME = "orientation" VALUE = "vertical" > \
  <PARAM NAME = "modelURL" VALUE = "FixFIR.xml" > \
  <a href="FixFIR.xml">MoML specification for this model.</a> \
</APPLET>
<!-- /PT JNLP APPLET CONVERTER -->
</center>
</p>
<p>This model exploits the fact that the FIR filter actor is data polymorphic
to feed it fixed-point numbers and fixed-point coefficients.
The magnitude transfer function is calculated for three scenarios.
The "exact" scenario uses double-precision floating point computations
throughout.  The "fixed point" scenario uses fixed-point computations,
with 6 bits total, of which 2 bits are integer bits.  The "quantized
coefficients" scenario quantizes the coefficients to 8 bits total,
of which 2 are integer bits, but then
performs all calculations using double-precision floating
point.</p>
</BODY>
</HTML>
