<!-- $Id$ -->

<html>

<head>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<title>Ptolemy II CT Domain Signal Types</title>
<link href="../../../../doc/default.css" rel="stylesheet" type="text/css">
</head>
<body>

<h1>Signal Types</h1>
<p><b>Note that as of 1/2010, the CT domain has been replaced by the Continuous domain</b>.  Thus, if you use the Continuous domain, you can avoid the issue below of signal types.</p>
<p>
The CT domain of Ptolemy II supports continuous time 
mixed-signal modeling. As a consequence, there could be two types of signals in 
a CT model: continuous signals and discrete events. Note that for both types of 
signals, time is continuous. These two types of signals directly affect the 
behavior of a receiver that contains them. A continuous CTReceiver contains a 
sample of a continuous signal at the current time. Reading a token from that 
receiver will not consume the token. A discrete CTReceiver may or may not 
contain a discrete event. Reading from a discrete CTReceiver with an event will 
consume the event, so that events are processed exactly once. Reading from an 
empty discrete CTReceiver is not allowed. </p>
<p>
Note that some actors can be used to compute on both 
continuous and discrete signals. For example, an adder can add two continuous 
signals, as well as two sets of discrete events. Whether a particular link among 
actors is continuous or discrete is resolved by a 
<i>signal type system</i>. The signal type system understands signal types on 
specific actors (indicated by the interfaces they implement or the parameters 
specified on their ports), and try to resolve signal types on the ports of 
domain polymorphic actors. </a></p>

<p>The signal type system in the CT domain works on a simple 
lattice of signal types, shown in the follwoing Figure. 
<P align="center">
<img src="ct_lattice.gif">

<P>
A type lower in the lattice is 
more specific than a type higher in the lattice. A CT model is <i>well-defined
</i>and executable, if and only if all ports are resolved to either CONTINUOUS 
or DISCRETE. Some actors have their signal types fixed. For example, an Integrator
has a CONTINUOUS input and a CONTINUOUS output; a 
PeriodicSampler has a 
CONTINUOUS input and a DISCRETE output; a TriggeredSampler has one 
CONTINUOUS input (the input), one DISCRETE input (the trigger), and a DISCRETE 
output; and a ZeroOrderHold has a DISCRETE input and a CONTINUOUS output. 
For domain polymorphic actors that implement the SequenceActor interface, 
i.e. they operate solely on sequences of tokens, their inputs and 
outputs are treated as DISCRETE. For other domain polymorphic actors that can 
operate on both continuous and discrete signals, the signal type on their ports 
are initially UNRESOLVED. The signal type system will resolve and check signal 
types of ports according to the following two rules:

<ol>
  <li>If a port <i>p</i> is connected to 
  another port <i>q</i> with a more specific type, then the type of <i>p</i> is 
  resolved to that of the port <i>q</i>. If <i>p</i> is CONTINUOUS but <i>q</i> 
  is DISCRETE, then both of them are resolved to NOT-A-TYPE.
  <li>Unless otherwise specified, the types of the input ports 
  and output ports of an actor are the same.
</ol>
<p>
At the end of the signal-type resolution, if any port is of 
type UNRESOLVED or NOT-A-TYPE, then the topology of the system is illegal, and 
the execution is denied.
<p>
The signal type of a port can also be forced by adding an 
parameter &quot;signalType&quot; to the port. The signal type system will recognize this 
parameter and resolve other types accordingly. To add this parameter, right 
click on the port, select Configure, then add a parameter with the name 
signalType and the value of a string of either &quot;CONTINUOUS&quot; or &quot;DISCRETE&quot;, 
noting the quotation marks.</p>
<p>
Signal types may be more trickier at the boundaries of 
composite actors than within a CT model. Because of the information hiding, it 
may not be obvious which port of another level of hierarchy is continuous and 
which port is discrete. In the CT domain, we follow these rules to resolve 
signal types for composite ports:</p>
<ul>
  <li>A TypedCompositeActor within a CT model is always treated 
  as entirely discrete. Within a CT model, for any opaque composite actor that 
  may contain continuous dynamics at a deeper level, use the CTCompositeActor
  (listed in the actor library as &quot;continuous 
  time composite actor&quot; in domain specific actors) or the modal model composite 
  actor.
  <li>For a CTCompositeActor or a modal model within a CT model, all 
  its ports are treated as continuous by default. To allow a discrete event 
  going through the composite actor boundary, manually set the signal type of 
  that port by adding the signalType parameter.
  <li>For a TypedCompositeActor <i>containing</i>a CT model, all the ports of the
  TypedCompositeActor are treated as discrete, and the CT 
  director to use is the CTMixedSignalDirector (listed as CTDirector in the 
  vergil director library).
  <li>For a CTCompositeActor or a modal model <i>containing</i>
  a CT model, all the signal types of the ports of the container are treated as 
  continuous, and can be set by adding the signalType parameter. The CTDirector 
  to use in this situation is the CTEmbeddedDirector.
</ul>

</body>

</html>
