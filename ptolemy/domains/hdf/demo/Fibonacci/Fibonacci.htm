<!-- : $Id$
 -->
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<link href="../../../../../doc/default.css" rel="stylesheet" type="text/css">
<TITLE>Fibonacci</TITLE>
</HEAD>
<BODY>
<H1>Fibonacci</H1>
<P>

<P>
<!-- PT DEPLOYJAVA CONVERTER -->
<p>
Fibonacci is available in two formats:
<ul>
  <li> As a Web Start Application: 
<!-- See http://blogs.sun.com/thejavatutorials/entry/deployment_toolkit_101 -->
<script src="../../../../../doc/deployJava.js"></script>
<script >
    var dir = location.href.substring(0,location.href.lastIndexOf('/')+1);
    var url = dir + "Fibonacci.jnlp";
    deployJava.createWebStartLaunchButton(url);
</script>
 <li> As an <a href="FibonacciVergil.htm">applet</a>.
</ul>  
The Java Web Start version is preferred, though browsers with versions of Java
earlier than Java 1.6.0_13 may only work with the applet version.
See <a href="../../../../../doc/webStartHelp.htm">Web Start Help</a> for details.
<!-- /PT DEPLOYJAVA CONVERTER -->
</p>
<p>This model demonstrates HDF, which has static scheduling like SDF,
but allows production and consumption rates to vary dynamically.
In this example, the factor parameter of a DownSample actor is
varied over the course of execution of the model. The HDF director
calculates a new schedule each time the downsampling rate is
changed. The model produces a Fibonacci sequence.</p>

<p>In a Fibonacci sequence, each number is the sum of the previous two
numbers. One way to generate such a sequence is to extract the
Fibonacci numbers from a counting sequence (the natural numbers)
by sampling each number that is a Fibonacci number. This can be
done by a DownSample actor where the n-th Fibonacci number is generated
by downsampling with a factor given by the (n-2)th Fibonacci number.</p>
</BODY>
</HTML>
