<!-- $Id$ -->
<html>
<head>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<title>CSP Hardware Bus Contention Demo</title>
<link href="../../../../../doc/default.css" rel="stylesheet" type="text/css">
</head>
<body>
<h1>CSP Hardware Bus Contention Demo</h1>
<p>
The following applet uses the Ptolemy II CSP domain to model resource
contention. The model shows the use of timed CSP to deterministically
handle nondeterministic events.
<p>
 <!-- All of the controls of the applet should be visible when the
applet is displayed on a XGA screen-->
<center>
<!-- The HTML below is for the Java Plugin.  The first
     section is for IE, the second is for Netscape
 -->
        <applet 
            code = "ptolemy.domains.csp.demo.BusContention.BusContentionApplet" 
            codebase = "../../../../.." 
            archive = "ptolemy/ptsupport.jar,lib/diva.jar,ptolemy/domains/csp/demo/BusContention/BusContention.jar,ptolemy/domains/csp/csp.jar" 
            width = "500" 
            height = "500" 
            > 
            <param name="NAME" value="BusContentionApplet" > 
	    <param name="background" value="#ffffff" > 
            <I>If you were able to run applets, you would have a demo here.</I> 
        </applet> 
</center>

<B>Applet Description:</B>
<p>
The applet consists of a controller, three processors and a memory block.
At randomly selected points in time, each processor can request permission
from the controller to access the memory. The processors each have priorities
associated with them, and in cases where there is a simultaneous memory
access request, the controller grants permission to the processor with the
highest priority.
<p>
All communication between actors in a CSP model of computation occurs via
<I>rendezvous</I>. Rendezvous is an atomic form of communication.
This model uses a timed extension to CSP, so each rendezvous logically
occurs at a specific point in time.
<p>
Because
of the atomic nature of rendezvous, when the controller receives a request
for access, it cannot know whether there is another, higher priority
request pending at the same time. To overcome this difficulty, an
alarm is employed.
The alarm is started by the controller immediately following the first
request for memory access. It is awakened when time is ready to advance
(the model blocks on delays).  This
indicates to the controller that no more memory requests will occur at the
given point in time. Hence, the alarm uses centralized time
to make deterministic an inherently non-deterministic activity.
<p>
In the applet, each of the initially blue processors (the circular
nodes) can be in one of three states. The color yellow indicates that a
processor is in state 1 and is waiting for the controller to give it permission
to access memory. The color green indicates that a processor has been granted
permission to access memory. The color red indicates that the processor has
been denied memory access.
<p>
This applet consists of four types of actors:
<UL>
    <LI><A HREF="Memory.java">Memory.java</A>
    <LI><A HREF="Processor.java">Processor.java</A>
    <LI><A HREF="Controller.java">Controller.java</A>
    <LI><A HREF="ContentionAlarm.java">ContentionAlarm.java</A>
</UL>
The applet code is implemented via:
<UL>
    <LI>
    <A HREF="BusContentionApplet.java">BusContentionApplet.java</A>
</UL>
<p>
</body>
</html>
