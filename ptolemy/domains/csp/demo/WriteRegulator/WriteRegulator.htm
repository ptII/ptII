<!-- : $Id$
 -->
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<link href="../../../../../doc/default.css" rel="stylesheet" type="text/css">
<TITLE>WriteRegulator</TITLE>
</HEAD>
<BODY>
<H1>WriteRegulator</H1>
<P>

<P>
<!-- PT DEPLOYJAVA CONVERTER -->
<p>
WriteRegulator is available as:
<ul>
<!-- See http://blogs.sun.com/thejavatutorials/entry/deployment_toolkit_101 -->
<script src="../../../../../doc/deployJava.js"></script>
<script >
    var dir = location.href.substring(0,location.href.lastIndexOf('/')+1);
    var url = dir + "WriteRegulator.jnlp";
    deployJava.createWebStartLaunchButton(url);
</script>
 <li>An <a href="WriteRegulatorVergil.htm">applet</a>.
</ul>  
<script>

deployJava.displayWebStartMessage("../../../../../"); </script>
<!-- /PT DEPLOYJAVA CONVERTER -->
</p>
<p>This model illustrates a design pattern with
CSP called a "write regulator." In this example,
the Ramp is sending an increasing sequence of
integers to the Display. However, the transfer
is constrained to occur only when the Sleep actor
reads inputs, because in the CSP domain, sending
data to multiple recipients via a relation is
accomplished via a multi-way rendezvous.
The Sleep actor reads data, then sleeps an amount
of time given by its bottom input before reading
the next input data token. In this case, it will
wait a random amount of time between 0 and 2 seconds
(0 and 2000 milliseconds) between input readings.
This has the side effect of constraining the transfers
from the Ramp to the Display to occur with the same
random intervals.</p>
</BODY>
</HTML>
