<!-- : $Id$
 -->
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<link href="../../../../../doc/default.css" rel="stylesheet" type="text/css">
<TITLE>Barrier</TITLE>
</HEAD>
<BODY>
<H1>Barrier</H1>
<P>

<P>
<!-- PT DEPLOYJAVA CONVERTER -->
<p>
Barrier is available as:
<ul>
<!-- See http://blogs.sun.com/thejavatutorials/entry/deployment_toolkit_101 -->
<script src="../../../../../doc/deployJava.js"></script>
<script >
    var dir = location.href.substring(0,location.href.lastIndexOf('/')+1);
    var url = dir + "Barrier.jnlp";
    deployJava.createWebStartLaunchButton(url);
</script>
 <li>An <a href="BarrierVergil.htm">applet</a>.
</ul>  
<script>

deployJava.displayWebStartMessage("../../../../../"); </script>
<!-- /PT DEPLOYJAVA CONVERTER -->
</p>
<p>This model illustrates a design pattern with CSP
called a "barrier synchronization." In this example,
the two Ramps are sending increasing sequences of
integers to the Displays. However, the transfer
is constrained to occur only when the Barrier actor
reads inputs. Thus, a multi-way rendezvous between the
two Ramp actors, the two Display actors, and the Barrier
actor constrains the two transfers to the Display actors
to occur simultaneously.  The Barrier actor, after
reading inputs, will rendezvous with the Sleep actor
connected to its output.  This sleep actor will sleep
a random amount of time after reading its input, and
during that time will not accept additional inputs.
Thus, after the first two transfers to the Display
actors (why two?) the time between transfers is
controlled by the Sleep actor.</p>
</BODY>
</HTML>
