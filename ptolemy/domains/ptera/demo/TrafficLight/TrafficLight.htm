<!-- : $Id$
 -->
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<link href="../../../../../doc/default.css" rel="stylesheet" type="text/css">
<TITLE>TrafficLight</TITLE>
</HEAD>
<BODY>
<H1>TrafficLight</H1>
<P>

<P>
<!-- PT DEPLOYJAVA CONVERTER -->
<p>
TrafficLight is available as:
<ul>
<!-- See http://blogs.sun.com/thejavatutorials/entry/deployment_toolkit_101 -->
<script src="../../../../../doc/deployJava.js"></script>
<script >
    var dir = location.href.substring(0,location.href.lastIndexOf('/')+1);
    var url = dir + "TrafficLight.jnlp";
    deployJava.createWebStartLaunchButton(url);
</script>
 <li>An <a href="TrafficLightVergil.htm">applet</a>.
</ul>  
<script>

deployJava.displayWebStartMessage("../../../../../"); </script>
<!-- /PT DEPLOYJAVA CONVERTER -->
</p>
<p>This hierarchical model demonstrates a traffic light system with DE (Discrete Event) and Ptera
(Ptolemy Event Relationship Actor). The DE model simulates an execution environment, which
randomly triggers errors. The traffic light switches into error mode on receiving an error event
(generated by the PoissonClock), and the yellow light flashes. After 10 units of model time, the
traffic light recovers and resumes its function.</p>

<p>This model illustrates a
typical design pattern
where the top level is a
DE model of the physical
environment for a system 
under design. The next
level down is a modal 
model fashioned after the
statecharts model at the 
right.  Open the 
TrafficLight actor to see 
how it is implemented.</p>

<p>The PoissonClock actor
occassionally injects an
Error signal. The Error
condition then lasts 5
seconds, as determined by
the TimedDelay actor.</p>
</BODY>
</HTML>
