<!-- : $Id$
 -->
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<link href="../../../../../doc/default.css" rel="stylesheet" type="text/css">
<TITLE>Barrier</TITLE>
</HEAD>
<BODY>
<H1>Barrier</H1>
<P>

<P>
<!-- PT DEPLOYJAVA CONVERTER -->
<p>
Barrier is available in two formats:
<ul>
  <li> As a Web Start Application: 
<!-- See http://blogs.sun.com/thejavatutorials/entry/deployment_toolkit_101 -->
<script src="../../../../../doc/deployJava.js"></script>
<script >
    var dir = location.href.substring(0,location.href.lastIndexOf('/')+1);
    var url = dir + "Barrier.jnlp";
    deployJava.createWebStartLaunchButton(url);
</script>
 <li> As an <a href="BarrierVergil.htm">applet</a>.
</ul>  
The Java Web Start version is preferred, though browsers with versions of Java
earlier than Java 1.6.0_13 may only work with the applet version.
See <a href="../../../../../doc/webStartHelp.htm">Web Start Help</a> for details.
<!-- /PT DEPLOYJAVA CONVERTER -->
</p>
<p>This model illustrates a design pattern with rendezvous
called a "barrier synchronization." In this example, the
two Ramps are sending increasing sequences of integers
to the Displays. However, the transfer is constrained to
occur only when both the Barrier actor and the Sleep
actor read inputs. Thus, a multi-way rendezvous between
the two Ramp actors, the two Display actors, the Barrier
actor, and the Sleep actor constrains the two transfers
to the Display actors to occur simultaneously.  The
Sleep actor will sleep a random amount of time after
reading its input, and during that time will not accept
additional inputs. Thus, after the first two (why two?)
transfers to the Display actors the time between
transfers is controlled by the Sleep actor.</p>
</BODY>
</HTML>
