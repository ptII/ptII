<!-- : $Id$
 -->
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<link href="../../../../../doc/default.css" rel="stylesheet" type="text/css">
<TITLE>SmartParking</TITLE>
</HEAD>
<BODY>
<H1>SmartParking</H1>
<!-- PT DEPLOYJAVA CONVERTER -->
<p>
SmartParking is available as:
<ul>
<!-- See http://blogs.sun.com/thejavatutorials/entry/deployment_toolkit_101 -->
<script src="../../../../../doc/deployJava.js"></script>
<script >
    var dir = location.href.substring(0,location.href.lastIndexOf('/')+1);
    var url = dir + "SmartParking.jnlp";
    deployJava.createWebStartLaunchButton(url);
</script>
 <li>An <a href="SmartParkingVergil.htm">applet</a>.
</ul>  
<script>

deployJava.displayWebStartMessage("../../../../../"); </script>
<!-- /PT DEPLOYJAVA CONVERTER -->
</p>
<p>Sensors placed in a parking lot can be used to collect data (including which parking spot is taken, 
how long a car has parked on a spot). The parking lot can process the collected data and provide 
some services to clients to guide their parking. This demo illustrates these ideas. The dots are 
sensors on the parking spots. We use green color to indicate the spot is free and red to indicate 
the spot is taken. When a sensor detects a car arriving or leaving a spot, it sends an update to the 
server of the parking lot, which collects and processes sensor updates to provide information to 
parking clients. The "car model" component models when a car arrives or leaves, and where to 
park based on the information the server provides. It is a abstraction for all the cars dynamics 
during a specific time. The components in the upper right corner represent the server function, 
which receives sensor data and provides information the clients. The "signal light" component 
indicates whether the parking lot is full (using red) or not (using green).</p>

</BODY>
</HTML>
