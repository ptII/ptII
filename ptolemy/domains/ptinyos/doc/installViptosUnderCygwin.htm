<!-- $Id$ -->
<html>
<head>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<title>Ptolemy II PtinyOS Domain Installation Notes for Cygwin</title>
<link href="../../../../doc/default.css" rel="stylesheet" type="text/css">
</head>
<body>
<h1>Ptolemy II PtinyOS Domain Installation Notes for Cygwin</h1> 

These are the quick instructions for setting up the Ptolemy II PtinyOS
domain.  If you have problems, please see the general
<a href="installation.htm">Ptolemy II PtinyOS Domain Installation Notes</a>
page.

<ol>
<li> Follow the 
<a href="http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIlatest/cygwin.htm">Ptolemy II Cygwin Installation instructions</a> and download the Cygwin devel tools
and install them.


<li> Under Windows, you will need to edit you jni_md.h file

 <ol>
 <li> Edit the file <code><i>&lt;jdk_root</i>&gt;/include/win32/jni_md.h</code>,
 Where <code><i>jdk_root</i></code> is the installation root (eg.,
 <code>c:/Program Files/Java/jdk1.5.0_01</code>
 <li> Replace the segment:
 </ol>

 <pre>
 typedef __int64 jlong;
 </pre>
 with:
 <pre>
 #ifdef __GNUC__
 typedef long long jlong;
 #else
 typedef __int64 jlong;
 #endif
 </pre>

<li> Make sure that <code>/usr/local/bin</code>
              is in your path before <code>/usr/bin</code>. 

              <br>Under Cygwin, the easiest way to add
              <code>/usr/local/bin</code> to your path is to edit
              <code>$HOME/.bashrc</code> and add
	    <pre>
PATH=/usr/local/bin:${PATH}
            </pre>

	    Another way is via the System control panel (For details,
	    see <a
              href="http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIlatest/ptII/doc/install.htm#settingptII">Set
              the value of the PTII environment variable</a>).
	     <p>If you set your path using the System control panel, then
	add <CODE>c:\cygwin\usr\local\bin;</CODE> to your PATH.
	Note that you need to use backslashes here.

<p>
<li> Download the WinAVR tools:
   <ol> 
          <li>Download 
	  <a href="http://ptolemy.eecs.berkeley.edu/viptos/viptos1.0/WinAVR-20040404-bin-install.exe"><code>WinAVR-20040404-bin-install.exe</code></a>
                  <li>Install WinAVR in any directory, <code>C:\WinAVR</code>
		  is preferred, directories with spaces in the pathname might not work?</i>
                </ol>
        
<p>
<li>Set the <code>PTII</code> environment variable
        to be the location of your Viptos download.
	Under Windows, use forward slashes.  For example
	<code>c:/viptos</code>.  This file should be found at
	<code>$PTII/ptolemy/domains/ptinyos/doc/installViptosUnderCygwin.htm</code>
	<p> Under Cygwin bash, either do
	<pre>
	export PTII=<i>where Viptos is located</i>
	</pre>
	for example:
	<pre>
	export PTII=c:/viptos
	</pre>
	or use the System control panel (For details,
	    see <a
              href="http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIlatest/ptII/doc/install.htm#settingptII">Set the value of the PTII environment variable</a>)/.

<p>
<li>To get the new environment variables start a new Cygwin shell
<li>Make a directory into which to store the source code for
      TinyOS 1.x and nesC:
        <pre>
mkdir -p $PTII/vendors/ptinyos
        </pre>

<p>Note that the value of <CODE>$PTII</CODE> should not have spaces in it.
<p>        
<li> Install nesC from a .tar.gz distribution
    <ol> 
      <li>Download 
	  <a href="http://ptolemy.eecs.berkeley.edu/viptos/viptos1.0/nesc-1.2.7a.tar.gz"><code>nesc-1.2.7a.tar.gz</code></a>
      to <CODE>$PTII/vendors/ptinyos</CODE>
        
      <li> Unzip and untar the nesc .tar.gz file:
        <pre>
cd $PTII/vendors/ptinyos
gunzip nesc-1.2.7a.tar.gz
tar xf nesc-1.2.7a.tar  
        </pre>
        This should create a directory called <code>nesc-1.2.7a</code>.

      <li> Change to the newly created directory.
        <pre>
cd nesc-1.2.7a
        </pre>

       <li><a name="configurenesC">Configure nesc:</a>
      <pre>
./configure
      </pre>

    </li>

    <li>Install nesc:
      <pre>
make
make install
      </pre>
      
    </li>

    <li>Under Windows with WinAVR-20040404, we had to copy
      <code>c:/cygwin/usr/local/lib/ncc/</code> to
      <code>c:/usr/local/lib/ncc/</code>:
      <pre>
mkdir -p c:/usr/local/lib
cd c:/usr/local/lib
cp -r /usr/local/lib/ncc .
      </pre>
      The reason is that Cygwin mounts directories under
      </code>c:/cygwin</code> and the WinAVR binaries don't know how
      to handle that.

      <p>Under Windows with WinAVR-20040404, we also had to modify <code>c:\usr\local\lib\ncc\nesc_nx.h</code> so that 
<pre>
#include &lt;inttypes.h&gt;
</pre>
is changed to 
<pre>
#include &lt;sys/types.h&gt;
</pre>
Otherwise, when we try to compile nesC applications, the compiler
complains that it cannot find the file.
    </li>
<p>
</ol>

    <li> We have put into the TinyOS 1.x makefiles a rule that you can
    run to create all the TinyOS libraries in one step. To use this,
    as of this writing, you need to get TinyOS 1.x from the CVS
    repository rather than getting the packaged install version. To do
    this, type:
      
      <pre>
cd $PTII/vendors/ptinyos
cvs -d:pserver:anonymous@tinyos.cvs.sourceforge.net:/cvsroot/tinyos login 
<i>Hit Enter when prompted for a password</i>
cvs -z3 -d:pserver:anonymous@tinyos.cvs.sourceforge.net:/cvsroot/tinyos co -P tinyos-1.x
      </pre>
     <b>OR</b>
     <i>We've made a zipped version of the tinyos-1.x cvs repository available
     for archival purposes.</i>
     <ol> 
     <li> Download 
	  <a href="http://ptolemy.berkeley.edu/viptos/viptos1.0/tinyos-1.x-2007-01-17.zip"><code>tinyos-1.x-2007-01-17.zip</code></a>
     <li> Unzip it in <code>$PTII/vendors/ptinyos</code>
     </ol>

      Either method will create a directory <code>tinyos-1.x</code>.  For more
        information about cvs and tinyos-1.x, see <a
        href="http://sourceforge.net/cvs/?group_id=28656#in_browser"><code>http://sourceforge.net/cvs/?group_id=28656</code></a>.
    </li>

    <li> <a name="environmentVariables">Set up the necessary
    environment variables.</a> TOSROOT sets the location of the TinyOS
    source tree.  TOSDIR sets the <code>tos</code> subdirectory in the TinyOS source
    tree.  PTINYOS_MOMLROOT sets the MoML output directory.

      <ul>
        <li>Under Windows with Cygwin, you can permanently set
        environment variables from the System control panel. (For
        details, see <a href="http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIlatest/ptII/doc/install.htm#settingptII">Set the value of the PTII environment variable</a>).

          <p>
            Go to Start Menu -&gt; Settings -&gt; Control Panels -&gt; System -&gt; Advanced -&gt; Environment Variables.
            <br>
            Set <code>TOSROOT</code> to <code>%PTII%/vendors/ptinyos/tinyos-1.x</code>
            <br>
            Set <code>TOSDIR</code> to <code>%PTII%/vendors/ptinyos/tinyos-1.x/tos</code>
            <br>
            Set <code>PTINYOS_MOMLROOT</code> to <code>%PTII%/vendors/ptinyos/moml</code>

          <p> Note: If you are using Cygwin, and configure has trouble
          finding <code>TOSROOT</code> or <code>TOSDIR</code>, try
          expanding your <code>$PTII</code> environment variable to
          <code>/cygdrive/c/ptII</code> or something similar.  Also
          try expanding the <code>TOSROOT</code> and
          <code>TOSDIR</code> environment variables if you still have
          problems.

      </ul>
    </li>
    <li> If you set the environment variables via the System control
    panel, start up a new Cygwin bash shell so that you see the new
    variables.

    <li> <a name="reconfigureViptos">Reconfigure Viptos</a> (or Ptolemy II) to recognize the new paths:
        <pre>
cd $PTII
./configure
        </pre>
      </li>

    <li> Compile:
<pre>
make
</pre>
    <li> Configure and install the TinyOS 1.x nesC tools.
      
      <pre>
cd $TOSROOT/tools/src/ncc
./Bootstrap
./configure
      </pre>
        

      <pre>
make
make install
      </pre>

    </li>

    <li> See if you have installed TinyOS 1.x and nesC correctly:
      <pre>
cd $TOSROOT/apps/Blink
make pc
./build/pc/main.exe 1
      </pre>
      
      The Blink application should successfully compile.  When running
      the executable, you should see TOSSIM output.  See
      $TOSROOT/doc/tutorial/lesson5.html or the <a
      href="http://www.tinyos.net/tinyos-1.x/doc/tutorial/lesson5.html">
      online version of tutorial lesson 5</a> for more information.
    </li>

    <li> Unzip the pre-generated libraries:
      <pre>
cd $PTII/vendors/ptinyos
cat $PTII/ptolemy/domains/ptinyos/util/nc2moml/nc2moml-tinyos-1.1.15Dec2005cvs-1.tar.gz | gunzip | tar -xvf -
      </pre>
      This will create <CODE>$PTII/vendors/ptinyos/moml</CODE> and contains the MoML libraries corresponding to the Dec 2005 TinyOS RPM release.  

<p>If you want to generate the MoML library files from scratch, see $PTII/ptolemy/domains/ptinyos/util/nc2moml/index.htm
    </li>

    <li> Unzip the pre-generated applications:
      <pre>
cd $PTII/vendors/ptinyos
cat $PTII/ptolemy/domains/ptinyos/util/ncapp2moml/ncapp2moml-tinyos-1.1.15Dec2005cvs-1.tar.gz | gunzip | tar -xvf -
      </pre>
      This will create <CODE>$PTII/vendors/ptinyos/momlapp</CODE> and contains the MoML applications corresponding to the Dec 2005 TinyOS RPM release.  

<p>If you want to generate the MoML application files from scratch, see $PTII/ptolemy/domains/ptinyos/util/ncapp2moml/index.htm
    </li>

    <li> Run <code>$PTII/bin/viptos</code> and run one of the demos.
      <br>You should see messages on stdout and eventually the images of
      the motes should blink
    </li>

  </ol>

</body>
</html>
