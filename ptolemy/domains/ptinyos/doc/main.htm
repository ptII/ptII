<!-- $Id$ -->
<html>
<head>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<title>Ptolemy II PtinyOS Domain</title>
<link href="../../../../doc/default.css" rel="stylesheet" type="text/css">
</head>
<body>
<h1>Ptolemy II PtinyOS Domain</h1> 

<p>Viptos is an integration of a collection of Ptolemy II domains and
<a href="http://www.tinyos.net/" target="_top">TinyOS</a>.  The main
domain behind Viptos is the PtinyOS domain, which supports the
construction and simulation of programs in <a
href="http://nescc.sourceforge.net#in_browser"
target="_top">nesC</a>.

The nesC web page at <a href="http://nescc.sourceforge.net#in_browser"
target="_top">http://nescc.sourceforge.net</a> describes nesC as
<blockquote>
&quot;an extension to the C programming
language designed to embody the structuring concepts and execution
model of TinyOS. TinyOS is an event-driven operating system designed
for sensor network nodes that have very limited resources (e.g., 8K
bytes of program memory, 512 bytes of RAM).&quot;
</blockquote>

<p>The PtinyOS domain leverages existing nesC libraries, using a tool
called nc2moml to create the Ptolemy II libraries of components that
are used to assemble models. Models are converted into nesC code by
the PtinyOSDirector. TinyOS provides a rich library of nesC
components. If you install TinyOS 1.x in $PTII/vendors/ptinyos, then
the Ptolemy II configure script will find it and automatically make
the TinyOS libraries available.</p>

<p>In order to leverage another existing library of nesC components,
you have to run nc2moml on that library.</p> 

<p>Below are the detailed instructions for:</p>

    <ul>
      <li><a href="installation.htm">Installing</a> the tools needed to run the Viptos demos.</li>
      <li>Running simple code generation demos using built-in demo Ptolemy II library of nesC components.</li>
      <li><a href="../util/nc2moml/index.htm">Setting up and running nc2moml</a> to generate the Ptolemy II library of nesC components.

</body>
</html>
