<!-- $Id$ -->
<html>
<head>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<title>Ptolemy II PtinyOSDirector Control Flow</title>
<link href="../../../../doc/default.css" rel="stylesheet" type="text/css">
</head>
<body>
<h1>Ptolemy II PtinyOSDirector Control Flow</h1> 

<p> Below are tables that show the sequence of calls between Java and C when the PtinyOSDirector is used in simulation mode in Viptos.  The PtinyOSDirector uses a Java PtinyOSLoader class for each instance of TOSSIM to keep the namespace separate for each TinyOS node in the model.  <i>unique_name</i> is used in native method names to maintain separate namespaces.  All calls that cross the Java / C (and C / Java) boundary are JNI calls.

<p> A JNI call from TOSSIM to the Java PtinyOSLoader class (_loader) refers to a call from the C code in TOSSIM to the Java PtinyOSLoader class associated with that instance of TOSSIM.  The same is true for a JNI call from the Java PtinyOSLoader class to TOSSIM.

<p> A Java call from PtinyOSDirector to the Java PtinyOSLoader class refers to a call from the Java code in PtinyOSDirector to the Java PtinyOSLoader class associated with that instance of PtinyOSDirector.  The same is true for a Java call from the Java PtinyOSLoader class to the PtinyOSDirector.

<p>See:
<pre>
<b>$PTII/ptolemy/domains/ptinyos/kernel/PtinyOSDirector.java</b> <b><i>(Start here)</i></b>
$PTII/ptolemy/domains/ptinyos/kernel/PtinyOSLoader.java
</pre>

<b>and</b>

<pre>
$TOSROOT/contrib/ptII/ptinyos/tos/platform/ptII/adc_model.c
$TOSROOT/contrib/ptII/ptinyos/tos/platform/ptII/event_queue.c
$TOSROOT/contrib/ptII/ptinyos/tos/platform/ptII/external_comm.c
$TOSROOT/contrib/ptII/ptinyos/tos/platform/ptII/external_comm.h
$TOSROOT/contrib/ptII/ptinyos/tos/platform/ptII/Nido.nc
$TOSROOT/contrib/ptII/ptinyos/tos/platform/ptII/nido.h
<b>$TOSROOT/contrib/ptII/ptinyos/tos/platform/ptII/ptII.c</b> <b><i>(Start here)</i></b>
$TOSROOT/contrib/ptII/ptinyos/tos/platform/ptII/rfm_model.c

$TOSROOT/contrib/ptII/ptinyos/beta/TOSSIM-packet/Nido.nc
$TOSROOT/contrib/ptII/ptinyos/beta/TOSSIM-packet/nido.h
$TOSROOT/contrib/ptII/ptinyos/beta/TOSSIM-packet/packet_sim.c

$TOSROOT/contrib/ptII/ptinyos/tos/types/dbg.h
</pre>

<p>
<hr>
<p>

<TABLE border="1"
          summary="This table gives a sequence diagram for the calls between Java and C in the PtinyOSDirector">
          <CAPTION><EM>Initialization: Starting the PtinyOSDirector</EM></CAPTION>
          <TR><TH>Java (PtinyOSDirector)
              <TH>Java (PtinyOSLoader)
              <TH>C (TOSSIM)

<TR>
<TD>PtinyOSDirector.preinitialize()
    <ul>
        <li>Generates nesC code (.nc), makefile, and Java PtinyOSLoader (.java).
        <li>Runs make, using Runtime.exec() 
        <li>Compiles nesC (.nc) code to a TOSSIM shared object (.so or .dll), and the Java PtinyOSLoader (.java) to a Java PtinyOSLoader class (.class).
    </ul>   
<TD> - 
<TD> - 

<TR>
<TD>PtinyOSDirector.initialize()
    <ul>
        <li>Loads Java PtinyOSLoader class into memory using ClassLoader.loadClass()
        <li>Creates instance of PtinyOSLoader class (_loader), using Class.newInstance()
        <li>Calls Java _loader.load()
    </ul> 
<TD> -
<TD> - 

<TR>
<TD> - 
<TD> _loader.load() loads the TOSSIM shared object into memory, using Java System.load()
<TD> - 

<TR>
<TD>PtinyOSDirector.initialize(), <i>continued</i>
    <ul>
        <li>Calls Java _loader.main()
    </ul> 
<TD> - 
<TD> - 

<TR>
<TD> - 
<TD> _loader.main() calls JNI main_<i>unique_name</i>() native method.
<TD> - 

<TR>
<TD> -
<TD> - 
<TD> JNI main_<i>unique_name</i>() calls TOSSIM main(), which contains an initialization routine:
    <ul>
        <li>Call TOSSIM initializeSockets(), which calls TOSSIM ptII_startThreads(), which calls JNI _loader.startThreads()
    </ul> 

<TR>
<TD> - 
<TD> _loader.startThreads() creates Java threads and calls Java Thread.start() on each thread.
<TD> -

<TR>
<TD> - 
<TD> -
<TD> TOSSIM main() initialization routine, <i>continued</i>
    <ul>
        <li>Create bootup event and call TOSSIM ptII_queue_insert_event(), which calls JNI _loader.enqueueEvent()
    </ul> 

<TR>
<TD> - 
<TD> _loader.enqueueEvent() calls Java PtinyOSDirector.enqueueEvent()
<TD> -

<TR>
<TD> PtinyOSDirector.enqueueEvent()
    <ul>
        <li>Calls Java Ptolemy II fireAt() on the executive director (usually a DE Director), or this director if there is no executive director.
    </ul> 
<TD> - 
<TD> -

</TABLE>

<p>
<TABLE border="1"
          summary="This table gives a sequence diagram for the calls between Java and C in the PtinyOSDirector">
          <CAPTION><EM>Event processing in PtinyOSDirector and TOSSIM</EM></CAPTION>
          <TR><TH>Java (PtinyOSDirector)
              <TH>Java (PtinyOSLoader)
              <TH>C (TOSSIM)

<TR>
<TD> PtinyOSDirector.fire()
    <ul>
        <li>Calls Java _loader.processEvent()
    </ul> 
<TD> - 
<TD> -


<TR>
<TD> - 
<TD> _loader.processEvent() calls JNI processEvent_<i>unique_name</i>() native method.
<TD> - 

<TR>
<TD> - 
<TD> - 
<TD> JNI processEvent_<i>unique_name</i>() calls TOSSIM ptII_fire(), which invokes a single iteration of the TOSSIM scheduler.  The TOSSIM scheduler processes a single TOSSIM event and runs tasks in the task queue.  Note that processing a TOSSIM event may cause events with the same time stamp to be created, and for additional TinyOS tasks to be created.  All events created in TOSSIM use the same event call sequence described above for the bootup event (see <i>ptII_queue_insert_event()</i>).
</TABLE>

<p>
<TABLE border="1"
          summary="This table gives a sequence diagram for the calls between Java and C in the PtinyOSDirector">
          <CAPTION><EM>Obtaining TOSSIM sensor values from Ptolemy II</EM></CAPTION>
          <TR><TH>Java (PtinyOSDirector)
              <TH>Java (PtinyOSLoader)
              <TH>C (TOSSIM)
<TR>
<TD> - 
<TD> - 
<TD> TOSSIM requests sensor value in TOSSIM generic_adc_read() by calling ptII_get_adc_value(), which calls JNI _loader.getCharParameterValue().

<TR>
<TD> - 
<TD> _loader.getCharParameterValue() calls Java PtinyOSDirector.getCharParameterValue().
<TD> - 

<TR>
<TD> PtinyOSDirector.getCharParameterValue() gets a double token from the requested PortParameter and converts it to a Java char and returns the value.
<TD> - 
<TD> - 

<TR>
<TD> - 
<TD> _loader.getCharParameterValue() returns the Java char value.
<TD> - 

<TR>
<TD> - 
<TD> - 
<TD> JNI _loader.getCharParameterValue() returns a JNI jchar value.  TOSSIM ptII_get_adc_value() converts the JNI jchar into a C unsigned short and returns the value to TOSSIM generic_adc_read() for use as the sensor (ADC) value.

</TABLE>

<p>
<TABLE border="1"
          summary="This table gives a sequence diagram for the calls between Java and C in the PtinyOSDirector">
          <CAPTION><EM>Transmitting LED or packet values from TOSSIM to Ptolemy II</EM></CAPTION>
          <TR><TH>Java (PtinyOSDirector)
              <TH>Java (PtinyOSLoader)
              <TH>C (TOSSIM)
<TR>
<TD> - 
<TD> - 
<TD> TOSSIM generates an LED or packet value and calls TOSSIM ptII_updateLeds() or TOSSIM ptII_send_packet(), both of which call JNI _loader.sendToPort() with the port name and value as string arguments.

<TR>
<TD> - 
<TD> _loader.sendToPort() calls Java PtinyOSDirector.sendToPort().
<TD> - 

<TR>
<TD> PtinyOSDirector.sendToPort() performs type conversion from a Java string to the appropriate Token type (depending on the type of the requested port), and sends the token to the requested port using the Java Ptolemy II Port.send() method.
<TD> -  
<TD> - 

</TABLE>

<p>
<TABLE border="1"
          summary="This table gives a sequence diagram for the calls between Java and C in the PtinyOSDirector">
          <CAPTION><EM>Transmitting packet values from Ptolemy II to TOSSIM</EM></CAPTION>
          <TR><TH>Java (PtinyOSDirector)
              <TH>Java (PtinyOSLoader)
              <TH>C (TOSSIM)
<TR>
<TD> PtinyOSDirector.receivePacket() called (e.g., by the fire() method of the container, which should be a PtinyOSCompositeActor, in response to a packet arriving at the packetIn port).  
    <ul>
        <li>Calls Java _loader.receivePacket() with the packet as a Java String argument.
    </ul>
<TD> - 
<TD> - 

<TR>
<TD> - 
<TD> _loader.receivePacket() calls JNI receivePacket_<i>unique_name</i>() native method with the packet as a Java String argument.
<TD> - 

<TR>
<TD> - 
<TD> - 
<TD> JNI receivePacket_<i>unique_name</i>() receives the packet as a JNI jstring argument and converts it into a C const char array.  It then calls TOSSIM ptII_receive_packet(), which copies the C const char array into a TOS_Msg data structure.  TOSSIM ptII_receive_packet() then calls TOSSIM ptII_insert_packet_event(), which creates a TOSSIM packet event.

</TABLE>

<p>
<TABLE border="1"
          summary="This table gives a sequence diagram for the calls between Java and C in the PtinyOSDirector">
          <CAPTION><EM>Transmitting debug messages from TOSSIM to Ptolemy II</EM></CAPTION>
          <TR><TH>Java (PtinyOSDirector)
              <TH>Java (PtinyOSLoader)
              <TH>C (TOSSIM)
<TR>
<TD> -
<TD> - 
<TD> TOSSIM generates a debug message in dbg() or dbg_clear(), both of which call TOSSIM ptII_dbg(), which calls JNI _loader.tosDebug().

<TR>
<TD> - 
<TD> _loader.tosDebug() calls Java PtinyOSDirector.tosDebug().
<TD> - 

<TR>
<TD> PtinyOSDirector.tosDebug() prints the debug message using the Java Ptolemy II _debug() method.
<TD> - 
<TD> - 

</TABLE>

<p>
<TABLE border="1"
          summary="This table gives a sequence diagram for the calls between Java and C in the PtinyOSDirector">
          <CAPTION><EM>Shutting down TOSSIM from Ptolemy II</EM></CAPTION>
          <TR><TH>Java (PtinyOSDirector)
              <TH>Java (PtinyOSLoader)
              <TH>C (TOSSIM)
<TR>
<TD> PtinyOSDirector.wrapup()
    <ul>
        <li>Calls Java _loader.wrapup()
    </ul>
<TD> - 
<TD> - 

<TR>
<TD> - 
<TD> _loader.wrapup() calls JNI wrapup_<i>unique_name</i>() native method.
<TD> -

<TR>
<TD> - 
<TD> - 
<TD> JNI wrapup_<i>unique_name</i>() calls TOSSIM shutdownSockets(), which:
    <ul>
        <li>Closes sockets.
        <li>Joins threads by calling TOSSIM ptII_joinThreads(), which calls JNI _loader.joinThreads().
    </ul>

<TR>
<TD> - 
<TD> _loader.joinThreads() calls Java Thread.join() on all threads created during initialization.  Returns Java int value of 0 upon success.
<TD> - 

<TR>
<TD> - 
<TD> - 
<TD> JNI _loader.joinThreads() returns jint value of 0 upon success, which is converted into a C int and returned by ptII_joinThreads().  If successful, TOSSIM execution stops.

</TABLE>

<hr>
<p>
TOSSIM also contains JNI wrapper calls to Java socket routines in the Java PtinyOSLoader and in the Java PtinyOSDirector.  We omit detailed discussion of these call sequence for these socket routines above, since they are not necessary for understanding the basics of the PtinyOS domain.  The wrappers for the socket routines are similar for the wrappers in the Java PtinyOSLoader as discussed above.

<p>
Detailed list of socket routines:
<ul>
<li>acceptConnection()
<li>selectorClose()
<li>selectorCreate()
<li>selectorRegister()
<li>selectSocket()
<li>serverSocketClose()
<li>serverSocketCreate()
<li>socketChannelClose()
<li>socketChannelRead()
<li>socketChannelWrite()
</ul>
</body>
</html>
