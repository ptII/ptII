<!-- $Id$ -->
<html>
<head>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<title>Ptolemy II PtinyOS Domain Installation Notes</title>
<link href="../../../../doc/default.css" rel="stylesheet" type="text/css">
</head>
<body>
<h1>Ptolemy II PtinyOS Domain Installation Notes</h1> 

    Below are the complete instructions for installing the tools
    necessary for running the Viptos demos.

<p>If you are using Windows, see the short form of these instructions:
<a href="installViptosUnderCygwin.htm">Ptolemy II PtinyOS Domain Installation Notes for Cygwin</a> 

    <p> These installation instructions assume that you already have
    Viptos (or a release of Ptolemy II that includes the PtinyOS
    domain) installed.  Viptos is a configuration of Ptolemy II, which
    means that it contains a specialized subset of the domains in the
    full version of Ptolemy II.  If you already have the full version
    of Ptolemy II installed (i.e., your ptII installation includes the
    $PTII/ptolemy/domains/ptinyos directory), then you do not need to
    install a Viptos release, unless you are upgrading your version of
    Ptolemy II or Viptos.  In any case, if you want to use Viptos or
    Ptolemy II with Viptos capabilities, you need to follow the
    instructions below to install the necessary tools.

    <blockquote>
    <table border=1>
        <tr><td>
            <h3>Windows Notes</h3>
            <p>To invoke Viptos, we use $PTII/jni/launcher/launcher.exe.
              This tool solves problems with Cygwin and JNI.

            <p>Windows users should verify that JNI works before proceeding
              
            <pre>
cd /usr/bin
cp make.exe gmake.exe

cd $PTII
./configure
make

cd $PTII/jni/test
make
            </pre>

            You should see:
            <pre>
Failed: 0  Total Tests: 4  ((Passed: 4, Newly Passed: 0)  Known Failed: 0) C:/cxh/ptII/jni/test
            </pre>

            <p><b>If you are using Cygwin, and the above tests fail for you,
                then it is very unlikely that running a TinyOS model within Viptos
                (or Ptolemy II) will work.</b>

            <p>If the any of the tests above fail for you, Windows users and
              other users can still generate code by changing the
              PtinyOSDirector target from <code>ptII</code> to <code>pc</code>
              or some other TinyOS target like <code>mica</code> or <code>mica
                install</code>.  See
              <code>$PTII/ptolemy/configs/viptos/help.htm</code> for details.
              Only running a simulation within ptII involves JNI.

            <p>Cygwin users should make sure that <code>/usr/local/bin</code>
              is in your path before <code>/usr/bin</code> 

              <br>Under Cygwin, the easiest way to add
              <code>/usr/local/bin</code> to your path is to edit
              <code>$HOME/.bashrc</code> and add
	    <pre>
PATH=/usr/local/bin:${PATH}
            </pre>

	    Another way is via the System control panel (For details,
	    see <a
              href="http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIlatest/ptII/doc/install.htm#settingptII">Set
              the value of the PTII environment variable</a>).

            <p>If you use the Ptolemy II 6.0 cygwinDevel, you may also need
              to upgrade to 
            <ul> 
              <li>autoconf-2.53 or later, (2.59 preferred)
              <li>automake-1.5 or later (1.9.6 preferred)
              <li> bison 
              <li> emacs 
              <li> emacs-el 
              <li> gperf 
              <li> make-3.80 or later (3.80 preferred)
              <li> rpm 
            </ul>

            <p>For each of the packages, download the .tar.gz or bzip2 file from
              <a href="http://www.gnu.org/order/ftp.html">one of the GNU Mirrors</a>,
              unzip it, and run
            <pre>
configure
make
make install
            </pre>
          </td></tr>
      </table>
    </blockquote>

    <p>If you wish to use pre-existing installations of nesC and TinyOS 1.x, please
    set up the environment variables described in the steps below to
    point to the proper directories.  Otherwise, skip ahead to the <a href="#installationInstructions">installation instructions</a>.

    <BLOCKQUOTE>

      <h3>Using preexisting installations of TinyOS 1.x and nesC (v1.2.2 or later)</h3>
      <ol>
        <li>If you already have TinyOS 1.x and nesC (version 1.2.2 or
          later, from CVS or a .tar.gz distribution) and the AVR tools and
          make (version 3.80 or later) installed, try:

          <pre>
cd $PTII
mkdir -p vendors/ptinyos
cd $PTII/vendors/ptinyos
ln -s <I>location_of_your_tinyos-1.x_tree</I> tinyos-1.x
ln -s <I>location_of_your_nesc_tree</I> nesc
          </pre>
        </li>
        
        <li>Proceed to the step to <a href="#environmentVariables">Set
            up the necessary environment variables</a> below.
          
        <li>Proceed to the step to <a
            href="#reconfigureViptos">Reconfigure Viptos (or Ptolemy II) to
            recognize the new paths</a>
      </ol>
    </BLOCKQUOTE>

    <h2><a name="installationInstructions">Installation instructions</a></h2>

      We assume that you have neither the nesC compiler nor TinyOS
      installed.

    <ol>
      <li>The following AVR tools are needed:
        <ul>
          <li> avarice
          <li> avr-binutils
          <li> avr-gcc
          <li> avr-insight
          <li> avr-libc
        </ul>
        <p>Instructions for installing the AVR tools are below:

        <p>

          Note: If the files below do not work for you, you can use
          the older files instead: <a
          href="http://www.tinyos.net/dist-1.1.0/tools#in_browser"
          target="_top"><code>
          http://www.tinyos.net/dist-1.1.0/tools</code></a>.  See the
          <a
          href="http://webs.cs.berkeley.edu/tos/download.html#in_browser"
          target="_top">original TinyOS 1.x installation directions</a>
          for additional instructions.

        <p>
        Choose and follow the appropriate directions for your operating system:
        <ul>
          <li> If you are running Windows XP or Windows 2000, you can choose one of the following three installation methods:
            <ul>
              <li> Download WinAVR (This is recommended if you have a Ptolemy-based installation of Cygwin)
   	       <ol> 
                  <li>Go to 
                    <a href="http://sourceforge.net/project/showfiles.php?group_id=68108#in_browser" target="_top"><code>http://sourceforge.net/project/showfiles.php?group_id=68108</code></a>              
                  <li>Download
<a href="http://prdownloads.sourceforge.net/winavr/WinAVR-20040404-bin-install.exe?download" target="_top"><code>WinAVR-20040404-bin-install.exe</code></a>
                  <br><b>Note:</b> Do <b>not</b> install 
		  <code>WinAVR-20050214-install.exe</code>, as of 10/05,
		  it will not work.  When converting .nc files to .moml files,
		  you will see messages about avr-gcc not being able to find
		  cc1.  Instead, install
		  <code>WinAVR-20040404-bin-install.exe</code>.
                  <li>Install WinAVR in any directory, <code>C:\WinAVR</code>
		  is preferred.
                    <i>FIXME: Directories with spaces in the pathname might not work?</i>
                </ol>

              <li> Or, download the <a
              href="http://webs.cs.berkeley.edu/tos/dist-1.1.0/tinyos/windows/tinyos-1.1.0-1is.exe">TinyOS
              1.x Installshield Wizard</a>.  Run the wizard, and
              choose "Custom" install.  Install only the AVR tools.
              This will install all of the rpms below for you. <b>Do
              not choose the "cygwin" install option (it will
              overwrite and corrupt your current cygwin installation)
              or the "TinyOS" install option (you will install this
              later from CVS as a separate step).</b> You may choose
              to install the other remaining options if you do not
              already have them installed on your system.  The wizard
              will install all of the selected rpms for you.  JavaCOMM
              is not needed if you are not planning on using the
              TinyOS Java tools (these are not needed for Viptos (or
              Ptolemy II)).

              <li> Or, <b>if your Cygwin is installed so your 'Default
              Text File Type' is Unix</b>, download the following rpms
              to an empty directory:

	      <br><b>Note</b>: If your Cygwin installation has
	      'Default Text File Type' of Unix instead of DOS, then
	      you will likely have 
	      <a href="http://www.gigascale.org/softdevel/faq/23.html#in_browser"
	      target="_top">Cygwin CR/NL problems</a> with CVS.
	
             <p><B>Installing the rpms under Cygwin is not recommended</B>,
		it causes include file problems later.
                <ul>
                  <li><a href="http://www.tinyos.net/dist-2.0.0/tools/windows/avarice-2.3.20041206cvs-1.cygwin.i386.rpm">http://www.tinyos.net/dist-2.0.0/tools/windows/avarice-2.3.20041206cvs-1.cygwin.i386.rpm</a>
                  <li><a href="http://www.tinyos.net/dist-2.0.0/tools/windows/avr-binutils-2.15tinyos-3.cygwin.i386.rpm">http://www.tinyos.net/dist-2.0.0/tools/windows/avr-binutils-2.15tinyos-3.cygwin.i386.rpm</a>
                  <li><a href="http://www.tinyos.net/dist-2.0.0/tools/windows/avr-gcc-3.4.3-1.cygwin.i386.rpm">http://www.tinyos.net/dist-2.0.0/tools/windows/avr-gcc-3.4.3-1.cygwin.i386.rpm</a>
                  <li><a href="http://www.tinyos.net/dist-2.0.0/tools/windows/avr-insight-6.3-1.cygwin.i386.rpm">http://www.tinyos.net/dist-2.0.0/tools/windows/avr-insight-6.3-1.cygwin.i386.rpm</a>
                  <li><a href="http://www.tinyos.net/dist-2.0.0/tools/windows/avr-libc-1.2.3-1.cygwin.i386.rpm">http://www.tinyos.net/dist-2.0.0/tools/windows/avr-libc-1.2.3-1.cygwin.i386.rpm</a>
                </ul>

                and install them on the cygwin command line by typing:
                
                <pre>
rpm --ignoreos -ivh *.rpm
                </pre> 

                in the directory where you saved the files.
		
		 <p>If you get a message about checksum errors, complain
		to the TinyOS authors and then reinstall Cygwin with 
		<CODE>Unix</CODE> line endings.
 <p><I>Note to tinyos developers:  Unix line endings are not the right choice for naive Windows users.</I>

		 <p>If you get
		<pre>
bash-3.00$ rpm --ignoreos -ivh *.rpm
error: Failed dependencies:
/bin/sh is needed by make-3.80tinyos-1
/bin/sh is needed by mspgcc-win32tinyos-20041204-2
bash-3.00$
		</pre>

		Then try 
		<pre>
rpm --ignoreos --nodeps -ivh *.rpm
		</pre>

                Note: make is installed in the next step.
            </ul>

          <li> If you are running a Red Hat-based Linux (tested on Fedora Core 2),
          download the following rpms:
            <ul>
              <li><a href="http://www.tinyos.net/dist-2.0.0/tools/linux/avarice-2.3.20041206cvs-1.i386.rpm">http://www.tinyos.net/dist-2.0.0/tools/linux/avarice-2.3.20041206cvs-1.i386.rpm</a>
              <li><a href="http://www.tinyos.net/dist-2.0.0/tools/linux/avr-binutils-2.15tinyos-3.i386.rpm">http://www.tinyos.net/dist-2.0.0/tools/linux/avr-binutils-2.15tinyos-3.i386.rpm</a>
              <li><a href="http://www.tinyos.net/dist-2.0.0/tools/linux/avr-gcc-3.4.3-1.i386.rpm">http://www.tinyos.net/dist-2.0.0/tools/linux/avr-gcc-3.4.3-1.i386.rpm</a>
              <li><a href="http://www.tinyos.net/dist-2.0.0/tools/linux/avr-insight-6.3-1.i386.rpm">http://www.tinyos.net/dist-2.0.0/tools/linux/avr-insight-6.3-1.i386.rpm</a>
              <li><a href="http://www.tinyos.net/dist-2.0.0/tools/linux/avr-libc-1.2.3-1.i386.rpm">http://www.tinyos.net/dist-2.0.0/tools/linux/avr-libc-1.2.3-1.i386.rpm</a>
            </ul>

            and install them on the shell command line with 

            <pre>
rpm -ivh *.rpm
            </pre>

            in the directory where you saved the files.

            <li>If you are running a Debian-based Linux (partially tested on Ubuntu 6.06 LTS - Dapper Drake), you can use the following instructions to install the required packages:

<pre>
sudo apt-get install cvs autoconf automake java-package fakeroot gcc-3.4
sudo apt-get install gperf swig p7zip gcc-avr avr-libc binutils-avr uisp
</pre>

These instructions are borrowed from <a href="http://www.chadmetcalf.com/tinyos-1x-on-ubuntu">http://www.chadmetcalf.com/tinyos-1x-on-ubuntu</a>.  Some of the above packages may not be needed, depending on your configuration.

I actually used the graphical interface provided by the Synaptic Package Manager from the System | Administration menu instead.

          <li>You may also try compiling from source:
            <br><a href="http://www.tinyos.net/dist-2.0.0/tools/source">http://www.tinyos.net/dist-2.0.0/tools/source</a>

<p>Note: These installation instructions have not been tested.  For your convenience, the recommended installation order and flags are noted in the instructions below.  The flags are from the .conf files located at <a href="http://www.tinyos.net/dist-1.1.0/tools/source">http://www.tinyos.net/dist-1.1.0/tools/source</a>.

<p>
Download the following files:
<ul>
<li><a href="http://www.tinyos.net/dist-2.0.0/tools/source/avr-binutils-2.15tinyos.tgz">avr-binutils-2.15tinyos.tgz</a>
<li><a href="http://www.tinyos.net/dist-2.0.0/tools/source/avr-gcc-3.4.3.tgz">avr-gcc-3.4.3.tgz</a>
<li><a href="http://www.tinyos.net/dist-2.0.0/tools/source/avr-libc-1.2.3.tar.gz">avr-libc-1.2.3.tar.gz</a>
<li><a href="http://www.tinyos.net/dist-2.0.0/tools/source/avarice-2.4.tar.bz2">avarice-2.4.tar.bz2</a>
<li><a href="http://www.tinyos.net/dist-2.0.0/tools/source/avr-insight-6.3.tar.gz">avr-insight-6.3.tar.gz</a>
</ul>

<p>
Install them with the following commands:
<pre>
tar xzvf avr-binutils-2.15tinyos.tgz
cd avr-binutils-2.15tinyos
./configure --target=avr
make
sudo make install

tar xzvf avr-gcc-3.4.3.tgz
cd avr-gcc-3.4.3
./configure --target=avr --disable-nls --enable-languages=c
make
sudo make install
cd ..

tar xzvf avr-libc-1.2.3.tar.gz
cd avr-libc-1.2.3
./doconf
./domake
sudo ./domake install
cd ..

tar --bzip2 -xvf avarice-2.4.tar.bz2
cd avarice-2.4
./configure
make
sudo install

tar xzvf avr-insight-6.3.tar.gz
cd avr-insight-6.3
./configure --target=avr --with-gnu-ld --with-gnu-as
make
sudo install
</pre>

        </ul>

      <li>You must have <code>make</code> version 3.80 or later
      installed.  To check your make version, run <code>make --version</code>.
      If you have an earlier version, please choose the
      option that corresponds to your operating system:

        <ul>
          <li>Windows (Cygwin):
	    Either rerun set up or od
 
            <br>
	    Download make-3.80 from
	    <a href="http://www.gnu.org/order/ftp.html">one of the GNU Mirrors</a>
	    <pre>
tar -zxf make-3.80.tar.gz
cd make-3.80
./configure
make
make install
cd /usr/local/bin
cp make.exe gmake.exe
	    </pre>

            <p><b>or</b>

            <p><i>Ptolemy II 3.0 CygwinDevel users will not have rpm installed,
	    so this step won't work.  Grab the tar file instead.</i>
	    Download 
	    <a href="http://www.tinyos.net/dist-2.0.0/tools/windows/make-3.80tinyos-1.cygwin.i386.rpm">http://www.tinyos.net/dist-2.0.0/tools/windows/make-3.80tinyos-1.cygwin.i386.rpm</a>
            
            Install the rpm on the command line with
            <pre>
rpm -ivh make-3.80tinyos-1.cygwin.i386.rpm
            </pre>
            in the directory where you saved the file.

          <li>Linux:
            <br>
            <a href="http://www.tinyos.net/dist-2.0.0/tools/linux/make-3.80tinyos-1.i386.rpm">http://www.tinyos.net/dist-2.0.0/tools/linux/make-3.80tinyos-1.i386.rpm</a>
            
            Install the rpm on the command line with
            <pre>
rpm -ivh make-3.80tinyos-1.i386.rpm
            </pre>
            in the directory where you saved the file.
            
          <li>Or you can try to compile and install from source:
            <br>
            <a href="http://www.tinyos.net/dist-2.0.0/tools/source/make-3.80tinyos.tar.bz2">http://www.tinyos.net/dist-2.0.0/tools/source/make-3.80tinyos.tar.bz2</a>
            
            If you install this under Cygwin, make sure
            <code>/usr/local/bin</code> is in your path and comes
            before any other paths to any older version.

        </ul>
        
      <li>Make a directory into which to store the source code for
      TinyOS 1.x and nesC:
        <pre>
mkdir -p $PTII/vendors/ptinyos
        </pre>

        <b>The rest of these instructions assume the above path.</b>

	<p>Note that the value of <CODE>$PTII</CODE> should not have spaces in it.
        
      <li> You can either get nesC <a href="#nesCfromtargz">from the .tar.gz distribution</a> or <a href="#nesCfromCVS">from CVS</a>.

    <h3><a name="nesCfromtargz">Getting nesC from a .tar.gz distribution</a></h3>
    <ol> 
      <li>Download <a href="http://prdownloads.sourceforge.net/nescc/nesc-1.2.7a.tar.gz?download#in_browser">nesc-1.2.7a.tar.gz</a> or later version
      to <CODE>$PTII/vendors/ptinyos</CODE>
        
      <li> Unzip and untar the nesc .tar.gz file:
        <pre>
cd $PTII/vendors/ptinyos
gunzip nesc-1.2.7a.tar.gz
tar xf nesc-1.2.7a.tar  
        </pre>
        This should create a directory called <code>nesc-1.2.7a</code>.

      <li> Change to the newly created directory.
        <pre>
cd nesc-1.2.7a
        </pre>

      <li><a href="#configurenesC">Skip ahead</a> to the step to configure nesC.
    </ol>


    <h3><a name="nesCfromCVS">Getting nesC from CVS</a></h3>

    The nesC compiler can be downloaded and compiled from source,
    which requires an impressive suite of tools.  These instructions
    ask you to first verify that you have the necessary programs
    installed, then to install the AVR tools, followed by TinyOS 1.x, then
    nesC.

    <p>Under Linux or Cygwin, you must have the following programs
      installed on your system:

    <ul> 
      <li> autoconf-2.53 or later, (2.59 preferred)
      <li> automake-1.5 or later (1.9.6 preferred)
      <li> bison 
      <li> emacs 
      <li> emacs-el 
      <li> gperf 
      <li> make-3.80 or later (3.80 preferred)
      <li> rpm 
    </ul>
        
    <p>For help with how to install these in Cygwin, see the 
    <a href="http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIlatest/cygwin.htm">Ptolemy II Cygwin Instructions</a>.
    Note that most installations will not
    have gperf on them, at least, so you will likely need to install
    at least that.</p>

    <ol>
      <li> Get the nesC CVS Tree, see <a
          href="http://sourceforge.net/cvs/?group_id=56288#in_browser" target="_top"><CODE>http://sourceforge.net/cvs/?group_id=56288</CODE></a>

        <pre>
cd $PTII/vendors/ptinyos
cvs -d:pserver:anonymous@nescc.cvs.sourceforge.net:/cvsroot/nescc login 
<i>Hit Enter when prompted for a password</i>
cvs -z3 -d:pserver:anonymous@nescc.cvs.sourceforge.net:/cvsroot/nescc co -P nesc
        </pre>

      <li> Bootstrap nesC
        <pre>
cd $PTII/vendors/ptinyos/nesc
./Bootstrap
        </pre>
    </ol>

    
    <li><a name="configurenesC">Configure nesc:</a>
      <pre>
./configure
      </pre>

      By default, this configuration will cause nesC to be installed
      in <code>/usr/local</code>.  

      <p>Make sure that <code>/usr/local/bin</code> is in your path.

      <p>If you wish to install in a different directory, run
      <code>./configure --prefix=&lt;MYDIR&gt;</code> instead and add
      the <code>bin</code> directory to your path.
    </li>

    <li>Install nesc:
      <pre>
make
make install
      </pre>
      
    </li>

    <li>Under Windows with WinAVR-20040404, we had to copy
      <code>c:/cygwin/usr/local/lib/ncc/</code> to
      <code>c:/usr/local/lib/ncc/</code>:
      <pre>
mkdir -p c:/usr/local/lib
cd c:/usr/local/lib
cp -r /usr/local/lib/ncc .
      </pre>
      The reason is that Cygwin mounts directories under
      </code>c:/cygwin</code> and the WinAVR binaries don't know how
      to handle that.

      <p>Under Windows with WinAVR-20040404, we also had to modify <code>c:\usr\local\lib\ncc\nesc_nx.h</code> so that 
<pre>
#include &lt;inttypes.h&gt;
</pre>
is changed to 
<pre>
#include &lt;sys/types.h&gt;
</pre>
Otherwise, when we try to compile nesC applications, the compiler
complains that it cannot find the file.
    </li>

    <li> We have put into the TinyOS 1.x makefiles a rule that you can
    run to create all the TinyOS libraries in one step. To use this,
    as of this writing, you need to get TinyOS 1.x from the CVS
    repository rather than getting the packaged install version. To do
    this, type:
      
      <pre>
cd $PTII/vendors/ptinyos
cvs -d:pserver:anonymous@tinyos.cvs.sourceforge.net:/cvsroot/tinyos login 
<i>Hit Enter when prompted for a password</i>
cvs -z3 -d:pserver:anonymous@tinyos.cvs.sourceforge.net:/cvsroot/tinyos co -P tinyos-1.x
      </pre>

      <p><I>Note to tinyos developers: why is this download so large?  Perhaps there should be a core cvs module and then a contrib module?</I>

        This will create a directory <code>tinyos-1.x</code>.  For more
        information, see <a
        href="http://sourceforge.net/cvs/?group_id=28656#in_browser"><code>http://sourceforge.net/cvs/?group_id=28656</code></a>.
    </li>

    <li> <a name="environmentVariables">Set up the necessary
    environment variables.</a> TOSROOT sets the location of the TinyOS
    source tree.  TOSDIR sets the <code>tos</code> subdirectory in the TinyOS source
    tree.  PTINYOS_MOMLROOT sets the MoML output directory.

      <ul>
        <li>Under bash, type: 
          <pre>
export TOSROOT=$PTII/vendors/ptinyos/tinyos-1.x
export TOSDIR=$TOSROOT/tos
export PTINYOS_MOMLROOT=$PTII/vendors/ptinyos/moml
          </pre>

        <li>Under csh or tcsh:
          <pre>
setenv TOSROOT $PTII/vendors/ptinyos/tinyos-1.x
setenv TOSDIR $TOSROOT/tos
setenv PTINYOS_MOMLROOT $PTII/vendors/ptinyos/moml
          </pre>

        <li>Under Windows with Cygwin, you can permanently set
        environment variables from the System control panel. (For
        details, see <a href="http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIlatest/ptII/doc/install.htm#settingptII">Set the value of the PTII environment variable</a>).

          <p>
            Go to Start Menu -&gt; Settings -&gt; Control Panels -&gt; System -&gt; Advanced -&gt; Environment Variables.
            <br>
            Set <code>TOSROOT</code> to <code>%PTII%/vendors/ptinyos/tinyos-1.x</code>
            <br>
            Set <code>TOSDIR</code> to <code>%PTII%/vendors/ptinyos/tinyos-1.x/tos</code>
            <br>
            Set <code>PTINYOS_MOMLROOT</code> to <code>%PTII%/vendors/ptinyos/moml</code>

          <p> Note: If you are using Cygwin, and configure has trouble
          finding <code>TOSROOT</code> or <code>TOSDIR</code>, try
          expanding your <code>$PTII</code> environment variable to
          <code>/cygdrive/c/ptII</code> or something similar.  Also
          try expanding the <code>TOSROOT</code> and
          <code>TOSDIR</code> environment variables if you still have
          problems.

      </ul>
    </li>

    <li> <a name="reconfigureViptos">Reconfigure Viptos</a> (or Ptolemy II) to recognize the new paths:
        <pre>
cd $PTII
./configure
        </pre>
      </li>

    <li>Under Linux or Cygwin, you must have the following programs
    installed on your system:
      <ul>
        <li>autoconf-2.53 or later
        <li>automake-1.5 or later
      </ul>
      If you install these under Cygwin, make sure
      <code>/usr/local/bin</code> is in your path and comes before any
      other paths to any older version.
      
      <p> Configure and install the TinyOS 1.x nesC tools.
      
      <pre>
cd $TOSROOT/tools/src/ncc
./Bootstrap
./configure
      </pre>
        
      By default, this configuration will cause the tools to be
      installed in <code>/usr/local</code>.  We assume that
      <code>/usr/local/bin</code> is in your path.  If you wish to
      install in a different directory, run <code>./configure
      --prefix=&lt;MYDIR&gt;</code> instead and add the
      <code>bin</code> directory to your path.

      <pre>
make
make install
      </pre>

    </li>

    <li> See if you have installed TinyOS 1.x and nesC correctly:
      <pre>
cd $TOSROOT/apps/Blink
make pc
./build/pc/main.exe 1
      </pre>
      
      The Blink application should successfully compile.  When running
      the executable, you should see TOSSIM output.  See
      $TOSROOT/doc/tutorial/lesson5.html or the <a
      href="http://www.tinyos.net/tinyos-1.x/doc/tutorial/lesson5.html">
      online version of tutorial lesson 5</a> for more information.
    </li>

    <li> Unzip the pre-generated libraries:
      <pre>
cd $PTII/vendors/ptinyos
cat $PTII/ptolemy/domains/ptinyos/util/nc2moml/nc2moml-tinyos-1.1.15Dec2005cvs-1.tar.gz | gunzip | tar -xvf -
      </pre>
      This will create <CODE>$PTII/vendors/ptinyos/moml</CODE> and contains the MoML libraries corresponding to the Dec 2005 TinyOS RPM release.  

<p>If you want to generate the MoML library files from scratch, see $PTII/ptolemy/domains/ptinyos/util/nc2moml/index.htm
    </li>

    <li> Unzip the pre-generated applications:
      <pre>
cd $PTII/vendors/ptinyos
cat $PTII/ptolemy/domains/ptinyos/util/ncapp2moml/ncapp2moml-tinyos-1.1.15Dec2005cvs-1.tar.gz | gunzip | tar -xvf -
      </pre>
      This will create <CODE>$PTII/vendors/ptinyos/momlapp</CODE> and contains the MoML applications corresponding to the Dec 2005 TinyOS RPM release.  

<p>If you want to generate the MoML application files from scratch, see $PTII/ptolemy/domains/ptinyos/util/ncapp2moml/index.htm
    </li>

    <li> Run <code>$PTII/bin/viptos</code> and run one of the demos.
      <br>You should see messages on stdout and eventually the images of
      the motes should blink
    </li>

  </ol>

</body>
</html>
