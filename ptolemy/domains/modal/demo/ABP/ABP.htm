<!-- $Id$ -->
<html>
<head>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<title>Protocol Modeling with Hierarchical FSMs and the Discrete Event Domain</title>
</title>
<link href="../../../../../doc/default.css" rel="stylesheet" type="text/css">
</head>
<body>
<h1>Protocol Modeling with Hierarchical FSMs and the Discrete Event Domain</h1>
<p>
This model demonstrates the use of the discrete event (DE) domain
and hierarchical finite state machines (FSMs) to model the alternating
bit protocol (ABP). ABP [2] is a simple mechanism for achieving reliable,
ordered delivery of messages over channels with unreliable delivery and
variable delay. The top level of the model, which operates in the DE domain,
is shown below with a panel that controls the execution of the model.
<CENTER>
<P>

<!-- PT JNLP APPLET CONVERTER -->
<!-- We use both the older applet style and the JDK1.6.0_10 and later
     JNLP Applets.  In this way, we can support pre-JDK1.6.0_10 installs.
     See https://jdk6.dev.java.net/plugin2/jnlp/ -->
<APPLET 
   code = "ptolemy.vergil.VergilApplet"
   codebase = "../../../../.."
   archive = "ptolemy/domains/modal/demo/ABP/ABP.jar,ptolemy/actor/lib/colt/colt.jar,ptolemy/domains/modal/modal.jar,ptolemy/data/data.jar,lib/ptcolt.jar,ptolemy/ptsupport.jar,ptolemy/domains/de/de.jar,lib/diva.jar,ptolemy/domains/modal/modal.jar,ptolemy/domains/fsm/fsm.jar,ptolemy/domains/ct/ct.jar,ptolemy/vergil/vergilApplet.jar"
   width = "400"
   height = "650"
   >
  <PARAM name="jnlp_href" value="ptolemy/domains/modal/demo/ABP/ABP.jnlp">
  <PARAM NAME = "commandLineArguments" VALUE = "-ptinyViewer ptolemy/domains/modal/demo/ABP/ABP.xml">
  <PARAM NAME = "NAME" VALUE = "ABP" >
  <PARAM NAME = "background" VALUE = "#ffffff" >
  <PARAM NAME = "controls" VALUE = "buttons" >
  <PARAM NAME = "orientation" VALUE = "vertical" > \
  <PARAM NAME = "modelURL" VALUE = "ABP.xml" > \
  <a href="ABP.xml">MoML specification for this model.</a> \
</APPLET>
<!-- /PT JNLP APPLET CONVERTER -->
</CENTER>
<P>
The components in the model include:
<P>
<B>Message source. </B>
This is a DE atomic actor with a parameter <I>MaxDelay</I>.
After execution starts, it will wait for a random delay uniformly
distributed between <I>0</I> and <I>MaxDelay</I>, and then send a <I>request</I>
to the sender. When it receives a <I>next</I> from the sender, it will
again wait for a random delay uniformly distributed between <I>0</I> and
<I>MaxDelay</I>, and then send a new <I>msgIn</I> with sequence number
increased by one to the sender. In this demo, <I>MaxDelay</I> is set
to <I>0.5</I>.
<P>
<B>Timer. </B>
The timer has an input <I>setTimer</I> of type DoubleToken.
The value of the input token gives the delay before the next timer expire.
The timer is reset every time it gets an input token.
<P><B>Channel. </B>The channel models an unreliable connection in a packet
switching network. It queues the input packets, drops and delays the packets
randomly. A channel has three parameters: <I>DropRate</I>, <I>MinDelay</I>
and <I>MaxDelay</I>. <I>DropRate</I> is the probability that an input packet
gets dropped. Packet delay in the channel is uniformly distributed between
<I>MinDelay</I> and <I>MaxDelay</I>.
<P>
<B>Plot. </B>
The plot shows the result of data transmission. In the
plot, the red data gives the sequence number of the messages coming out
from the receiver. The blue data gives the sequence number of the messages
going to the sender. The third data is the "alternating bit" that the protocol
uses to number the packets going through the channel.
<P><B>Sender. </B>The sender implements the sending part of ABP and is
a hierarchical FSM. The top level is a 3-state FSM.
<CENTER>
<P>

<!-- PT JNLP CONVERTER -->
<a href="ABP.jnlp">Run the demo using Web Start</a>
<!-- /PT JNLP CONVERTER -->
</CENTER>
<P>
The top level FSM starts in the <I>Connecting</I> state. This state refines to
the following FSM:
<CENTER>
<P>

<!-- PT JNLP CONVERTER -->
<a href="ABP.jnlp">Run the demo using Web Start</a>
<!-- /PT JNLP CONVERTER -->
</CENTER>
<P>
This FSM starts in the <I>Init</I> state. When a request from the message
source is received, the FSM sends a special packet (with sequence number
<I>-1</I>)
to the receiver, sets the timer, and goes to the <I>Wait</I> state. If there
is no acknowledgement from the receiver before the timer expires, the FSM sends
the special packet again, remains in the <I>Wait</I> state, and waits for the
next timeout or acknowledgement from the receiver. If an acknowledgement is
not received within five tries, the FSM goes to the <I>Fail</I> state and
sends an <I>error</I> event to the top level FSM. Otherwise the FSM goes to the
<I>Success</I> state and sends a <I>connected</I> event to the top level.
<P>
If connection fails, the top level FSM goes to the <I>Failed</I> state and
stops. Otherwise it sends a <I>next</I> event to the message source, and goes
to the <I>Sending</I> state, which refines to the following FSM:
<CENTER>
<P>

<!-- PT JNLP CONVERTER -->
<a href="ABP.jnlp">Run the demo using Web Start</a>
<!-- /PT JNLP CONVERTER -->
</CENTER>
<P>
This FSM starts in state <I>S0</I>. When a message from the message source is
received, the FSM will stay in its current state, tag the message with an
additional bit (<I>0</I> in state <I>S0</I>, <I>1</I> in <I>S1</I>, hence the
term "alternating bit") to form a packet, and try repeatedly to send the
packet until the receiver acknowledges. When the receiver acknowledges, the
FSM sends a <I>next</I> event to the message source, and goes to the other
state.
<P><B>Receiver. </B>
The receiver is a flat FSM as shown below:
<CENTER>
<P>

<!-- PT JNLP CONVERTER -->
<a href="ABP.jnlp">Run the demo using Web Start</a>
<!-- /PT JNLP CONVERTER -->
</CENTER>
<P>
The receiver starts in state <I>Init</I>. In this state, the FSM acknowledges
the special packet (with sequence number <I>-1</I>) that the sender sends in
trying to establish connection. When a packet tagged with bit <I>0</I> is
received, the FSM acknowledges the packet, sends the message in the packet to
<I>msgOut</I>, then goes to state <I>S1</I>. In state <I>S1</I>, the FSM
acknowledges any packet tagged with bit <I>0</I>. When a packet tagged with
bit <I>1</I> is received, the FSM acknowledges the packet, sends the message
in the packet to <I>msgOut</I>, then goes to state <I>S0</I>. In state
<I>S0</I>, the FSM acknowledges any packet tagged with bit <I>1</I> while
waiting for a packet tagged with bit <I>0</I>.
<H2>Discussion</H2>
The purpose of this demo is to show:
<UL>
<LI>
Hierarchical FSMs can efficiently capture complex sequential control behavior.</LI>
<LI>
Embedding FSMs within other models of computation is a clean and flexible
way to model the concurrent execution of FSMs.</LI>
</UL>

<H2>
References</H2>
<OL>
<LI>
A. Girault, B. Lee, and E. A. Lee, ``<A HREF="http://ptolemy.eecs.berkeley.edu/papers/98/starcharts">Hierarchical
Finite State Machines with Multiple Concurrency Models</A>,'' April 13,
1998.</LI>
<LI>
J. Walrand, and P. Varaiya, ``High-Performance Communication Networks,''
pages 69-72, Morgan Kaufmann Publishers, Inc., 1996.</LI>
</OL>

<p><font size="2" color="#cc0000">Last Updated: $Date$</font>
</body>
</html>



