<!-- $Id$-->
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<link href="../../../../../doc/default.css" rel="stylesheet" type="text/css">
<TITLE>ModalBSC</TITLE>
</HEAD>
<BODY>

<H1>Modal Binary Symmetric Channel</H1>


<P>
 <!-- All of the controls of the applet should be visible when the
applet is displayed on a XGA screen-->
<center>
<!-- The HTML below is for the Java Plugin.  The first
     section is for IE, the second is for Netscape 4, the third for Mozilla 1.0
 -->
<!-- PT JNLP APPLET CONVERTER -->
<!-- We use both the older applet style and the JDK1.6.0_10 and later
     JNLP Applets.  In this way, we can support pre-JDK1.6.0_10 installs.
     See https://jdk6.dev.java.net/plugin2/jnlp/ -->
<APPLET 
   code = "ptolemy.vergil.VergilApplet"
   codebase = "../../../../.."
   archive = "ptolemy/domains/fsm/demo/ModalBSC/ModalBSC.jar,ptolemy/actor/lib/embeddedJava/embeddedJava.jar,ptolemy/data/data.jar,ptolemy/codegen/codegen.jar,ptolemy/domains/fsm/fsm.jar,ptolemy/ptsupport.jar,ptolemy/domains/sdf/sdf.jar,lib/diva.jar,ptolemy/domains/modal/modal.jar,ptolemy/domains/fsm/fsm.jar,ptolemy/domains/ct/ct.jar,ptolemy/vergil/vergilApplet.jar"
   width = "400"
   height = "650"
   >
  <PARAM name="jnlp_href" value="ptolemy/domains/fsm/demo/ModalBSC/ModalBSC.jnlp">
  <PARAM NAME = "commandLineArguments" VALUE = "-ptinyViewer ModalBSC.xml">
  <PARAM NAME = "NAME" VALUE = "ModalBSC" >
  <PARAM NAME = "background" VALUE = "#ffffff" >
  <PARAM NAME = "controls" VALUE = "buttons" >
  <PARAM NAME = "orientation" VALUE = "vertical" > \
  <PARAM NAME = "modelURL" VALUE = "ModalBSC.xml" > \
  <a href="ModalBSC.xml">MoML specification for this model.</a> \
</APPLET>
<!-- /PT JNLP APPLET CONVERTER -->
</CENTER>
This modal model by
Zoltan Kemenczy (Research in Motion Limited)
represents a trivial
Binary Symmetric Channel
model with two states, "good" and "bad", each with different
probabilities of error. The same state refinement is used
to generate the error and state change events.
A transition refinement is used to scale the state change
signal from the state refinement to make it more visible
on the scope. If the same refinement is configured for both
state transitions, the scale parameter of the refinement is
set to be different for the two transitions.

<p>Note that the decision which transition to
take is made by the controller based on the state refinement's
state change output (==1) and is not affected by the transition
refinement changing the state change to double (0.5).


<p>The <a href="ModalBSCVergil.htm">block diagram</a>
for the model was constructed using the Ptolemy II schematic editor
called Vergil.
</p>
</BODY>
</HTML>
