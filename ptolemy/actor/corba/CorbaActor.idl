/* Interface for defining how an CORBA actor can be invoked remotely.

 Copyright (c) 1997-2006 The Regents of the University of California.
 All rights reserved.
 Permission is hereby granted, without written agreement and without
 license or royalty fees, to use, copy, modify, and distribute this
 software and its documentation for any purpose, provided that the above
 copyright notice and the following two paragraphs appear in all copies
 of this software.

 IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
 FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
 ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
 THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
 SUCH DAMAGE.

 THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
 INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
 PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
 CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
 ENHANCEMENTS, OR MODIFICATIONS.

                                        PT_COPYRIGHT_VERSION_2
                                        COPYRIGHTENDKEY
@ProposedRating Red (liuj@eecs.berkeley.edu)
@AcceptedRating Red (moderator@eecs.berkeley.edu)
*/

module util {
	/* Exception for generic illegal actions on the server side.
	 */
	exception CorbaIllegalActionException{
		string message;
	};

	/* Exception for unknow parameter name when passing a parameter.
	 */
	exception CorbaUnknownParamException {
		string paramName;
		string message;
	};

	/* Exception for illegal value when passing data.
	 */
	exception CorbaIllegalValueException{
		string message;
	};

	/* Exception for unknow port when accessing a remote port/
	 */
	exception CorbaUnknownPortException{
		string portName;
		string message;
	};

	/* Exception for channel indeces.
	 */
	exception CorbaIndexOutofBoundException{
		short index;
	};

	/* A CORBA compatible interface that implements the execution
	 * methods of Ptolemy II.
	 */
	interface CorbaActor {
		/* Mirror the fire() method of Ptolemy II
		 * executable interface.
		 * @exception CorbaIllegalActionException If the
		 *   method is an illegal action of the actor.
		 */
		void fire() raises (CorbaIllegalActionException);

		/* Return the value (in the form of a string) of
		 * a parameter.
		 * @exception CorbaIllegalActionException If the
		 *  query of parameter is not supported by the actor.
		 * @exception CorbaUnknowParamException If the parameter
		 *  name is not known by the actor.
		 */
		string getParameter(in string paramName)
			raises (CorbaIllegalActionException,
				CorbaUnknownParamException);

		/* Mirror the initialize() method of Ptolemy II
		 * executable interface.
		 * @exception CorbaIllegalActionException If the
		 *   method is an illegal action of the actor.
		 */
		void initialize() raises (CorbaIllegalActionException);

		/* Return true if the specified channel of the specified
	  	 * port contains unsent data.
		 * @exception CorbaIllegalActionException If the query is
		 *   not supported by the actor.
		 * @exception CorbaUnknownPortException If the specified
		 *   port is not known by the actor.
		 * @exception CorbaIndexOutofBoundException If the
		 *   channel index is out of the width of the port.
		 */
		boolean hasData(in string portName,
				in short portIndex)
			raises (CorbaIllegalActionException,
				CorbaIndexOutofBoundException,
				CorbaUnknownPortException);

		/* Return true if there is a parameter of the specified
	 	 * name defined in the actor.
		 */
		boolean hasParameter(in string paramName);

		/* Return true if there is a port of the specified name
		 * and specified property contained by the actor.
		 * @param portName The name of the port.
		 * @param isInput True if the port is an input port.
		 * @param isOutput True if the port is an output port.
		 * @param isMultiport True if the port is a multiport.
		 */
		boolean hasPort(in string portName,
				in boolean isInput,
				in boolean isOutput,
				in boolean isMultiport);

		/* Set the width of the specified port.
		 * @param portName The name of the port.
		 * @param width The width to be set.
		 * @exception CorbaIllegalActionException If the width
		 *  to be set is not supported by the port, e.g. the
		 *  port is restricted to a single port, but the width
		 *  to be set is greater than one.
		 * @exception CorbaUnknownPortException If the port is \
		 *  not known by the actor.
		 */
		void setPortWidth(in string portName,
				  in short width)
			raises (CorbaIllegalActionException,
				CorbaUnknownPortException);

		/* Mirror the postfire() method of Ptolemy II
		 * executable interface.
		 * @exception CorbaIllegalActionException If the
		 *   method is an illegal action of the actor.
		 */
		boolean postfire() raises (CorbaIllegalActionException);

		/* Mirror the prefire() method of Ptolemy II
		 * executable interface.
		 * @exception CorbaIllegalActionException If the
		 *   method is an illegal action of the actor.
		 */
		boolean prefire() raises (CorbaIllegalActionException);

                /* Mirror the preinitialize() method of Ptolmey II
		 * executable interface.
		 * @exception CorbaIllegalActionException If the
		 *   method is an illegal action of the actor.
		 */
		boolean preinitialize() raises (CorbaIllegalActionException);

		/* Set the value of the specified parameter.
		 * @param paramName The parameter name.
		 * @param paramValue The value to be set.
		 * @exception CorbaIllegalActionException If the set
		 *  value opertaion is not supported by the parameter.
		 * @exception CorbaUnknownParamException If the
		 *  parameter name is not known by the actor.
		 * @exception CorbaIllegalValueException If the value
		 *  is invalid for this parameter.
		 */
		void setParameter(in string paramName,
				  in string paramValue)
			raises (CorbaIllegalActionException,
				CorbaUnknownParamException,
				CorbaIllegalValueException);

		/*  Mirror the stopFire() method of Ptolemy II
		 * executable interface.
		 * @exception CorbaIllegalActionException If the
		 *   method is an illegal action of the actor.
		 */
		void stopFire() raises (CorbaIllegalActionException);

		/* Mirror the terminate() method of Ptolemy II
		 * executable interface.
		 * @exception CorbaIllegalActionException If the
		 *   method is an illegal action of the actor.
		 */
		void terminate() raises (CorbaIllegalActionException);

		/* Transfer the input data to the specified port.
		 * @param portName The port name.
		 * @param portIndex The channel number within the port.
		 * @param tokenValue The string for the value of the
		 *        data token.
		 * @exception CorbaIllegalActionException If the action is
		 *  illegal.
		 * @exception CorbaUnknownPortException If the port is unknown.
		 * @exception CorbaIndexOutofBoundException If the index
		 *  number is out of the width of the port.
		 * @exception CorbaIllegalValueException If the value is not
		 *  valid, e.g. the string cannot be converted to a value.
		 */
		void transferInput(in string portName,
				   in short portIndex,
				   in string tokenValue)
			raises (CorbaIllegalActionException,
				CorbaUnknownPortException,
				CorbaIndexOutofBoundException,
				CorbaIllegalValueException);

		/* Transfer the output from an output port.
		 * @param portName The port name
		 * @param portIndex The channel index within the port.
		 * @exception CorbaIllegalActionException If the operation
		 *  is illegal, e.g. the port is not an output port.
		 * @exception CorbaUnknownPortException If the port name
		 *  is unknown.
		 * @exception CorbaIndexOutofBoundException If the index
		 *  number is out of the width of the port.
		 */
		string transferOutput(in string portName,
				      in short portIndex)
			raises (CorbaIllegalActionException,
			    	CorbaUnknownPortException,
				CorbaIndexOutofBoundException);

		/* Mirror the wrapup() method of Ptolemy II
		 * executable interface.
		 * @exception CorbaIllegalActionException If the
		 *   method is an illegal action of the actor.
		 */
		void wrapup() raises (CorbaIllegalActionException);
	};
};
