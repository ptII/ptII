/* Interface for defining how an CORBA Coordinator can be invoked remotely.

 Copyright (c) 1997-2006 The Regents of the University of California.
 All rights reserved.
 Permission is hereby granted, without written agreement and without
 license or royalty fees, to use, copy, modify, and distribute this
 software and its documentation for any purpose, provided that the above
 copyright notice and the following two paragraphs appear in all copies
 of this software.

 IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
 FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
 ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
 THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
 SUCH DAMAGE.

 THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
 INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
 PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
 CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
 ENHANCEMENTS, OR MODIFICATIONS.

                                        PT_COPYRIGHT_VERSION_2
                                        COPYRIGHTENDKEY
@ProposedRating Red (ellen_zh@eecs.berkeley.edu)
@AcceptedRating Red (moderator@eecs.berkeley.edu)
*/

module CoordinatorUtil {
	/* Exception for generic illegal actions on the server side.
	 */
	exception CorbaIllegalActionException{
		string message;
	};

    /* A CORBA compatible interface for a consumer.
	 */
	interface Client {
	    /* this method is intended to be called remotely to
	     * send data to it.
	     */
        void push(in any data) raises (CorbaIllegalActionException);
        
        /* this method is intended to be called remotely to start the application
         * for the consumer.
         */        
        void start();
        
        /* this method is intended to be called remotely to stop the application
         * for the consumer.
         */
        void stop();

	};
	
	/* A CORBA compatible interface for a coordinator.
	 */
	interface Coordinator {
	

        /* this method is intended to be called remotely by the client
	     * to register with the coordinator.
	     */
        void register(in string clientName,
                in Client clientRef) raises (CorbaIllegalActionException);
        
        /* this method is intended to be called remotely by the client,
	     * so that data can be delived back over the network.
	     */
        void result(in string clientName, 
                in any data) raises (CorbaIllegalActionException);
        
        /* this method is intended to be called remotely by the client
	     * to unregister with this when it leaves.
	     */
        void unregister(in string consumerName) raises (CorbaIllegalActionException);
	};
	
};
