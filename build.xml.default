<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- $Id$
     $PTII/configure reads in build.xml.in and creates build.xml.
     If configure is not available, copy build.xml.default to build.xml. -->
<project basedir="." default="build" name="ptII">

  <!-- Ant properties. Alphabetize, please -->
  <property environment="env" />

  <!-- checkstyle.formatter defaults to xml and is used by checkstyle and test.  Try also -Dcheckstyle.formater=html. -->
  <property name="checkstyle.formatter" value="xml" />

  <property name="debuglevel" value="source,lines,vars" />

  <!-- junit.formatter defaults to plain and is used by checkstyle and test.  Other values: brief, failure, xml -->
  <property name="junit.formatter" value="plain" />

  <!-- ptII.reports contains reports generated by checkstyle, findbugs and test.
       ptII.reports must be declared before any properties that refer to it. (Lame).
    -->
  <property name="ptII.reports" value="${basedir}/reports" />

  <!-- The output director for junit. -->
  <property name="junit.output.dir" value="${ptII.reports}/junit" />

  <!-- model names the model to be opened.  The default is the empty string.  To use this, run 'ant vergil -Dmodel=foo.xml' -->
  <property name="model" value="" />

  <property name="source" value="1.5" />
  <property name="target" value="1.5" />

  <!-- Ant paths. Alphabetize, please -->
  <path id="ptII.classpath">
    <pathelement location="${basedir}" />
    <pathelement location="lib/bsh-2.0b4.jar" />
    <pathelement location="lib/ptCal.jar" />
    <pathelement location="lib/java_cup.jar" />
    <pathelement location="lib/saxon8.jar" />
    <pathelement location="lib/saxon8-dom.jar" />
    <pathelement location="lib/chic.jar" />
    <pathelement location="lib/junit-4.8.2.jar" />
    <pathelement location="lib/jython.jar" />
    <pathelement location="lib/kieler.jar" />
    <pathelement location="lib/ptcolt.jar" />
    <pathelement location="lib/ptjacl.jar" />
    <pathelement location="lib/mapss.jar" />
    <pathelement location="lib/sootclasses.jar" />
    <pathelement location="lib/jasminclasses.jar" />
    <pathelement location="ptolemy/distributed/jini/jar/jini-core.jar" />
    <pathelement location="ptolemy/distributed/jini/jar/jini-ext.jar" />
    <pathelement location="ptolemy/distributed/jini/jar/sun-util.jar" />
    <pathelement location="ptolemy/domains/ptinyos/lib/jdom.jar" />
    <pathelement location="ptolemy/domains/ptinyos/lib/nesc.jar" />
    <pathelement location="ptolemy/actor/ptalon/antlr/antlr.jar" />
    <pathelement location="lib/PDFRenderer.jar" />
    <pathelement location="ptserver/lib/hessian-4.0.7.jar" />
    <pathelement location="ptserver/lib/jetty-all-7.4.1.v20110513.jar" />
    <pathelement location="ptserver/lib/servlet-api-2.5.jar" />
    <pathelement location="ptserver/lib/wmqtt.jar" />
    <pathelement location="lib/org-netbeans-api-visual.jar" />
    <pathelement location="lib/org-openide-util-lookup.jar" />
    <pathelement location="lib/org-openide-util.jar" />
  </path>


  <!-- Ant patternsets. Alphabetize, please -->
  <patternset id="ptII.excludes">
    <exclude name="**/CVS/" />
    <exclude name="**/adm/" />
    <exclude name="**/codeDoc/" />
    <exclude name="**/makefile" />
    <exclude name="**/.*" />
    <exclude name="**/*.bat" />
    <exclude name="**/*.class" />
    <exclude name="**/*.html" />
    <exclude name="**/*.in" />
    <exclude name="**/*.png" />
    <exclude name="**/*.tcl" />
    <exclude name="**/*.xml" />
    <exclude name="bin/" />
    <exclude name="com/JLex/" />
    <exclude name="com/jgoodies/" />
    <exclude name="config/" />
    <exclude name="contrib/" />
    <exclude name="diva/" />
    <exclude name="diva/util/java2d/svg/" />
    <exclude name="doc/" />
    <exclude name="doc/coding/templates/" />
    <exclude name="doc/doclets/" />
    <exclude name="jni/test/jni/meaningOfLife/" />
    <exclude name="jni/test/jni/testDeux/" />
    <exclude name="jni/test/jni/testTrois/" />
    <exclude name="lbnl/" />
    <exclude name="lib/" />
    <exclude name="mk/" />
    <exclude name="org/" />
    <exclude name="ptdb/" />
    <exclude name="ptolemy/actor/corba/" />
    <exclude name="ptolemy/actor/gui/exec/" />
    <exclude name="ptolemy/actor/gui/jnlp/" />
    <exclude name="ptolemy/actor/gui/ptjacl/" />
    <exclude name="ptolemy/actor/gui/python/" />
    <exclude name="ptolemy/actor/lib/database/" />
    <exclude name="ptolemy/actor/lib/embeddedJava/" />
    <exclude name="ptolemy/actor/lib/excel/" />
    <exclude name="ptolemy/actor/lib/io/comm/" />
    <exclude name="ptolemy/actor/lib/jai/" />
    <exclude name="ptolemy/actor/lib/jai/" />
    <exclude name="ptolemy/actor/lib/jmf/" />
    <exclude name="ptolemy/actor/lib/jmf/" />
    <exclude name="ptolemy/actor/lib/jni/" />
    <exclude name="ptolemy/actor/lib/jopio/" />
    <exclude name="ptolemy/actor/lib/joystick/" />
    <exclude name="ptolemy/actor/lib/joystick/" />
    <exclude name="ptolemy/actor/lib/jxta/" />
    <exclude name="ptolemy/actor/lib/jxta/" />
    <exclude name="ptolemy/actor/lib/logic/fuzzy/" />
    <exclude name="ptolemy/actor/lib/mail/" />
    <exclude name="ptolemy/actor/lib/opencv/" />
    <exclude name="ptolemy/actor/lib/reactable/" />
    <exclude name="ptolemy/actor/lib/security/" />
    <exclude name="ptolemy/actor/lib/tutorial/" />
    <exclude name="ptolemy/actor/lib/vhdl/" />
    <exclude name="ptolemy/actor/lib/video/" />
    <exclude name="ptolemy/actor/lib/x10/" />
    <exclude name="ptolemy/actor/lib/x10/" />
    <exclude name="ptolemy/actor/lib/xslt/" />
    <exclude name="ptolemy/actor/ptalon/" />
    <exclude name="ptolemy/apps/" />
    <exclude name="ptolemy/apps/" />
    <exclude name="ptolemy/backtrack/" />
    <exclude name="ptolemy/backtrack/eclipse/" />
    <exclude name="ptolemy/backtrack/test/" />
    <exclude name="ptolemy/calltrop/" />
    <exclude name="ptolemy/cg/" />
    <exclude name="ptolemy/chic/" />
    <exclude name="ptolemy/codegen/newInterfaces/" />
    <exclude name="ptolemy/component/" />
    <exclude name="ptolemy/copernicus/" />
    <exclude name="ptolemy/copernicus/kernel/fragment/" />
    <exclude name="ptolemy/demo/" />
    <exclude name="ptolemy/distributed/" />
    <exclude name="ptolemy/distributed/" />
    <exclude name="ptolemy/domains/ct/demo/Saber/" />
    <exclude name="ptolemy/domains/curriculum/" />
    <exclude name="ptolemy/domains/giotto/" />
    <exclude name="ptolemy/domains/gr/" />
    <exclude name="ptolemy/domains/gr/lib/experimental/" />
    <exclude name="ptolemy/domains/gr/lib/quicktime/" />
    <exclude name="ptolemy/domains/jogl/" />
    <exclude name="ptolemy/domains/pdf/" />
    <exclude name="ptolemy/domains/petrinet/" />
    <exclude name="ptolemy/domains/psdf/" />
    <exclude name="ptolemy/domains/ptinyos/" />
    <exclude name="ptolemy/domains/space/" />
    <exclude name="ptolemy/domains/tdl/" />
    <exclude name="ptolemy/domains/tester/" />
    <exclude name="ptolemy/matlab/" />
    <exclude name="ptolemy/moml/jxta/" />
    <exclude name="ptolemy/plot/servlet/" />
    <exclude name="ptolemy/ptp/" />
    <exclude name="ptolemy/vergil/basic/itextpdf/" />
    <exclude name="ptolemy/verification/" />
    <exclude name="src/" />
    <exclude name="target/" />
    <exclude name="tmp/" />
    <exclude name="thales/" />
    <exclude name="util/" />
    <exclude name="vendors/" />
  </patternset>

  <!-- Ant targets. Alphabetize and add a description, please.  -->

  <target name="checkstyle" depends="initReports"
	  description="Run checkstyle and find common code style problems.  To avoid 'OutOfMemoryError', under bash execution 'export ANT_OPTS=-Xmx1024m'">
    <taskdef resource="checkstyletask.properties" classpath="${basedir}/ptserver/lib/checkstyle-5.3-all.jar" />
    <checkstyle config="${basedir}/ptserver/checkstyle-ptserver.xml" failOnViolation="false">
      <fileset dir="${basedir}">
	<patternset refid="ptII.excludes" />
      </fileset>
      <formatter type="${checkstyle.formatter}" toFile="${ptII.reports}/checkstyle_errors.${formatter}" />
    </checkstyle>
    <!-- <xslt in="${ptserver.output}/checkstyle_errors.xml" out="${ptserver.output}/checkstyle_report.html" style="${basedir}/ptserver/checkstyle-simple.xsl"/> -->
  </target>

  <target name="clean"
	  description="Remove all the class files and the ${ptII.reports} director">
    <delete quiet="true">
      <fileset dir="${basedir}" includes="**/*.class" />
      <fileset dir="${ptII.reports}" />
    </delete>
  </target>

  <target depends="clean" name="cleanall" />

  <target depends="build-subprojects,build-project" name="build" 
	  description="Build Ptolemy II by compiling the .java files"/>

  <target name="build-subprojects" />
  <target name="build-project">
    <echo message="${ant.project.name}: ${ant.file}" />
    <javac debug="true" debuglevel="${debuglevel}" destdir="." source="${source}" target="${target}" includeAntRuntime="false" fork="true" memoryinitialsize="256m" memorymaximumsize="256m">
      <src path="${basedir}" />
      <patternset refid="ptII.excludes" />
      <classpath refid="ptII.classpath" />
    </javac>
  </target>

  <property name="ptdroid.builddir" location="${basedir}/ptdroid/ptbin" />
  <target name="ptdroid.build">
    <copy includeemptydirs="false" todir="${ptdroid.builddir}">
      <fileset dir="${basedir}">
	<include name="**/*.properties" />
	<patternset refid="ptII.excludes" />
	<exclude name="ptolemy/**/test/" />
	<exclude name="ptolemy/**/demo/" />
      </fileset>
    </copy>
    <echo message="${ant.project.name}: ${ant.file}" />
    <javac debug="true" debuglevel="${debuglevel}" destdir="${ptdroid.builddir}" source="${source}" includeAntRuntime="false" fork="true" memoryinitialsize="256m" memorymaximumsize="256m">
      <src path="${basedir}" />
      <patternset refid="ptII.excludes" />
      <classpath refid="ptII.classpath" />
    </javac>
  </target>
  <property name="findbugs.home" value="/usr/share/findbugs/" />

  <target name="findbugs" depends="build, initReports"
	  description="Run FindBugs (http://findbugs.sourceforge.net/)">
    <taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask" />
    <findbugs home="${findbugs.home}" output="xml" outputFile="${ptII.reports}/ptserver-fb.xml" jvmargs="-Xms256m -Xmx512m" includefilter="${basedir}/ptserver/findbugs-includes.xml" excludefilter="${basedir}/ptserver/findbugs-excludes.xml">
      <auxclasspath refid="ptII.classpath" />
      <sourcePath path="${basedir}" />
      <class location="ptserver/actor" />
      <class location="ptserver/communication" />
      <class location="ptserver/control" />
      <class location="ptserver/data" />
      <class location="ptserver/test" />
      <class location="ptolemy/homer" />
    </findbugs>
  </target>

  <target name="initReports">
    <mkdir dir="${junit.output.dir}" />
  </target>

  <target name="test" depends="build, initReports"
	  description="Run the junit tests in junit/*.java.  Use -Djunit.formatter=xml|brief|plain|failure, default is plain.  Output is in ${junit.output.dir}">
    <junit fork="yes"
	   jvm="ptolemy/util/test/junit/javachdir"
	   printsummary="withOutAndErr"
	   showoutput="yes"
	   timeout="300000">
      <classpath>
	<path refid="ptII.classpath" />
      </classpath>
      <batchtest todir="${junit.output.dir}">
	<fileset dir="${basedir}">
	  <include name="**/junit/*.java" />
	  <patternset refid="ptII.excludes" />
	</fileset>
      </batchtest>
      <formatter type="${junit.formatter}" />
    </junit>
  </target>

  <target name="test.auto" depends="build, initReports"
	  description="Run the auto tests.  Use -Djunit.formatter=xml|brief|plain|failure, default is plain.  Output is in ${junit.output.dir}">
    <junit fork="yes"
	   jvm="ptolemy/util/test/junit/javachdir"
	   printsummary="withOutAndErr"
	   showoutput="yes"
	   timeout="300000">
      <classpath>
	<path refid="ptII.classpath" />
      </classpath>
      <formatter type="${junit.formatter}" usefile="false"/>
      <test  name="ptolemy.actor.lib.io.test.junit.JUnitTclTest" />
    </junit>
  </target>

  <!-- Cobertura -->
  <target name="test.cobertura" depends="build, initReports">
    <property name="instrumented.dir" value="${ptII.reports}/instrumented" />
    <property name="cobertura.dir" value="ptserver/lib" />
    <property name="coveragereport.dir" value="${ptII.reports}/coveragereport" />
    <path id="cobertura.classpath">
      <fileset dir="${cobertura.dir}">
	<include name="cobertura.jar" />
	<include name="asm-3.0.jar" />
	<include name="asm-tree-3.0.jar" />
	<include name="jakarta-oro-2.0.8.jar" />
	<include name="log4j-1.2.9.jar" />
      </fileset>
    </path>
    <taskdef classpathref="cobertura.classpath" resource="tasks.properties" />
    <delete file="cobertura.ser" />
    <delete dir="${instrumented.dir}" />
    <cobertura-instrument todir="${instrumented.dir}">
      <fileset dir="${basedir}">
	<patternset refid="ptII.excludes" />
      </fileset>
    </cobertura-instrument>
    <junit printsummary="yes" fork="yes">
      <classpath>
	<path location="${instrumented.dir}" />
	<path refid="ptII.classpath" />
	<path refid="cobertura.classpath" />
      </classpath>
      <formatter type="${junit.formatter}" />
      <batchtest fork="yes">
	<fileset dir="${basedir}">
	  <include name="**/junit/*.java" />
	</fileset>
      </batchtest>
      <sysproperty key="net.sourceforge.cobertura.datafile" file="${basedir}/cobertura.ser" />
    </junit>
    <cobertura-report format="xml" destdir="${coveragereport.dir}" srcdir="${basedir}" />
  </target>

  <target name="run" depends="vergil"
	  description="Invoke the Ptolemy II User Interface (alias for the vergil target)"/>

  <target name="vergil" depends="build-project"
	  description="Invoke the Ptolemy II User Interface.  To run a model, use ant vergil -Dmodel=model.xml"
	  >
    <java classname="ptolemy.vergil.VergilApplication"
	  fork="true">
      <classpath>
	<pathelement location="/Users/cxh/ptII" />
	<path refid="ptII.classpath"/>
      </classpath>
      <jvmarg value="-Xmx1024"/>
      <arg line="${model}"/>
    </java>
  </target>

</project>
